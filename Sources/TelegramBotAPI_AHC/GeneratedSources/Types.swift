// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    func post_sol_userLogin(_ input: Operations.post_sol_userLogin.Input) async throws -> Operations.post_sol_userLogin.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    func post_sol_authCode(_ input: Operations.post_sol_authCode.Input) async throws -> Operations.post_sol_authCode.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    func post_sol_authPassword(_ input: Operations.post_sol_authPassword.Input) async throws -> Operations.post_sol_authPassword.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    func post_sol_registerUser(_ input: Operations.post_sol_registerUser.Input) async throws -> Operations.post_sol_registerUser.Output
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    func post_sol_optimizeMemory(_ input: Operations.post_sol_optimizeMemory.Input) async throws -> Operations.post_sol_optimizeMemory.Output
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    func post_sol_getMessageInfo(_ input: Operations.post_sol_getMessageInfo.Input) async throws -> Operations.post_sol_getMessageInfo.Output
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    func post_sol_getChatMembers(_ input: Operations.post_sol_getChatMembers.Input) async throws -> Operations.post_sol_getChatMembers.Output
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    func post_sol_deleteMessages(_ input: Operations.post_sol_deleteMessages.Input) async throws -> Operations.post_sol_deleteMessages.Output
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    func post_sol_ping(_ input: Operations.post_sol_ping.Input) async throws -> Operations.post_sol_ping.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    func post_sol_getChats(_ input: Operations.post_sol_getChats.Input) async throws -> Operations.post_sol_getChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    func post_sol_getCommonChats(_ input: Operations.post_sol_getCommonChats.Input) async throws -> Operations.post_sol_getCommonChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    func post_sol_getInactiveChats(_ input: Operations.post_sol_getInactiveChats.Input) async throws -> Operations.post_sol_getInactiveChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    func post_sol_searchPublicChats(_ input: Operations.post_sol_searchPublicChats.Input) async throws -> Operations.post_sol_searchPublicChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    func post_sol_setPollAnswer(_ input: Operations.post_sol_setPollAnswer.Input) async throws -> Operations.post_sol_setPollAnswer.Output
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    func post_sol_joinChat(_ input: Operations.post_sol_joinChat.Input) async throws -> Operations.post_sol_joinChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    func post_sol_addChatMember(_ input: Operations.post_sol_addChatMember.Input) async throws -> Operations.post_sol_addChatMember.Output
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    func post_sol_reportChat(_ input: Operations.post_sol_reportChat.Input) async throws -> Operations.post_sol_reportChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    func post_sol_createChat(_ input: Operations.post_sol_createChat.Input) async throws -> Operations.post_sol_createChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    func post_sol_searchMessages(_ input: Operations.post_sol_searchMessages.Input) async throws -> Operations.post_sol_searchMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    func post_sol_searchChatMessages(_ input: Operations.post_sol_searchChatMessages.Input) async throws -> Operations.post_sol_searchChatMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    func post_sol_getCallbackQueryAnswer(_ input: Operations.post_sol_getCallbackQueryAnswer.Input) async throws -> Operations.post_sol_getCallbackQueryAnswer.Output
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    func post_sol_deleteChatHistory(_ input: Operations.post_sol_deleteChatHistory.Input) async throws -> Operations.post_sol_deleteChatHistory.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    func post_sol_getScheduledMessages(_ input: Operations.post_sol_getScheduledMessages.Input) async throws -> Operations.post_sol_getScheduledMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    func post_sol_editMessageScheduling(_ input: Operations.post_sol_editMessageScheduling.Input) async throws -> Operations.post_sol_editMessageScheduling.Output
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    func post_sol_getProxies(_ input: Operations.post_sol_getProxies.Input) async throws -> Operations.post_sol_getProxies.Output
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    func post_sol_addProxy(_ input: Operations.post_sol_addProxy.Input) async throws -> Operations.post_sol_addProxy.Output
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    func post_sol_deleteProxy(_ input: Operations.post_sol_deleteProxy.Input) async throws -> Operations.post_sol_deleteProxy.Output
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    func post_sol_enableProxy(_ input: Operations.post_sol_enableProxy.Input) async throws -> Operations.post_sol_enableProxy.Output
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    func post_sol_disableProxy(_ input: Operations.post_sol_disableProxy.Input) async throws -> Operations.post_sol_disableProxy.Output
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    func post_sol_getUpdates(_ input: Operations.post_sol_getUpdates.Input) async throws -> Operations.post_sol_getUpdates.Output
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    func post_sol_setWebhook(_ input: Operations.post_sol_setWebhook.Input) async throws -> Operations.post_sol_setWebhook.Output
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    func post_sol_deleteWebhook(_ input: Operations.post_sol_deleteWebhook.Input) async throws -> Operations.post_sol_deleteWebhook.Output
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    func post_sol_getWebhookInfo(_ input: Operations.post_sol_getWebhookInfo.Input) async throws -> Operations.post_sol_getWebhookInfo.Output
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    func post_sol_getMe(_ input: Operations.post_sol_getMe.Input) async throws -> Operations.post_sol_getMe.Output
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    func post_sol_logOut(_ input: Operations.post_sol_logOut.Input) async throws -> Operations.post_sol_logOut.Output
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    func post_sol_close(_ input: Operations.post_sol_close.Input) async throws -> Operations.post_sol_close.Output
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    func post_sol_sendMessage(_ input: Operations.post_sol_sendMessage.Input) async throws -> Operations.post_sol_sendMessage.Output
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    func post_sol_forwardMessage(_ input: Operations.post_sol_forwardMessage.Input) async throws -> Operations.post_sol_forwardMessage.Output
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    func post_sol_copyMessage(_ input: Operations.post_sol_copyMessage.Input) async throws -> Operations.post_sol_copyMessage.Output
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    func post_sol_sendPhoto(_ input: Operations.post_sol_sendPhoto.Input) async throws -> Operations.post_sol_sendPhoto.Output
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    func post_sol_sendAudio(_ input: Operations.post_sol_sendAudio.Input) async throws -> Operations.post_sol_sendAudio.Output
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    func post_sol_sendDocument(_ input: Operations.post_sol_sendDocument.Input) async throws -> Operations.post_sol_sendDocument.Output
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    func post_sol_sendVideo(_ input: Operations.post_sol_sendVideo.Input) async throws -> Operations.post_sol_sendVideo.Output
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    func post_sol_sendAnimation(_ input: Operations.post_sol_sendAnimation.Input) async throws -> Operations.post_sol_sendAnimation.Output
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    func post_sol_sendVoice(_ input: Operations.post_sol_sendVoice.Input) async throws -> Operations.post_sol_sendVoice.Output
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    func post_sol_sendVideoNote(_ input: Operations.post_sol_sendVideoNote.Input) async throws -> Operations.post_sol_sendVideoNote.Output
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    func post_sol_sendMediaGroup(_ input: Operations.post_sol_sendMediaGroup.Input) async throws -> Operations.post_sol_sendMediaGroup.Output
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    func post_sol_sendLocation(_ input: Operations.post_sol_sendLocation.Input) async throws -> Operations.post_sol_sendLocation.Output
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    func post_sol_editMessageLiveLocation(_ input: Operations.post_sol_editMessageLiveLocation.Input) async throws -> Operations.post_sol_editMessageLiveLocation.Output
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    func post_sol_stopMessageLiveLocation(_ input: Operations.post_sol_stopMessageLiveLocation.Input) async throws -> Operations.post_sol_stopMessageLiveLocation.Output
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    func post_sol_sendVenue(_ input: Operations.post_sol_sendVenue.Input) async throws -> Operations.post_sol_sendVenue.Output
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    func post_sol_sendContact(_ input: Operations.post_sol_sendContact.Input) async throws -> Operations.post_sol_sendContact.Output
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    func post_sol_sendPoll(_ input: Operations.post_sol_sendPoll.Input) async throws -> Operations.post_sol_sendPoll.Output
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    func post_sol_sendDice(_ input: Operations.post_sol_sendDice.Input) async throws -> Operations.post_sol_sendDice.Output
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    func post_sol_sendChatAction(_ input: Operations.post_sol_sendChatAction.Input) async throws -> Operations.post_sol_sendChatAction.Output
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    func post_sol_getUserProfilePhotos(_ input: Operations.post_sol_getUserProfilePhotos.Input) async throws -> Operations.post_sol_getUserProfilePhotos.Output
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    func post_sol_getFile(_ input: Operations.post_sol_getFile.Input) async throws -> Operations.post_sol_getFile.Output
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    func post_sol_kickChatMember(_ input: Operations.post_sol_kickChatMember.Input) async throws -> Operations.post_sol_kickChatMember.Output
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    func post_sol_unbanChatMember(_ input: Operations.post_sol_unbanChatMember.Input) async throws -> Operations.post_sol_unbanChatMember.Output
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    func post_sol_restrictChatMember(_ input: Operations.post_sol_restrictChatMember.Input) async throws -> Operations.post_sol_restrictChatMember.Output
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    func post_sol_promoteChatMember(_ input: Operations.post_sol_promoteChatMember.Input) async throws -> Operations.post_sol_promoteChatMember.Output
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    func post_sol_setChatAdministratorCustomTitle(_ input: Operations.post_sol_setChatAdministratorCustomTitle.Input) async throws -> Operations.post_sol_setChatAdministratorCustomTitle.Output
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    func post_sol_setChatPermissions(_ input: Operations.post_sol_setChatPermissions.Input) async throws -> Operations.post_sol_setChatPermissions.Output
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    func post_sol_exportChatInviteLink(_ input: Operations.post_sol_exportChatInviteLink.Input) async throws -> Operations.post_sol_exportChatInviteLink.Output
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    func post_sol_setChatPhoto(_ input: Operations.post_sol_setChatPhoto.Input) async throws -> Operations.post_sol_setChatPhoto.Output
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    func post_sol_deleteChatPhoto(_ input: Operations.post_sol_deleteChatPhoto.Input) async throws -> Operations.post_sol_deleteChatPhoto.Output
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    func post_sol_setChatTitle(_ input: Operations.post_sol_setChatTitle.Input) async throws -> Operations.post_sol_setChatTitle.Output
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    func post_sol_setChatDescription(_ input: Operations.post_sol_setChatDescription.Input) async throws -> Operations.post_sol_setChatDescription.Output
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    func post_sol_pinChatMessage(_ input: Operations.post_sol_pinChatMessage.Input) async throws -> Operations.post_sol_pinChatMessage.Output
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    func post_sol_unpinChatMessage(_ input: Operations.post_sol_unpinChatMessage.Input) async throws -> Operations.post_sol_unpinChatMessage.Output
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    func post_sol_unpinAllChatMessages(_ input: Operations.post_sol_unpinAllChatMessages.Input) async throws -> Operations.post_sol_unpinAllChatMessages.Output
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    func post_sol_leaveChat(_ input: Operations.post_sol_leaveChat.Input) async throws -> Operations.post_sol_leaveChat.Output
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    func post_sol_getChat(_ input: Operations.post_sol_getChat.Input) async throws -> Operations.post_sol_getChat.Output
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    func post_sol_getChatAdministrators(_ input: Operations.post_sol_getChatAdministrators.Input) async throws -> Operations.post_sol_getChatAdministrators.Output
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    func post_sol_getChatMembersCount(_ input: Operations.post_sol_getChatMembersCount.Input) async throws -> Operations.post_sol_getChatMembersCount.Output
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    func post_sol_getChatMember(_ input: Operations.post_sol_getChatMember.Input) async throws -> Operations.post_sol_getChatMember.Output
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    func post_sol_setChatStickerSet(_ input: Operations.post_sol_setChatStickerSet.Input) async throws -> Operations.post_sol_setChatStickerSet.Output
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    func post_sol_deleteChatStickerSet(_ input: Operations.post_sol_deleteChatStickerSet.Input) async throws -> Operations.post_sol_deleteChatStickerSet.Output
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    func post_sol_answerCallbackQuery(_ input: Operations.post_sol_answerCallbackQuery.Input) async throws -> Operations.post_sol_answerCallbackQuery.Output
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    func post_sol_setMyCommands(_ input: Operations.post_sol_setMyCommands.Input) async throws -> Operations.post_sol_setMyCommands.Output
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    func post_sol_getMyCommands(_ input: Operations.post_sol_getMyCommands.Input) async throws -> Operations.post_sol_getMyCommands.Output
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    func post_sol_editMessageText(_ input: Operations.post_sol_editMessageText.Input) async throws -> Operations.post_sol_editMessageText.Output
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    func post_sol_editMessageCaption(_ input: Operations.post_sol_editMessageCaption.Input) async throws -> Operations.post_sol_editMessageCaption.Output
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    func post_sol_editMessageMedia(_ input: Operations.post_sol_editMessageMedia.Input) async throws -> Operations.post_sol_editMessageMedia.Output
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    func post_sol_editMessageReplyMarkup(_ input: Operations.post_sol_editMessageReplyMarkup.Input) async throws -> Operations.post_sol_editMessageReplyMarkup.Output
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    func post_sol_stopPoll(_ input: Operations.post_sol_stopPoll.Input) async throws -> Operations.post_sol_stopPoll.Output
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    func post_sol_deleteMessage(_ input: Operations.post_sol_deleteMessage.Input) async throws -> Operations.post_sol_deleteMessage.Output
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    func post_sol_sendSticker(_ input: Operations.post_sol_sendSticker.Input) async throws -> Operations.post_sol_sendSticker.Output
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    func post_sol_getStickerSet(_ input: Operations.post_sol_getStickerSet.Input) async throws -> Operations.post_sol_getStickerSet.Output
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    func post_sol_uploadStickerFile(_ input: Operations.post_sol_uploadStickerFile.Input) async throws -> Operations.post_sol_uploadStickerFile.Output
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    func post_sol_createNewStickerSet(_ input: Operations.post_sol_createNewStickerSet.Input) async throws -> Operations.post_sol_createNewStickerSet.Output
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    func post_sol_addStickerToSet(_ input: Operations.post_sol_addStickerToSet.Input) async throws -> Operations.post_sol_addStickerToSet.Output
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    func post_sol_setStickerPositionInSet(_ input: Operations.post_sol_setStickerPositionInSet.Input) async throws -> Operations.post_sol_setStickerPositionInSet.Output
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    func post_sol_deleteStickerFromSet(_ input: Operations.post_sol_deleteStickerFromSet.Input) async throws -> Operations.post_sol_deleteStickerFromSet.Output
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    func post_sol_setStickerSetThumb(_ input: Operations.post_sol_setStickerSetThumb.Input) async throws -> Operations.post_sol_setStickerSetThumb.Output
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    func post_sol_answerInlineQuery(_ input: Operations.post_sol_answerInlineQuery.Input) async throws -> Operations.post_sol_answerInlineQuery.Output
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    func post_sol_sendInvoice(_ input: Operations.post_sol_sendInvoice.Input) async throws -> Operations.post_sol_sendInvoice.Output
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    func post_sol_answerShippingQuery(_ input: Operations.post_sol_answerShippingQuery.Input) async throws -> Operations.post_sol_answerShippingQuery.Output
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    func post_sol_answerPreCheckoutQuery(_ input: Operations.post_sol_answerPreCheckoutQuery.Input) async throws -> Operations.post_sol_answerPreCheckoutQuery.Output
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    func post_sol_setPassportDataErrors(_ input: Operations.post_sol_setPassportDataErrors.Input) async throws -> Operations.post_sol_setPassportDataErrors.Output
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    func post_sol_sendGame(_ input: Operations.post_sol_sendGame.Input) async throws -> Operations.post_sol_sendGame.Output
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    func post_sol_setGameScore(_ input: Operations.post_sol_setGameScore.Input) async throws -> Operations.post_sol_setGameScore.Output
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    func post_sol_getGameHighScores(_ input: Operations.post_sol_getGameHighScores.Input) async throws -> Operations.post_sol_getGameHighScores.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    public func post_sol_userLogin(
        headers: Operations.post_sol_userLogin.Input.Headers = .init(),
        body: Operations.post_sol_userLogin.Input.Body
    ) async throws -> Operations.post_sol_userLogin.Output {
        try await post_sol_userLogin(Operations.post_sol_userLogin.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    public func post_sol_authCode(
        headers: Operations.post_sol_authCode.Input.Headers = .init(),
        body: Operations.post_sol_authCode.Input.Body
    ) async throws -> Operations.post_sol_authCode.Output {
        try await post_sol_authCode(Operations.post_sol_authCode.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    public func post_sol_authPassword(
        headers: Operations.post_sol_authPassword.Input.Headers = .init(),
        body: Operations.post_sol_authPassword.Input.Body
    ) async throws -> Operations.post_sol_authPassword.Output {
        try await post_sol_authPassword(Operations.post_sol_authPassword.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    public func post_sol_registerUser(
        headers: Operations.post_sol_registerUser.Input.Headers = .init(),
        body: Operations.post_sol_registerUser.Input.Body
    ) async throws -> Operations.post_sol_registerUser.Output {
        try await post_sol_registerUser(Operations.post_sol_registerUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    public func post_sol_optimizeMemory(headers: Operations.post_sol_optimizeMemory.Input.Headers = .init()) async throws -> Operations.post_sol_optimizeMemory.Output {
        try await post_sol_optimizeMemory(Operations.post_sol_optimizeMemory.Input(headers: headers))
    }
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    public func post_sol_getMessageInfo(
        headers: Operations.post_sol_getMessageInfo.Input.Headers = .init(),
        body: Operations.post_sol_getMessageInfo.Input.Body
    ) async throws -> Operations.post_sol_getMessageInfo.Output {
        try await post_sol_getMessageInfo(Operations.post_sol_getMessageInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    public func post_sol_getChatMembers(
        headers: Operations.post_sol_getChatMembers.Input.Headers = .init(),
        body: Operations.post_sol_getChatMembers.Input.Body
    ) async throws -> Operations.post_sol_getChatMembers.Output {
        try await post_sol_getChatMembers(Operations.post_sol_getChatMembers.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    public func post_sol_deleteMessages(
        headers: Operations.post_sol_deleteMessages.Input.Headers = .init(),
        body: Operations.post_sol_deleteMessages.Input.Body
    ) async throws -> Operations.post_sol_deleteMessages.Output {
        try await post_sol_deleteMessages(Operations.post_sol_deleteMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    public func post_sol_ping(headers: Operations.post_sol_ping.Input.Headers = .init()) async throws -> Operations.post_sol_ping.Output {
        try await post_sol_ping(Operations.post_sol_ping.Input(headers: headers))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    public func post_sol_getChats(
        headers: Operations.post_sol_getChats.Input.Headers = .init(),
        body: Operations.post_sol_getChats.Input.Body
    ) async throws -> Operations.post_sol_getChats.Output {
        try await post_sol_getChats(Operations.post_sol_getChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    public func post_sol_getCommonChats(
        headers: Operations.post_sol_getCommonChats.Input.Headers = .init(),
        body: Operations.post_sol_getCommonChats.Input.Body
    ) async throws -> Operations.post_sol_getCommonChats.Output {
        try await post_sol_getCommonChats(Operations.post_sol_getCommonChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    public func post_sol_getInactiveChats(headers: Operations.post_sol_getInactiveChats.Input.Headers = .init()) async throws -> Operations.post_sol_getInactiveChats.Output {
        try await post_sol_getInactiveChats(Operations.post_sol_getInactiveChats.Input(headers: headers))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    public func post_sol_searchPublicChats(
        headers: Operations.post_sol_searchPublicChats.Input.Headers = .init(),
        body: Operations.post_sol_searchPublicChats.Input.Body
    ) async throws -> Operations.post_sol_searchPublicChats.Output {
        try await post_sol_searchPublicChats(Operations.post_sol_searchPublicChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    public func post_sol_setPollAnswer(
        headers: Operations.post_sol_setPollAnswer.Input.Headers = .init(),
        body: Operations.post_sol_setPollAnswer.Input.Body
    ) async throws -> Operations.post_sol_setPollAnswer.Output {
        try await post_sol_setPollAnswer(Operations.post_sol_setPollAnswer.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    public func post_sol_joinChat(
        headers: Operations.post_sol_joinChat.Input.Headers = .init(),
        body: Operations.post_sol_joinChat.Input.Body
    ) async throws -> Operations.post_sol_joinChat.Output {
        try await post_sol_joinChat(Operations.post_sol_joinChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    public func post_sol_addChatMember(
        headers: Operations.post_sol_addChatMember.Input.Headers = .init(),
        body: Operations.post_sol_addChatMember.Input.Body
    ) async throws -> Operations.post_sol_addChatMember.Output {
        try await post_sol_addChatMember(Operations.post_sol_addChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    public func post_sol_reportChat(
        headers: Operations.post_sol_reportChat.Input.Headers = .init(),
        body: Operations.post_sol_reportChat.Input.Body
    ) async throws -> Operations.post_sol_reportChat.Output {
        try await post_sol_reportChat(Operations.post_sol_reportChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    public func post_sol_createChat(
        headers: Operations.post_sol_createChat.Input.Headers = .init(),
        body: Operations.post_sol_createChat.Input.Body
    ) async throws -> Operations.post_sol_createChat.Output {
        try await post_sol_createChat(Operations.post_sol_createChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    public func post_sol_searchMessages(
        headers: Operations.post_sol_searchMessages.Input.Headers = .init(),
        body: Operations.post_sol_searchMessages.Input.Body
    ) async throws -> Operations.post_sol_searchMessages.Output {
        try await post_sol_searchMessages(Operations.post_sol_searchMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    public func post_sol_searchChatMessages(
        headers: Operations.post_sol_searchChatMessages.Input.Headers = .init(),
        body: Operations.post_sol_searchChatMessages.Input.Body
    ) async throws -> Operations.post_sol_searchChatMessages.Output {
        try await post_sol_searchChatMessages(Operations.post_sol_searchChatMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    public func post_sol_getCallbackQueryAnswer(
        headers: Operations.post_sol_getCallbackQueryAnswer.Input.Headers = .init(),
        body: Operations.post_sol_getCallbackQueryAnswer.Input.Body
    ) async throws -> Operations.post_sol_getCallbackQueryAnswer.Output {
        try await post_sol_getCallbackQueryAnswer(Operations.post_sol_getCallbackQueryAnswer.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    public func post_sol_deleteChatHistory(
        headers: Operations.post_sol_deleteChatHistory.Input.Headers = .init(),
        body: Operations.post_sol_deleteChatHistory.Input.Body
    ) async throws -> Operations.post_sol_deleteChatHistory.Output {
        try await post_sol_deleteChatHistory(Operations.post_sol_deleteChatHistory.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    public func post_sol_getScheduledMessages(
        headers: Operations.post_sol_getScheduledMessages.Input.Headers = .init(),
        body: Operations.post_sol_getScheduledMessages.Input.Body
    ) async throws -> Operations.post_sol_getScheduledMessages.Output {
        try await post_sol_getScheduledMessages(Operations.post_sol_getScheduledMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    public func post_sol_editMessageScheduling(
        headers: Operations.post_sol_editMessageScheduling.Input.Headers = .init(),
        body: Operations.post_sol_editMessageScheduling.Input.Body
    ) async throws -> Operations.post_sol_editMessageScheduling.Output {
        try await post_sol_editMessageScheduling(Operations.post_sol_editMessageScheduling.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    public func post_sol_getProxies(headers: Operations.post_sol_getProxies.Input.Headers = .init()) async throws -> Operations.post_sol_getProxies.Output {
        try await post_sol_getProxies(Operations.post_sol_getProxies.Input(headers: headers))
    }
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    public func post_sol_addProxy(
        headers: Operations.post_sol_addProxy.Input.Headers = .init(),
        body: Operations.post_sol_addProxy.Input.Body
    ) async throws -> Operations.post_sol_addProxy.Output {
        try await post_sol_addProxy(Operations.post_sol_addProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    public func post_sol_deleteProxy(
        headers: Operations.post_sol_deleteProxy.Input.Headers = .init(),
        body: Operations.post_sol_deleteProxy.Input.Body
    ) async throws -> Operations.post_sol_deleteProxy.Output {
        try await post_sol_deleteProxy(Operations.post_sol_deleteProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    public func post_sol_enableProxy(
        headers: Operations.post_sol_enableProxy.Input.Headers = .init(),
        body: Operations.post_sol_enableProxy.Input.Body
    ) async throws -> Operations.post_sol_enableProxy.Output {
        try await post_sol_enableProxy(Operations.post_sol_enableProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    public func post_sol_disableProxy(
        headers: Operations.post_sol_disableProxy.Input.Headers = .init(),
        body: Operations.post_sol_disableProxy.Input.Body
    ) async throws -> Operations.post_sol_disableProxy.Output {
        try await post_sol_disableProxy(Operations.post_sol_disableProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    public func post_sol_getUpdates(
        headers: Operations.post_sol_getUpdates.Input.Headers = .init(),
        body: Operations.post_sol_getUpdates.Input.Body
    ) async throws -> Operations.post_sol_getUpdates.Output {
        try await post_sol_getUpdates(Operations.post_sol_getUpdates.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    public func post_sol_setWebhook(
        headers: Operations.post_sol_setWebhook.Input.Headers = .init(),
        body: Operations.post_sol_setWebhook.Input.Body
    ) async throws -> Operations.post_sol_setWebhook.Output {
        try await post_sol_setWebhook(Operations.post_sol_setWebhook.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    public func post_sol_deleteWebhook(
        headers: Operations.post_sol_deleteWebhook.Input.Headers = .init(),
        body: Operations.post_sol_deleteWebhook.Input.Body
    ) async throws -> Operations.post_sol_deleteWebhook.Output {
        try await post_sol_deleteWebhook(Operations.post_sol_deleteWebhook.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    public func post_sol_getWebhookInfo(headers: Operations.post_sol_getWebhookInfo.Input.Headers = .init()) async throws -> Operations.post_sol_getWebhookInfo.Output {
        try await post_sol_getWebhookInfo(Operations.post_sol_getWebhookInfo.Input(headers: headers))
    }
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    public func post_sol_getMe(headers: Operations.post_sol_getMe.Input.Headers = .init()) async throws -> Operations.post_sol_getMe.Output {
        try await post_sol_getMe(Operations.post_sol_getMe.Input(headers: headers))
    }
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    public func post_sol_logOut(headers: Operations.post_sol_logOut.Input.Headers = .init()) async throws -> Operations.post_sol_logOut.Output {
        try await post_sol_logOut(Operations.post_sol_logOut.Input(headers: headers))
    }
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    public func post_sol_close(headers: Operations.post_sol_close.Input.Headers = .init()) async throws -> Operations.post_sol_close.Output {
        try await post_sol_close(Operations.post_sol_close.Input(headers: headers))
    }
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    public func post_sol_sendMessage(
        headers: Operations.post_sol_sendMessage.Input.Headers = .init(),
        body: Operations.post_sol_sendMessage.Input.Body
    ) async throws -> Operations.post_sol_sendMessage.Output {
        try await post_sol_sendMessage(Operations.post_sol_sendMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    public func post_sol_forwardMessage(
        headers: Operations.post_sol_forwardMessage.Input.Headers = .init(),
        body: Operations.post_sol_forwardMessage.Input.Body
    ) async throws -> Operations.post_sol_forwardMessage.Output {
        try await post_sol_forwardMessage(Operations.post_sol_forwardMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    public func post_sol_copyMessage(
        headers: Operations.post_sol_copyMessage.Input.Headers = .init(),
        body: Operations.post_sol_copyMessage.Input.Body
    ) async throws -> Operations.post_sol_copyMessage.Output {
        try await post_sol_copyMessage(Operations.post_sol_copyMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    public func post_sol_sendPhoto(
        headers: Operations.post_sol_sendPhoto.Input.Headers = .init(),
        body: Operations.post_sol_sendPhoto.Input.Body
    ) async throws -> Operations.post_sol_sendPhoto.Output {
        try await post_sol_sendPhoto(Operations.post_sol_sendPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    public func post_sol_sendAudio(
        headers: Operations.post_sol_sendAudio.Input.Headers = .init(),
        body: Operations.post_sol_sendAudio.Input.Body
    ) async throws -> Operations.post_sol_sendAudio.Output {
        try await post_sol_sendAudio(Operations.post_sol_sendAudio.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    public func post_sol_sendDocument(
        headers: Operations.post_sol_sendDocument.Input.Headers = .init(),
        body: Operations.post_sol_sendDocument.Input.Body
    ) async throws -> Operations.post_sol_sendDocument.Output {
        try await post_sol_sendDocument(Operations.post_sol_sendDocument.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    public func post_sol_sendVideo(
        headers: Operations.post_sol_sendVideo.Input.Headers = .init(),
        body: Operations.post_sol_sendVideo.Input.Body
    ) async throws -> Operations.post_sol_sendVideo.Output {
        try await post_sol_sendVideo(Operations.post_sol_sendVideo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    public func post_sol_sendAnimation(
        headers: Operations.post_sol_sendAnimation.Input.Headers = .init(),
        body: Operations.post_sol_sendAnimation.Input.Body
    ) async throws -> Operations.post_sol_sendAnimation.Output {
        try await post_sol_sendAnimation(Operations.post_sol_sendAnimation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    public func post_sol_sendVoice(
        headers: Operations.post_sol_sendVoice.Input.Headers = .init(),
        body: Operations.post_sol_sendVoice.Input.Body
    ) async throws -> Operations.post_sol_sendVoice.Output {
        try await post_sol_sendVoice(Operations.post_sol_sendVoice.Input(
            headers: headers,
            body: body
        ))
    }
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    public func post_sol_sendVideoNote(
        headers: Operations.post_sol_sendVideoNote.Input.Headers = .init(),
        body: Operations.post_sol_sendVideoNote.Input.Body
    ) async throws -> Operations.post_sol_sendVideoNote.Output {
        try await post_sol_sendVideoNote(Operations.post_sol_sendVideoNote.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    public func post_sol_sendMediaGroup(
        headers: Operations.post_sol_sendMediaGroup.Input.Headers = .init(),
        body: Operations.post_sol_sendMediaGroup.Input.Body
    ) async throws -> Operations.post_sol_sendMediaGroup.Output {
        try await post_sol_sendMediaGroup(Operations.post_sol_sendMediaGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    public func post_sol_sendLocation(
        headers: Operations.post_sol_sendLocation.Input.Headers = .init(),
        body: Operations.post_sol_sendLocation.Input.Body
    ) async throws -> Operations.post_sol_sendLocation.Output {
        try await post_sol_sendLocation(Operations.post_sol_sendLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    public func post_sol_editMessageLiveLocation(
        headers: Operations.post_sol_editMessageLiveLocation.Input.Headers = .init(),
        body: Operations.post_sol_editMessageLiveLocation.Input.Body
    ) async throws -> Operations.post_sol_editMessageLiveLocation.Output {
        try await post_sol_editMessageLiveLocation(Operations.post_sol_editMessageLiveLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    public func post_sol_stopMessageLiveLocation(
        headers: Operations.post_sol_stopMessageLiveLocation.Input.Headers = .init(),
        body: Operations.post_sol_stopMessageLiveLocation.Input.Body
    ) async throws -> Operations.post_sol_stopMessageLiveLocation.Output {
        try await post_sol_stopMessageLiveLocation(Operations.post_sol_stopMessageLiveLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    public func post_sol_sendVenue(
        headers: Operations.post_sol_sendVenue.Input.Headers = .init(),
        body: Operations.post_sol_sendVenue.Input.Body
    ) async throws -> Operations.post_sol_sendVenue.Output {
        try await post_sol_sendVenue(Operations.post_sol_sendVenue.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    public func post_sol_sendContact(
        headers: Operations.post_sol_sendContact.Input.Headers = .init(),
        body: Operations.post_sol_sendContact.Input.Body
    ) async throws -> Operations.post_sol_sendContact.Output {
        try await post_sol_sendContact(Operations.post_sol_sendContact.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    public func post_sol_sendPoll(
        headers: Operations.post_sol_sendPoll.Input.Headers = .init(),
        body: Operations.post_sol_sendPoll.Input.Body
    ) async throws -> Operations.post_sol_sendPoll.Output {
        try await post_sol_sendPoll(Operations.post_sol_sendPoll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    public func post_sol_sendDice(
        headers: Operations.post_sol_sendDice.Input.Headers = .init(),
        body: Operations.post_sol_sendDice.Input.Body
    ) async throws -> Operations.post_sol_sendDice.Output {
        try await post_sol_sendDice(Operations.post_sol_sendDice.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    public func post_sol_sendChatAction(
        headers: Operations.post_sol_sendChatAction.Input.Headers = .init(),
        body: Operations.post_sol_sendChatAction.Input.Body
    ) async throws -> Operations.post_sol_sendChatAction.Output {
        try await post_sol_sendChatAction(Operations.post_sol_sendChatAction.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    public func post_sol_getUserProfilePhotos(
        headers: Operations.post_sol_getUserProfilePhotos.Input.Headers = .init(),
        body: Operations.post_sol_getUserProfilePhotos.Input.Body
    ) async throws -> Operations.post_sol_getUserProfilePhotos.Output {
        try await post_sol_getUserProfilePhotos(Operations.post_sol_getUserProfilePhotos.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    public func post_sol_getFile(
        headers: Operations.post_sol_getFile.Input.Headers = .init(),
        body: Operations.post_sol_getFile.Input.Body
    ) async throws -> Operations.post_sol_getFile.Output {
        try await post_sol_getFile(Operations.post_sol_getFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    public func post_sol_kickChatMember(
        headers: Operations.post_sol_kickChatMember.Input.Headers = .init(),
        body: Operations.post_sol_kickChatMember.Input.Body
    ) async throws -> Operations.post_sol_kickChatMember.Output {
        try await post_sol_kickChatMember(Operations.post_sol_kickChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    public func post_sol_unbanChatMember(
        headers: Operations.post_sol_unbanChatMember.Input.Headers = .init(),
        body: Operations.post_sol_unbanChatMember.Input.Body
    ) async throws -> Operations.post_sol_unbanChatMember.Output {
        try await post_sol_unbanChatMember(Operations.post_sol_unbanChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    public func post_sol_restrictChatMember(
        headers: Operations.post_sol_restrictChatMember.Input.Headers = .init(),
        body: Operations.post_sol_restrictChatMember.Input.Body
    ) async throws -> Operations.post_sol_restrictChatMember.Output {
        try await post_sol_restrictChatMember(Operations.post_sol_restrictChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    public func post_sol_promoteChatMember(
        headers: Operations.post_sol_promoteChatMember.Input.Headers = .init(),
        body: Operations.post_sol_promoteChatMember.Input.Body
    ) async throws -> Operations.post_sol_promoteChatMember.Output {
        try await post_sol_promoteChatMember(Operations.post_sol_promoteChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    public func post_sol_setChatAdministratorCustomTitle(
        headers: Operations.post_sol_setChatAdministratorCustomTitle.Input.Headers = .init(),
        body: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body
    ) async throws -> Operations.post_sol_setChatAdministratorCustomTitle.Output {
        try await post_sol_setChatAdministratorCustomTitle(Operations.post_sol_setChatAdministratorCustomTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    public func post_sol_setChatPermissions(
        headers: Operations.post_sol_setChatPermissions.Input.Headers = .init(),
        body: Operations.post_sol_setChatPermissions.Input.Body
    ) async throws -> Operations.post_sol_setChatPermissions.Output {
        try await post_sol_setChatPermissions(Operations.post_sol_setChatPermissions.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    public func post_sol_exportChatInviteLink(
        headers: Operations.post_sol_exportChatInviteLink.Input.Headers = .init(),
        body: Operations.post_sol_exportChatInviteLink.Input.Body
    ) async throws -> Operations.post_sol_exportChatInviteLink.Output {
        try await post_sol_exportChatInviteLink(Operations.post_sol_exportChatInviteLink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    public func post_sol_setChatPhoto(
        headers: Operations.post_sol_setChatPhoto.Input.Headers = .init(),
        body: Operations.post_sol_setChatPhoto.Input.Body
    ) async throws -> Operations.post_sol_setChatPhoto.Output {
        try await post_sol_setChatPhoto(Operations.post_sol_setChatPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    public func post_sol_deleteChatPhoto(
        headers: Operations.post_sol_deleteChatPhoto.Input.Headers = .init(),
        body: Operations.post_sol_deleteChatPhoto.Input.Body
    ) async throws -> Operations.post_sol_deleteChatPhoto.Output {
        try await post_sol_deleteChatPhoto(Operations.post_sol_deleteChatPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    public func post_sol_setChatTitle(
        headers: Operations.post_sol_setChatTitle.Input.Headers = .init(),
        body: Operations.post_sol_setChatTitle.Input.Body
    ) async throws -> Operations.post_sol_setChatTitle.Output {
        try await post_sol_setChatTitle(Operations.post_sol_setChatTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    public func post_sol_setChatDescription(
        headers: Operations.post_sol_setChatDescription.Input.Headers = .init(),
        body: Operations.post_sol_setChatDescription.Input.Body
    ) async throws -> Operations.post_sol_setChatDescription.Output {
        try await post_sol_setChatDescription(Operations.post_sol_setChatDescription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    public func post_sol_pinChatMessage(
        headers: Operations.post_sol_pinChatMessage.Input.Headers = .init(),
        body: Operations.post_sol_pinChatMessage.Input.Body
    ) async throws -> Operations.post_sol_pinChatMessage.Output {
        try await post_sol_pinChatMessage(Operations.post_sol_pinChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    public func post_sol_unpinChatMessage(
        headers: Operations.post_sol_unpinChatMessage.Input.Headers = .init(),
        body: Operations.post_sol_unpinChatMessage.Input.Body
    ) async throws -> Operations.post_sol_unpinChatMessage.Output {
        try await post_sol_unpinChatMessage(Operations.post_sol_unpinChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    public func post_sol_unpinAllChatMessages(
        headers: Operations.post_sol_unpinAllChatMessages.Input.Headers = .init(),
        body: Operations.post_sol_unpinAllChatMessages.Input.Body
    ) async throws -> Operations.post_sol_unpinAllChatMessages.Output {
        try await post_sol_unpinAllChatMessages(Operations.post_sol_unpinAllChatMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    public func post_sol_leaveChat(
        headers: Operations.post_sol_leaveChat.Input.Headers = .init(),
        body: Operations.post_sol_leaveChat.Input.Body
    ) async throws -> Operations.post_sol_leaveChat.Output {
        try await post_sol_leaveChat(Operations.post_sol_leaveChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    public func post_sol_getChat(
        headers: Operations.post_sol_getChat.Input.Headers = .init(),
        body: Operations.post_sol_getChat.Input.Body
    ) async throws -> Operations.post_sol_getChat.Output {
        try await post_sol_getChat(Operations.post_sol_getChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    public func post_sol_getChatAdministrators(
        headers: Operations.post_sol_getChatAdministrators.Input.Headers = .init(),
        body: Operations.post_sol_getChatAdministrators.Input.Body
    ) async throws -> Operations.post_sol_getChatAdministrators.Output {
        try await post_sol_getChatAdministrators(Operations.post_sol_getChatAdministrators.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    public func post_sol_getChatMembersCount(
        headers: Operations.post_sol_getChatMembersCount.Input.Headers = .init(),
        body: Operations.post_sol_getChatMembersCount.Input.Body
    ) async throws -> Operations.post_sol_getChatMembersCount.Output {
        try await post_sol_getChatMembersCount(Operations.post_sol_getChatMembersCount.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    public func post_sol_getChatMember(
        headers: Operations.post_sol_getChatMember.Input.Headers = .init(),
        body: Operations.post_sol_getChatMember.Input.Body
    ) async throws -> Operations.post_sol_getChatMember.Output {
        try await post_sol_getChatMember(Operations.post_sol_getChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    public func post_sol_setChatStickerSet(
        headers: Operations.post_sol_setChatStickerSet.Input.Headers = .init(),
        body: Operations.post_sol_setChatStickerSet.Input.Body
    ) async throws -> Operations.post_sol_setChatStickerSet.Output {
        try await post_sol_setChatStickerSet(Operations.post_sol_setChatStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    public func post_sol_deleteChatStickerSet(
        headers: Operations.post_sol_deleteChatStickerSet.Input.Headers = .init(),
        body: Operations.post_sol_deleteChatStickerSet.Input.Body
    ) async throws -> Operations.post_sol_deleteChatStickerSet.Output {
        try await post_sol_deleteChatStickerSet(Operations.post_sol_deleteChatStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    public func post_sol_answerCallbackQuery(
        headers: Operations.post_sol_answerCallbackQuery.Input.Headers = .init(),
        body: Operations.post_sol_answerCallbackQuery.Input.Body
    ) async throws -> Operations.post_sol_answerCallbackQuery.Output {
        try await post_sol_answerCallbackQuery(Operations.post_sol_answerCallbackQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    public func post_sol_setMyCommands(
        headers: Operations.post_sol_setMyCommands.Input.Headers = .init(),
        body: Operations.post_sol_setMyCommands.Input.Body
    ) async throws -> Operations.post_sol_setMyCommands.Output {
        try await post_sol_setMyCommands(Operations.post_sol_setMyCommands.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    public func post_sol_getMyCommands(headers: Operations.post_sol_getMyCommands.Input.Headers = .init()) async throws -> Operations.post_sol_getMyCommands.Output {
        try await post_sol_getMyCommands(Operations.post_sol_getMyCommands.Input(headers: headers))
    }
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    public func post_sol_editMessageText(
        headers: Operations.post_sol_editMessageText.Input.Headers = .init(),
        body: Operations.post_sol_editMessageText.Input.Body
    ) async throws -> Operations.post_sol_editMessageText.Output {
        try await post_sol_editMessageText(Operations.post_sol_editMessageText.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    public func post_sol_editMessageCaption(
        headers: Operations.post_sol_editMessageCaption.Input.Headers = .init(),
        body: Operations.post_sol_editMessageCaption.Input.Body
    ) async throws -> Operations.post_sol_editMessageCaption.Output {
        try await post_sol_editMessageCaption(Operations.post_sol_editMessageCaption.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    public func post_sol_editMessageMedia(
        headers: Operations.post_sol_editMessageMedia.Input.Headers = .init(),
        body: Operations.post_sol_editMessageMedia.Input.Body
    ) async throws -> Operations.post_sol_editMessageMedia.Output {
        try await post_sol_editMessageMedia(Operations.post_sol_editMessageMedia.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    public func post_sol_editMessageReplyMarkup(
        headers: Operations.post_sol_editMessageReplyMarkup.Input.Headers = .init(),
        body: Operations.post_sol_editMessageReplyMarkup.Input.Body
    ) async throws -> Operations.post_sol_editMessageReplyMarkup.Output {
        try await post_sol_editMessageReplyMarkup(Operations.post_sol_editMessageReplyMarkup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    public func post_sol_stopPoll(
        headers: Operations.post_sol_stopPoll.Input.Headers = .init(),
        body: Operations.post_sol_stopPoll.Input.Body
    ) async throws -> Operations.post_sol_stopPoll.Output {
        try await post_sol_stopPoll(Operations.post_sol_stopPoll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    public func post_sol_deleteMessage(
        headers: Operations.post_sol_deleteMessage.Input.Headers = .init(),
        body: Operations.post_sol_deleteMessage.Input.Body
    ) async throws -> Operations.post_sol_deleteMessage.Output {
        try await post_sol_deleteMessage(Operations.post_sol_deleteMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    public func post_sol_sendSticker(
        headers: Operations.post_sol_sendSticker.Input.Headers = .init(),
        body: Operations.post_sol_sendSticker.Input.Body
    ) async throws -> Operations.post_sol_sendSticker.Output {
        try await post_sol_sendSticker(Operations.post_sol_sendSticker.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    public func post_sol_getStickerSet(
        headers: Operations.post_sol_getStickerSet.Input.Headers = .init(),
        body: Operations.post_sol_getStickerSet.Input.Body
    ) async throws -> Operations.post_sol_getStickerSet.Output {
        try await post_sol_getStickerSet(Operations.post_sol_getStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    public func post_sol_uploadStickerFile(
        headers: Operations.post_sol_uploadStickerFile.Input.Headers = .init(),
        body: Operations.post_sol_uploadStickerFile.Input.Body
    ) async throws -> Operations.post_sol_uploadStickerFile.Output {
        try await post_sol_uploadStickerFile(Operations.post_sol_uploadStickerFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    public func post_sol_createNewStickerSet(
        headers: Operations.post_sol_createNewStickerSet.Input.Headers = .init(),
        body: Operations.post_sol_createNewStickerSet.Input.Body
    ) async throws -> Operations.post_sol_createNewStickerSet.Output {
        try await post_sol_createNewStickerSet(Operations.post_sol_createNewStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    public func post_sol_addStickerToSet(
        headers: Operations.post_sol_addStickerToSet.Input.Headers = .init(),
        body: Operations.post_sol_addStickerToSet.Input.Body
    ) async throws -> Operations.post_sol_addStickerToSet.Output {
        try await post_sol_addStickerToSet(Operations.post_sol_addStickerToSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    public func post_sol_setStickerPositionInSet(
        headers: Operations.post_sol_setStickerPositionInSet.Input.Headers = .init(),
        body: Operations.post_sol_setStickerPositionInSet.Input.Body
    ) async throws -> Operations.post_sol_setStickerPositionInSet.Output {
        try await post_sol_setStickerPositionInSet(Operations.post_sol_setStickerPositionInSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    public func post_sol_deleteStickerFromSet(
        headers: Operations.post_sol_deleteStickerFromSet.Input.Headers = .init(),
        body: Operations.post_sol_deleteStickerFromSet.Input.Body
    ) async throws -> Operations.post_sol_deleteStickerFromSet.Output {
        try await post_sol_deleteStickerFromSet(Operations.post_sol_deleteStickerFromSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    public func post_sol_setStickerSetThumb(
        headers: Operations.post_sol_setStickerSetThumb.Input.Headers = .init(),
        body: Operations.post_sol_setStickerSetThumb.Input.Body
    ) async throws -> Operations.post_sol_setStickerSetThumb.Output {
        try await post_sol_setStickerSetThumb(Operations.post_sol_setStickerSetThumb.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    public func post_sol_answerInlineQuery(
        headers: Operations.post_sol_answerInlineQuery.Input.Headers = .init(),
        body: Operations.post_sol_answerInlineQuery.Input.Body
    ) async throws -> Operations.post_sol_answerInlineQuery.Output {
        try await post_sol_answerInlineQuery(Operations.post_sol_answerInlineQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    public func post_sol_sendInvoice(
        headers: Operations.post_sol_sendInvoice.Input.Headers = .init(),
        body: Operations.post_sol_sendInvoice.Input.Body
    ) async throws -> Operations.post_sol_sendInvoice.Output {
        try await post_sol_sendInvoice(Operations.post_sol_sendInvoice.Input(
            headers: headers,
            body: body
        ))
    }
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    public func post_sol_answerShippingQuery(
        headers: Operations.post_sol_answerShippingQuery.Input.Headers = .init(),
        body: Operations.post_sol_answerShippingQuery.Input.Body
    ) async throws -> Operations.post_sol_answerShippingQuery.Output {
        try await post_sol_answerShippingQuery(Operations.post_sol_answerShippingQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    public func post_sol_answerPreCheckoutQuery(
        headers: Operations.post_sol_answerPreCheckoutQuery.Input.Headers = .init(),
        body: Operations.post_sol_answerPreCheckoutQuery.Input.Body
    ) async throws -> Operations.post_sol_answerPreCheckoutQuery.Output {
        try await post_sol_answerPreCheckoutQuery(Operations.post_sol_answerPreCheckoutQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    public func post_sol_setPassportDataErrors(
        headers: Operations.post_sol_setPassportDataErrors.Input.Headers = .init(),
        body: Operations.post_sol_setPassportDataErrors.Input.Body
    ) async throws -> Operations.post_sol_setPassportDataErrors.Output {
        try await post_sol_setPassportDataErrors(Operations.post_sol_setPassportDataErrors.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    public func post_sol_sendGame(
        headers: Operations.post_sol_sendGame.Input.Headers = .init(),
        body: Operations.post_sol_sendGame.Input.Body
    ) async throws -> Operations.post_sol_sendGame.Output {
        try await post_sol_sendGame(Operations.post_sol_sendGame.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    public func post_sol_setGameScore(
        headers: Operations.post_sol_setGameScore.Input.Headers = .init(),
        body: Operations.post_sol_setGameScore.Input.Body
    ) async throws -> Operations.post_sol_setGameScore.Output {
        try await post_sol_setGameScore(Operations.post_sol_setGameScore.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    public func post_sol_getGameHighScores(
        headers: Operations.post_sol_getGameHighScores.Input.Headers = .init(),
        body: Operations.post_sol_getGameHighScores.Input.Body
    ) async throws -> Operations.post_sol_getGameHighScores.Output {
        try await post_sol_getGameHighScores(Operations.post_sol_getGameHighScores.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://botapi.giuseppem99.xyz/{type}{token}",
                variables: [
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1(
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://botapi.giuseppem99.xyz/{type}{token}",
            variables: [
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
    public enum Server2 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://telegram.rest/{type}{token}",
                variables: [
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2(
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://telegram.rest/{type}{token}",
            variables: [
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
    public enum Server3 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - base_url: Base url of the tdlight bot api server
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            base_url: Swift.String = "https://botapi.giuseppem99.xyz",
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "{base_url}/{type}{token}",
                variables: [
                    .init(
                        name: "base_url",
                        value: base_url
                    ),
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - base_url: Base url of the tdlight bot api server
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server3.url")
    public static func server3(
        base_url: Swift.String = "https://botapi.giuseppem99.xyz",
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "{base_url}/{type}{token}",
            variables: [
                .init(
                    name: "base_url",
                    value: base_url
                ),
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Error/error_code`.
            public var error_code: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Error/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Error/parameters`.
            public var parameters: Components.Schemas.ResponseParameters?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - error_code:
            ///   - description:
            ///   - parameters:
            public init(
                ok: Swift.Bool,
                error_code: Swift.Int,
                description: Swift.String,
                parameters: Components.Schemas.ResponseParameters? = nil
            ) {
                self.ok = ok
                self.error_code = error_code
                self.description = description
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case error_code
                case description
                case parameters
            }
        }
        /// This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.  
        /// At most **one** of the optional parameters can be present in any given update.
        ///
        /// - Remark: Generated from `#/components/schemas/Update`.
        public struct Update: Codable, Hashable, Sendable {
            /// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            ///
            /// - Remark: Generated from `#/components/schemas/Update/update_id`.
            public var update_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Update/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/edited_message`.
            public var edited_message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/channel_post`.
            public var channel_post: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/edited_channel_post`.
            public var edited_channel_post: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/inline_query`.
            public var inline_query: Components.Schemas.InlineQuery?
            /// - Remark: Generated from `#/components/schemas/Update/chosen_inline_result`.
            public var chosen_inline_result: Components.Schemas.ChosenInlineResult?
            /// - Remark: Generated from `#/components/schemas/Update/callback_query`.
            public var callback_query: Components.Schemas.CallbackQuery?
            /// - Remark: Generated from `#/components/schemas/Update/shipping_query`.
            public var shipping_query: Components.Schemas.ShippingQuery?
            /// - Remark: Generated from `#/components/schemas/Update/pre_checkout_query`.
            public var pre_checkout_query: Components.Schemas.PreCheckoutQuery?
            /// - Remark: Generated from `#/components/schemas/Update/poll`.
            public var poll: Components.Schemas.Poll?
            /// - Remark: Generated from `#/components/schemas/Update/poll_answer`.
            public var poll_answer: Components.Schemas.PollAnswer?
            /// Creates a new `Update`.
            ///
            /// - Parameters:
            ///   - update_id: The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            ///   - message:
            ///   - edited_message:
            ///   - channel_post:
            ///   - edited_channel_post:
            ///   - inline_query:
            ///   - chosen_inline_result:
            ///   - callback_query:
            ///   - shipping_query:
            ///   - pre_checkout_query:
            ///   - poll:
            ///   - poll_answer:
            public init(
                update_id: Swift.Int,
                message: Components.Schemas.Message? = nil,
                edited_message: Components.Schemas.Message? = nil,
                channel_post: Components.Schemas.Message? = nil,
                edited_channel_post: Components.Schemas.Message? = nil,
                inline_query: Components.Schemas.InlineQuery? = nil,
                chosen_inline_result: Components.Schemas.ChosenInlineResult? = nil,
                callback_query: Components.Schemas.CallbackQuery? = nil,
                shipping_query: Components.Schemas.ShippingQuery? = nil,
                pre_checkout_query: Components.Schemas.PreCheckoutQuery? = nil,
                poll: Components.Schemas.Poll? = nil,
                poll_answer: Components.Schemas.PollAnswer? = nil
            ) {
                self.update_id = update_id
                self.message = message
                self.edited_message = edited_message
                self.channel_post = channel_post
                self.edited_channel_post = edited_channel_post
                self.inline_query = inline_query
                self.chosen_inline_result = chosen_inline_result
                self.callback_query = callback_query
                self.shipping_query = shipping_query
                self.pre_checkout_query = pre_checkout_query
                self.poll = poll
                self.poll_answer = poll_answer
            }
            public enum CodingKeys: String, CodingKey {
                case update_id
                case message
                case edited_message
                case channel_post
                case edited_channel_post
                case inline_query
                case chosen_inline_result
                case callback_query
                case shipping_query
                case pre_checkout_query
                case poll
                case poll_answer
            }
        }
        /// Contains information about the current status of a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookInfo`.
        public struct WebhookInfo: Codable, Hashable, Sendable {
            /// Webhook URL, may be empty if webhook is not set up
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/url`.
            public var url: Swift.String
            /// True, if a custom certificate was provided for webhook certificate checks
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/has_custom_certificate`.
            public var has_custom_certificate: Swift.Bool
            /// Number of updates awaiting delivery
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/pending_update_count`.
            public var pending_update_count: Swift.Int
            /// *Optional*. Currently used webhook IP address
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/ip_address`.
            public var ip_address: Swift.String?
            /// *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/last_error_date`.
            public var last_error_date: Swift.Int?
            /// *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/last_error_message`.
            public var last_error_message: Swift.String?
            /// *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/max_connections`.
            public var max_connections: Swift.Int?
            /// *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/allowed_updates`.
            public var allowed_updates: [Swift.String]?
            /// Creates a new `WebhookInfo`.
            ///
            /// - Parameters:
            ///   - url: Webhook URL, may be empty if webhook is not set up
            ///   - has_custom_certificate: True, if a custom certificate was provided for webhook certificate checks
            ///   - pending_update_count: Number of updates awaiting delivery
            ///   - ip_address: *Optional*. Currently used webhook IP address
            ///   - last_error_date: *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
            ///   - last_error_message: *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
            ///   - max_connections: *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            ///   - allowed_updates: *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
            public init(
                url: Swift.String,
                has_custom_certificate: Swift.Bool,
                pending_update_count: Swift.Int,
                ip_address: Swift.String? = nil,
                last_error_date: Swift.Int? = nil,
                last_error_message: Swift.String? = nil,
                max_connections: Swift.Int? = nil,
                allowed_updates: [Swift.String]? = nil
            ) {
                self.url = url
                self.has_custom_certificate = has_custom_certificate
                self.pending_update_count = pending_update_count
                self.ip_address = ip_address
                self.last_error_date = last_error_date
                self.last_error_message = last_error_message
                self.max_connections = max_connections
                self.allowed_updates = allowed_updates
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case has_custom_certificate
                case pending_update_count
                case ip_address
                case last_error_date
                case last_error_message
                case max_connections
                case allowed_updates
            }
        }
        /// This object represents a Telegram user or bot.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// Unique identifier for this user or bot
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.Int
            /// True, if this user is a bot
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_bot`.
            public var is_bot: Swift.Bool
            /// User's or bot's first name
            ///
            /// - Remark: Generated from `#/components/schemas/User/first_name`.
            public var first_name: Swift.String
            /// *Optional*. User's or bot's last name
            ///
            /// - Remark: Generated from `#/components/schemas/User/last_name`.
            public var last_name: Swift.String?
            /// *Optional*. User's or bot's username
            ///
            /// - Remark: Generated from `#/components/schemas/User/username`.
            public var username: Swift.String?
            /// *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
            ///
            /// - Remark: Generated from `#/components/schemas/User/language_code`.
            public var language_code: Swift.String?
            /// *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/can_join_groups`.
            public var can_join_groups: Swift.Bool?
            /// *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/can_read_all_group_messages`.
            public var can_read_all_group_messages: Swift.Bool?
            /// *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/supports_inline_queries`.
            public var supports_inline_queries: Swift.Bool?
            /// *Optional*. Is the user verified by Telegram, clients show a verified batch.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_verified`.
            public var is_verified: Swift.Bool?
            /// *Optional*. Is the user reported for scam, clients show a warning to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_scam`.
            public var is_scam: Swift.Bool?
            /// *Optional*. Is the user marked as fake by Telegram.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_fake`.
            public var is_fake: Swift.Bool?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this user or bot
            ///   - is_bot: True, if this user is a bot
            ///   - first_name: User's or bot's first name
            ///   - last_name: *Optional*. User's or bot's last name
            ///   - username: *Optional*. User's or bot's username
            ///   - language_code: *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
            ///   - can_join_groups: *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - can_read_all_group_messages: *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - supports_inline_queries: *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - is_verified: *Optional*. Is the user verified by Telegram, clients show a verified batch.
            ///   - is_scam: *Optional*. Is the user reported for scam, clients show a warning to the user.
            ///   - is_fake: *Optional*. Is the user marked as fake by Telegram.
            public init(
                id: Swift.Int,
                is_bot: Swift.Bool,
                first_name: Swift.String,
                last_name: Swift.String? = nil,
                username: Swift.String? = nil,
                language_code: Swift.String? = nil,
                can_join_groups: Swift.Bool? = nil,
                can_read_all_group_messages: Swift.Bool? = nil,
                supports_inline_queries: Swift.Bool? = nil,
                is_verified: Swift.Bool? = nil,
                is_scam: Swift.Bool? = nil,
                is_fake: Swift.Bool? = nil
            ) {
                self.id = id
                self.is_bot = is_bot
                self.first_name = first_name
                self.last_name = last_name
                self.username = username
                self.language_code = language_code
                self.can_join_groups = can_join_groups
                self.can_read_all_group_messages = can_read_all_group_messages
                self.supports_inline_queries = supports_inline_queries
                self.is_verified = is_verified
                self.is_scam = is_scam
                self.is_fake = is_fake
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case is_bot
                case first_name
                case last_name
                case username
                case language_code
                case can_join_groups
                case can_read_all_group_messages
                case supports_inline_queries
                case is_verified
                case is_scam
                case is_fake
            }
        }
        /// This object represents a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/Chat`.
        public struct Chat: Codable, Hashable, Sendable {
            /// Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/id`.
            public var id: Swift.Int
            /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _private = "private"
                case group = "group"
                case supergroup = "supergroup"
                case channel = "channel"
            }
            /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/type`.
            public var _type: Components.Schemas.Chat._typePayload
            /// *Optional*. Title, for supergroups, channels and group chats
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/title`.
            public var title: Swift.String?
            /// *Optional*. Username, for private chats, supergroups and channels if available
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/username`.
            public var username: Swift.String?
            /// *Optional*. First name of the other party in a private chat
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/first_name`.
            public var first_name: Swift.String?
            /// *Optional*. Last name of the other party in a private chat
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/last_name`.
            public var last_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Chat/photo`.
            public var photo: Components.Schemas.ChatPhoto?
            /// *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/bio`.
            public var bio: Swift.String?
            /// *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/description`.
            public var description: Swift.String?
            /// *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/invite_link`.
            public var invite_link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Chat/pinned_message`.
            public var pinned_message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Chat/permissions`.
            public var permissions: Components.Schemas.ChatPermissions?
            /// *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/slow_mode_delay`.
            public var slow_mode_delay: Swift.Int?
            /// *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/sticker_set_name`.
            public var sticker_set_name: Swift.String?
            /// *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/can_set_sticker_set`.
            public var can_set_sticker_set: Swift.Bool?
            /// *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/linked_chat_id`.
            public var linked_chat_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Chat/location`.
            public var location: Components.Schemas.ChatLocation?
            /// *Optional*. Is the chat verified by Telegram, clients show a verified batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_verified`.
            public var is_verified: Swift.Bool?
            /// *Optional*. Is the chat reported for scam, clients show a warning to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_scam`.
            public var is_scam: Swift.Bool?
            /// *Optional*. Is the chat marked as fake by Telegram.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_fake`.
            public var is_fake: Swift.Bool?
            /// *Optional*. Distance to the chat location in meters. Returned only in `getChatsNearby`.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/distance`.
            public var distance: Swift.Int?
            /// Creates a new `Chat`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - _type: Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///   - title: *Optional*. Title, for supergroups, channels and group chats
            ///   - username: *Optional*. Username, for private chats, supergroups and channels if available
            ///   - first_name: *Optional*. First name of the other party in a private chat
            ///   - last_name: *Optional*. Last name of the other party in a private chat
            ///   - photo:
            ///   - bio: *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - description: *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - invite_link: *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - pinned_message:
            ///   - permissions:
            ///   - slow_mode_delay: *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - sticker_set_name: *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - can_set_sticker_set: *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - linked_chat_id: *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - location:
            ///   - is_verified: *Optional*. Is the chat verified by Telegram, clients show a verified batch.
            ///   - is_scam: *Optional*. Is the chat reported for scam, clients show a warning to the user.
            ///   - is_fake: *Optional*. Is the chat marked as fake by Telegram.
            ///   - distance: *Optional*. Distance to the chat location in meters. Returned only in `getChatsNearby`.
            public init(
                id: Swift.Int,
                _type: Components.Schemas.Chat._typePayload,
                title: Swift.String? = nil,
                username: Swift.String? = nil,
                first_name: Swift.String? = nil,
                last_name: Swift.String? = nil,
                photo: Components.Schemas.ChatPhoto? = nil,
                bio: Swift.String? = nil,
                description: Swift.String? = nil,
                invite_link: Swift.String? = nil,
                pinned_message: Components.Schemas.Message? = nil,
                permissions: Components.Schemas.ChatPermissions? = nil,
                slow_mode_delay: Swift.Int? = nil,
                sticker_set_name: Swift.String? = nil,
                can_set_sticker_set: Swift.Bool? = nil,
                linked_chat_id: Swift.Int? = nil,
                location: Components.Schemas.ChatLocation? = nil,
                is_verified: Swift.Bool? = nil,
                is_scam: Swift.Bool? = nil,
                is_fake: Swift.Bool? = nil,
                distance: Swift.Int? = nil
            ) {
                self.id = id
                self._type = _type
                self.title = title
                self.username = username
                self.first_name = first_name
                self.last_name = last_name
                self.photo = photo
                self.bio = bio
                self.description = description
                self.invite_link = invite_link
                self.pinned_message = pinned_message
                self.permissions = permissions
                self.slow_mode_delay = slow_mode_delay
                self.sticker_set_name = sticker_set_name
                self.can_set_sticker_set = can_set_sticker_set
                self.linked_chat_id = linked_chat_id
                self.location = location
                self.is_verified = is_verified
                self.is_scam = is_scam
                self.is_fake = is_fake
                self.distance = distance
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case title
                case username
                case first_name
                case last_name
                case photo
                case bio
                case description
                case invite_link
                case pinned_message
                case permissions
                case slow_mode_delay
                case sticker_set_name
                case can_set_sticker_set
                case linked_chat_id
                case location
                case is_verified
                case is_scam
                case is_fake
                case distance
            }
        }
        /// This object represents a message.
        ///
        /// - Remark: Generated from `#/components/schemas/Message`.
        public struct Message: Codable, Hashable, Sendable {
            /// Unique message identifier inside this chat
            ///
            /// - Remark: Generated from `#/components/schemas/Message/message_id`.
            public var message_id: Swift.Int {
                get  {
                    self.storage.value.message_id
                }
                _modify {
                    yield &self.storage.value.message_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/from`.
            public var from: Components.Schemas.User? {
                get  {
                    self.storage.value.from
                }
                _modify {
                    yield &self.storage.value.from
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/sender_chat`.
            public var sender_chat: Components.Schemas.Chat? {
                get  {
                    self.storage.value.sender_chat
                }
                _modify {
                    yield &self.storage.value.sender_chat
                }
            }
            /// Date the message was sent in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/date`.
            public var date: Swift.Int {
                get  {
                    self.storage.value.date
                }
                _modify {
                    yield &self.storage.value.date
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/chat`.
            public var chat: Components.Schemas.Chat {
                get  {
                    self.storage.value.chat
                }
                _modify {
                    yield &self.storage.value.chat
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/forward_from`.
            public var forward_from: Components.Schemas.User? {
                get  {
                    self.storage.value.forward_from
                }
                _modify {
                    yield &self.storage.value.forward_from
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/forward_from_chat`.
            public var forward_from_chat: Components.Schemas.Chat? {
                get  {
                    self.storage.value.forward_from_chat
                }
                _modify {
                    yield &self.storage.value.forward_from_chat
                }
            }
            /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_from_message_id`.
            public var forward_from_message_id: Swift.Int? {
                get  {
                    self.storage.value.forward_from_message_id
                }
                _modify {
                    yield &self.storage.value.forward_from_message_id
                }
            }
            /// *Optional*. For messages forwarded from channels, signature of the post author if present
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_signature`.
            public var forward_signature: Swift.String? {
                get  {
                    self.storage.value.forward_signature
                }
                _modify {
                    yield &self.storage.value.forward_signature
                }
            }
            /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_sender_name`.
            public var forward_sender_name: Swift.String? {
                get  {
                    self.storage.value.forward_sender_name
                }
                _modify {
                    yield &self.storage.value.forward_sender_name
                }
            }
            /// *Optional*. For forwarded messages, date the original message was sent in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_date`.
            public var forward_date: Swift.Int? {
                get  {
                    self.storage.value.forward_date
                }
                _modify {
                    yield &self.storage.value.forward_date
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/reply_to_message`.
            public var reply_to_message: Components.Schemas.Message? {
                get  {
                    self.storage.value.reply_to_message
                }
                _modify {
                    yield &self.storage.value.reply_to_message
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/via_bot`.
            public var via_bot: Components.Schemas.User? {
                get  {
                    self.storage.value.via_bot
                }
                _modify {
                    yield &self.storage.value.via_bot
                }
            }
            /// *Optional*. Date the message was last edited in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/edit_date`.
            public var edit_date: Swift.Int? {
                get  {
                    self.storage.value.edit_date
                }
                _modify {
                    yield &self.storage.value.edit_date
                }
            }
            /// *Optional*. The unique identifier of a media message group this message belongs to
            ///
            /// - Remark: Generated from `#/components/schemas/Message/media_group_id`.
            public var media_group_id: Swift.String? {
                get  {
                    self.storage.value.media_group_id
                }
                _modify {
                    yield &self.storage.value.media_group_id
                }
            }
            /// *Optional*. The unique identifier of a thread this message belongs to
            ///
            /// - Remark: Generated from `#/components/schemas/Message/message_thread_id`.
            public var message_thread_id: Swift.String? {
                get  {
                    self.storage.value.message_thread_id
                }
                _modify {
                    yield &self.storage.value.message_thread_id
                }
            }
            /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
            ///
            /// - Remark: Generated from `#/components/schemas/Message/author_signature`.
            public var author_signature: Swift.String? {
                get  {
                    self.storage.value.author_signature
                }
                _modify {
                    yield &self.storage.value.author_signature
                }
            }
            /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Message/text`.
            public var text: Swift.String? {
                get  {
                    self.storage.value.text
                }
                _modify {
                    yield &self.storage.value.text
                }
            }
            /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
            ///
            /// - Remark: Generated from `#/components/schemas/Message/entities`.
            public var entities: [Components.Schemas.MessageEntity]? {
                get  {
                    self.storage.value.entities
                }
                _modify {
                    yield &self.storage.value.entities
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/animation`.
            public var animation: Components.Schemas.Animation? {
                get  {
                    self.storage.value.animation
                }
                _modify {
                    yield &self.storage.value.animation
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/audio`.
            public var audio: Components.Schemas.Audio? {
                get  {
                    self.storage.value.audio
                }
                _modify {
                    yield &self.storage.value.audio
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/document`.
            public var document: Components.Schemas.Document? {
                get  {
                    self.storage.value.document
                }
                _modify {
                    yield &self.storage.value.document
                }
            }
            /// *Optional*. Message is a photo, available sizes of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/Message/photo`.
            public var photo: [Components.Schemas.PhotoSize]? {
                get  {
                    self.storage.value.photo
                }
                _modify {
                    yield &self.storage.value.photo
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/sticker`.
            public var sticker: Components.Schemas.Sticker? {
                get  {
                    self.storage.value.sticker
                }
                _modify {
                    yield &self.storage.value.sticker
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/video`.
            public var video: Components.Schemas.Video? {
                get  {
                    self.storage.value.video
                }
                _modify {
                    yield &self.storage.value.video
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/video_note`.
            public var video_note: Components.Schemas.VideoNote? {
                get  {
                    self.storage.value.video_note
                }
                _modify {
                    yield &self.storage.value.video_note
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/voice`.
            public var voice: Components.Schemas.Voice? {
                get  {
                    self.storage.value.voice
                }
                _modify {
                    yield &self.storage.value.voice
                }
            }
            /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Message/caption`.
            public var caption: Swift.String? {
                get  {
                    self.storage.value.caption
                }
                _modify {
                    yield &self.storage.value.caption
                }
            }
            /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
            ///
            /// - Remark: Generated from `#/components/schemas/Message/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]? {
                get  {
                    self.storage.value.caption_entities
                }
                _modify {
                    yield &self.storage.value.caption_entities
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/contact`.
            public var contact: Components.Schemas.Contact? {
                get  {
                    self.storage.value.contact
                }
                _modify {
                    yield &self.storage.value.contact
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/dice`.
            public var dice: Components.Schemas.Dice? {
                get  {
                    self.storage.value.dice
                }
                _modify {
                    yield &self.storage.value.dice
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/game`.
            public var game: Components.Schemas.Game? {
                get  {
                    self.storage.value.game
                }
                _modify {
                    yield &self.storage.value.game
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/poll`.
            public var poll: Components.Schemas.Poll? {
                get  {
                    self.storage.value.poll
                }
                _modify {
                    yield &self.storage.value.poll
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/venue`.
            public var venue: Components.Schemas.Venue? {
                get  {
                    self.storage.value.venue
                }
                _modify {
                    yield &self.storage.value.venue
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/location`.
            public var location: Components.Schemas.Location? {
                get  {
                    self.storage.value.location
                }
                _modify {
                    yield &self.storage.value.location
                }
            }
            /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_members`.
            public var new_chat_members: [Components.Schemas.User]? {
                get  {
                    self.storage.value.new_chat_members
                }
                _modify {
                    yield &self.storage.value.new_chat_members
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/left_chat_member`.
            public var left_chat_member: Components.Schemas.User? {
                get  {
                    self.storage.value.left_chat_member
                }
                _modify {
                    yield &self.storage.value.left_chat_member
                }
            }
            /// *Optional*. A chat title was changed to this value
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_title`.
            public var new_chat_title: Swift.String? {
                get  {
                    self.storage.value.new_chat_title
                }
                _modify {
                    yield &self.storage.value.new_chat_title
                }
            }
            /// *Optional*. A chat photo was change to this value
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_photo`.
            public var new_chat_photo: [Components.Schemas.PhotoSize]? {
                get  {
                    self.storage.value.new_chat_photo
                }
                _modify {
                    yield &self.storage.value.new_chat_photo
                }
            }
            /// *Optional*. Service message: the chat photo was deleted
            ///
            /// - Remark: Generated from `#/components/schemas/Message/delete_chat_photo`.
            public var delete_chat_photo: Swift.Bool? {
                get  {
                    self.storage.value.delete_chat_photo
                }
                _modify {
                    yield &self.storage.value.delete_chat_photo
                }
            }
            /// *Optional*. Service message: the group has been created
            ///
            /// - Remark: Generated from `#/components/schemas/Message/group_chat_created`.
            public var group_chat_created: Swift.Bool? {
                get  {
                    self.storage.value.group_chat_created
                }
                _modify {
                    yield &self.storage.value.group_chat_created
                }
            }
            /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/supergroup_chat_created`.
            public var supergroup_chat_created: Swift.Bool? {
                get  {
                    self.storage.value.supergroup_chat_created
                }
                _modify {
                    yield &self.storage.value.supergroup_chat_created
                }
            }
            /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/channel_chat_created`.
            public var channel_chat_created: Swift.Bool? {
                get  {
                    self.storage.value.channel_chat_created
                }
                _modify {
                    yield &self.storage.value.channel_chat_created
                }
            }
            /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/migrate_to_chat_id`.
            public var migrate_to_chat_id: Swift.Int? {
                get  {
                    self.storage.value.migrate_to_chat_id
                }
                _modify {
                    yield &self.storage.value.migrate_to_chat_id
                }
            }
            /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/migrate_from_chat_id`.
            public var migrate_from_chat_id: Swift.Int? {
                get  {
                    self.storage.value.migrate_from_chat_id
                }
                _modify {
                    yield &self.storage.value.migrate_from_chat_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/pinned_message`.
            public var pinned_message: Components.Schemas.Message? {
                get  {
                    self.storage.value.pinned_message
                }
                _modify {
                    yield &self.storage.value.pinned_message
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/invoice`.
            public var invoice: Components.Schemas.Invoice? {
                get  {
                    self.storage.value.invoice
                }
                _modify {
                    yield &self.storage.value.invoice
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/successful_payment`.
            public var successful_payment: Components.Schemas.SuccessfulPayment? {
                get  {
                    self.storage.value.successful_payment
                }
                _modify {
                    yield &self.storage.value.successful_payment
                }
            }
            /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
            ///
            /// - Remark: Generated from `#/components/schemas/Message/connected_website`.
            public var connected_website: Swift.String? {
                get  {
                    self.storage.value.connected_website
                }
                _modify {
                    yield &self.storage.value.connected_website
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/passport_data`.
            public var passport_data: Components.Schemas.PassportData? {
                get  {
                    self.storage.value.passport_data
                }
                _modify {
                    yield &self.storage.value.passport_data
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/proximity_alert_triggered`.
            public var proximity_alert_triggered: Components.Schemas.ProximityAlertTriggered? {
                get  {
                    self.storage.value.proximity_alert_triggered
                }
                _modify {
                    yield &self.storage.value.proximity_alert_triggered
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup? {
                get  {
                    self.storage.value.reply_markup
                }
                _modify {
                    yield &self.storage.value.reply_markup
                }
            }
            /// *Optional*. Amount of views. Only for channel messages.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/views`.
            public var views: Swift.Int? {
                get  {
                    self.storage.value.views
                }
                _modify {
                    yield &self.storage.value.views
                }
            }
            /// *Optional*. How many times the message has been forwarded
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forwards`.
            public var forwards: Swift.Int? {
                get  {
                    self.storage.value.forwards
                }
                _modify {
                    yield &self.storage.value.forwards
                }
            }
            /// *Optional*. Is the message scheduled.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/is_scheduled`.
            public var is_scheduled: Swift.Bool? {
                get  {
                    self.storage.value.is_scheduled
                }
                _modify {
                    yield &self.storage.value.is_scheduled
                }
            }
            /// *Optional*. Time the message will be sent.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/scheduled_at`.
            public var scheduled_at: OpenAPIRuntime.OpenAPIValueContainer? {
                get  {
                    self.storage.value.scheduled_at
                }
                _modify {
                    yield &self.storage.value.scheduled_at
                }
            }
            /// Creates a new `Message`.
            ///
            /// - Parameters:
            ///   - message_id: Unique message identifier inside this chat
            ///   - from:
            ///   - sender_chat:
            ///   - date: Date the message was sent in Unix time
            ///   - chat:
            ///   - forward_from:
            ///   - forward_from_chat:
            ///   - forward_from_message_id: *Optional*. For messages forwarded from channels, identifier of the original message in the channel
            ///   - forward_signature: *Optional*. For messages forwarded from channels, signature of the post author if present
            ///   - forward_sender_name: *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
            ///   - forward_date: *Optional*. For forwarded messages, date the original message was sent in Unix time
            ///   - reply_to_message:
            ///   - via_bot:
            ///   - edit_date: *Optional*. Date the message was last edited in Unix time
            ///   - media_group_id: *Optional*. The unique identifier of a media message group this message belongs to
            ///   - message_thread_id: *Optional*. The unique identifier of a thread this message belongs to
            ///   - author_signature: *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
            ///   - text: *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
            ///   - entities: *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
            ///   - animation:
            ///   - audio:
            ///   - document:
            ///   - photo: *Optional*. Message is a photo, available sizes of the photo
            ///   - sticker:
            ///   - video:
            ///   - video_note:
            ///   - voice:
            ///   - caption: *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            ///   - caption_entities: *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
            ///   - contact:
            ///   - dice:
            ///   - game:
            ///   - poll:
            ///   - venue:
            ///   - location:
            ///   - new_chat_members: *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
            ///   - left_chat_member:
            ///   - new_chat_title: *Optional*. A chat title was changed to this value
            ///   - new_chat_photo: *Optional*. A chat photo was change to this value
            ///   - delete_chat_photo: *Optional*. Service message: the chat photo was deleted
            ///   - group_chat_created: *Optional*. Service message: the group has been created
            ///   - supergroup_chat_created: *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
            ///   - channel_chat_created: *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
            ///   - migrate_to_chat_id: *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - migrate_from_chat_id: *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - pinned_message:
            ///   - invoice:
            ///   - successful_payment:
            ///   - connected_website: *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
            ///   - passport_data:
            ///   - proximity_alert_triggered:
            ///   - reply_markup:
            ///   - views: *Optional*. Amount of views. Only for channel messages.
            ///   - forwards: *Optional*. How many times the message has been forwarded
            ///   - is_scheduled: *Optional*. Is the message scheduled.
            ///   - scheduled_at: *Optional*. Time the message will be sent.
            public init(
                message_id: Swift.Int,
                from: Components.Schemas.User? = nil,
                sender_chat: Components.Schemas.Chat? = nil,
                date: Swift.Int,
                chat: Components.Schemas.Chat,
                forward_from: Components.Schemas.User? = nil,
                forward_from_chat: Components.Schemas.Chat? = nil,
                forward_from_message_id: Swift.Int? = nil,
                forward_signature: Swift.String? = nil,
                forward_sender_name: Swift.String? = nil,
                forward_date: Swift.Int? = nil,
                reply_to_message: Components.Schemas.Message? = nil,
                via_bot: Components.Schemas.User? = nil,
                edit_date: Swift.Int? = nil,
                media_group_id: Swift.String? = nil,
                message_thread_id: Swift.String? = nil,
                author_signature: Swift.String? = nil,
                text: Swift.String? = nil,
                entities: [Components.Schemas.MessageEntity]? = nil,
                animation: Components.Schemas.Animation? = nil,
                audio: Components.Schemas.Audio? = nil,
                document: Components.Schemas.Document? = nil,
                photo: [Components.Schemas.PhotoSize]? = nil,
                sticker: Components.Schemas.Sticker? = nil,
                video: Components.Schemas.Video? = nil,
                video_note: Components.Schemas.VideoNote? = nil,
                voice: Components.Schemas.Voice? = nil,
                caption: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                contact: Components.Schemas.Contact? = nil,
                dice: Components.Schemas.Dice? = nil,
                game: Components.Schemas.Game? = nil,
                poll: Components.Schemas.Poll? = nil,
                venue: Components.Schemas.Venue? = nil,
                location: Components.Schemas.Location? = nil,
                new_chat_members: [Components.Schemas.User]? = nil,
                left_chat_member: Components.Schemas.User? = nil,
                new_chat_title: Swift.String? = nil,
                new_chat_photo: [Components.Schemas.PhotoSize]? = nil,
                delete_chat_photo: Swift.Bool? = nil,
                group_chat_created: Swift.Bool? = nil,
                supergroup_chat_created: Swift.Bool? = nil,
                channel_chat_created: Swift.Bool? = nil,
                migrate_to_chat_id: Swift.Int? = nil,
                migrate_from_chat_id: Swift.Int? = nil,
                pinned_message: Components.Schemas.Message? = nil,
                invoice: Components.Schemas.Invoice? = nil,
                successful_payment: Components.Schemas.SuccessfulPayment? = nil,
                connected_website: Swift.String? = nil,
                passport_data: Components.Schemas.PassportData? = nil,
                proximity_alert_triggered: Components.Schemas.ProximityAlertTriggered? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                views: Swift.Int? = nil,
                forwards: Swift.Int? = nil,
                is_scheduled: Swift.Bool? = nil,
                scheduled_at: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.storage = .init(value: .init(
                    message_id: message_id,
                    from: from,
                    sender_chat: sender_chat,
                    date: date,
                    chat: chat,
                    forward_from: forward_from,
                    forward_from_chat: forward_from_chat,
                    forward_from_message_id: forward_from_message_id,
                    forward_signature: forward_signature,
                    forward_sender_name: forward_sender_name,
                    forward_date: forward_date,
                    reply_to_message: reply_to_message,
                    via_bot: via_bot,
                    edit_date: edit_date,
                    media_group_id: media_group_id,
                    message_thread_id: message_thread_id,
                    author_signature: author_signature,
                    text: text,
                    entities: entities,
                    animation: animation,
                    audio: audio,
                    document: document,
                    photo: photo,
                    sticker: sticker,
                    video: video,
                    video_note: video_note,
                    voice: voice,
                    caption: caption,
                    caption_entities: caption_entities,
                    contact: contact,
                    dice: dice,
                    game: game,
                    poll: poll,
                    venue: venue,
                    location: location,
                    new_chat_members: new_chat_members,
                    left_chat_member: left_chat_member,
                    new_chat_title: new_chat_title,
                    new_chat_photo: new_chat_photo,
                    delete_chat_photo: delete_chat_photo,
                    group_chat_created: group_chat_created,
                    supergroup_chat_created: supergroup_chat_created,
                    channel_chat_created: channel_chat_created,
                    migrate_to_chat_id: migrate_to_chat_id,
                    migrate_from_chat_id: migrate_from_chat_id,
                    pinned_message: pinned_message,
                    invoice: invoice,
                    successful_payment: successful_payment,
                    connected_website: connected_website,
                    passport_data: passport_data,
                    proximity_alert_triggered: proximity_alert_triggered,
                    reply_markup: reply_markup,
                    views: views,
                    forwards: forwards,
                    is_scheduled: is_scheduled,
                    scheduled_at: scheduled_at
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case message_id
                case from
                case sender_chat
                case date
                case chat
                case forward_from
                case forward_from_chat
                case forward_from_message_id
                case forward_signature
                case forward_sender_name
                case forward_date
                case reply_to_message
                case via_bot
                case edit_date
                case media_group_id
                case message_thread_id
                case author_signature
                case text
                case entities
                case animation
                case audio
                case document
                case photo
                case sticker
                case video
                case video_note
                case voice
                case caption
                case caption_entities
                case contact
                case dice
                case game
                case poll
                case venue
                case location
                case new_chat_members
                case left_chat_member
                case new_chat_title
                case new_chat_photo
                case delete_chat_photo
                case group_chat_created
                case supergroup_chat_created
                case channel_chat_created
                case migrate_to_chat_id
                case migrate_from_chat_id
                case pinned_message
                case invoice
                case successful_payment
                case connected_website
                case passport_data
                case proximity_alert_triggered
                case reply_markup
                case views
                case forwards
                case is_scheduled
                case scheduled_at
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// Unique message identifier inside this chat
                ///
                /// - Remark: Generated from `#/components/schemas/Message/message_id`.
                var message_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Message/from`.
                var from: Components.Schemas.User?
                /// - Remark: Generated from `#/components/schemas/Message/sender_chat`.
                var sender_chat: Components.Schemas.Chat?
                /// Date the message was sent in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/date`.
                var date: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Message/chat`.
                var chat: Components.Schemas.Chat
                /// - Remark: Generated from `#/components/schemas/Message/forward_from`.
                var forward_from: Components.Schemas.User?
                /// - Remark: Generated from `#/components/schemas/Message/forward_from_chat`.
                var forward_from_chat: Components.Schemas.Chat?
                /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_from_message_id`.
                var forward_from_message_id: Swift.Int?
                /// *Optional*. For messages forwarded from channels, signature of the post author if present
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_signature`.
                var forward_signature: Swift.String?
                /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_sender_name`.
                var forward_sender_name: Swift.String?
                /// *Optional*. For forwarded messages, date the original message was sent in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_date`.
                var forward_date: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/Message/reply_to_message`.
                var reply_to_message: Components.Schemas.Message?
                /// - Remark: Generated from `#/components/schemas/Message/via_bot`.
                var via_bot: Components.Schemas.User?
                /// *Optional*. Date the message was last edited in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/edit_date`.
                var edit_date: Swift.Int?
                /// *Optional*. The unique identifier of a media message group this message belongs to
                ///
                /// - Remark: Generated from `#/components/schemas/Message/media_group_id`.
                var media_group_id: Swift.String?
                /// *Optional*. The unique identifier of a thread this message belongs to
                ///
                /// - Remark: Generated from `#/components/schemas/Message/message_thread_id`.
                var message_thread_id: Swift.String?
                /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
                ///
                /// - Remark: Generated from `#/components/schemas/Message/author_signature`.
                var author_signature: Swift.String?
                /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
                ///
                /// - Remark: Generated from `#/components/schemas/Message/text`.
                var text: Swift.String?
                /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
                ///
                /// - Remark: Generated from `#/components/schemas/Message/entities`.
                var entities: [Components.Schemas.MessageEntity]?
                /// - Remark: Generated from `#/components/schemas/Message/animation`.
                var animation: Components.Schemas.Animation?
                /// - Remark: Generated from `#/components/schemas/Message/audio`.
                var audio: Components.Schemas.Audio?
                /// - Remark: Generated from `#/components/schemas/Message/document`.
                var document: Components.Schemas.Document?
                /// *Optional*. Message is a photo, available sizes of the photo
                ///
                /// - Remark: Generated from `#/components/schemas/Message/photo`.
                var photo: [Components.Schemas.PhotoSize]?
                /// - Remark: Generated from `#/components/schemas/Message/sticker`.
                var sticker: Components.Schemas.Sticker?
                /// - Remark: Generated from `#/components/schemas/Message/video`.
                var video: Components.Schemas.Video?
                /// - Remark: Generated from `#/components/schemas/Message/video_note`.
                var video_note: Components.Schemas.VideoNote?
                /// - Remark: Generated from `#/components/schemas/Message/voice`.
                var voice: Components.Schemas.Voice?
                /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
                ///
                /// - Remark: Generated from `#/components/schemas/Message/caption`.
                var caption: Swift.String?
                /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
                ///
                /// - Remark: Generated from `#/components/schemas/Message/caption_entities`.
                var caption_entities: [Components.Schemas.MessageEntity]?
                /// - Remark: Generated from `#/components/schemas/Message/contact`.
                var contact: Components.Schemas.Contact?
                /// - Remark: Generated from `#/components/schemas/Message/dice`.
                var dice: Components.Schemas.Dice?
                /// - Remark: Generated from `#/components/schemas/Message/game`.
                var game: Components.Schemas.Game?
                /// - Remark: Generated from `#/components/schemas/Message/poll`.
                var poll: Components.Schemas.Poll?
                /// - Remark: Generated from `#/components/schemas/Message/venue`.
                var venue: Components.Schemas.Venue?
                /// - Remark: Generated from `#/components/schemas/Message/location`.
                var location: Components.Schemas.Location?
                /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_members`.
                var new_chat_members: [Components.Schemas.User]?
                /// - Remark: Generated from `#/components/schemas/Message/left_chat_member`.
                var left_chat_member: Components.Schemas.User?
                /// *Optional*. A chat title was changed to this value
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_title`.
                var new_chat_title: Swift.String?
                /// *Optional*. A chat photo was change to this value
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_photo`.
                var new_chat_photo: [Components.Schemas.PhotoSize]?
                /// *Optional*. Service message: the chat photo was deleted
                ///
                /// - Remark: Generated from `#/components/schemas/Message/delete_chat_photo`.
                var delete_chat_photo: Swift.Bool?
                /// *Optional*. Service message: the group has been created
                ///
                /// - Remark: Generated from `#/components/schemas/Message/group_chat_created`.
                var group_chat_created: Swift.Bool?
                /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/supergroup_chat_created`.
                var supergroup_chat_created: Swift.Bool?
                /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/channel_chat_created`.
                var channel_chat_created: Swift.Bool?
                /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/migrate_to_chat_id`.
                var migrate_to_chat_id: Swift.Int?
                /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/migrate_from_chat_id`.
                var migrate_from_chat_id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/Message/pinned_message`.
                var pinned_message: Components.Schemas.Message?
                /// - Remark: Generated from `#/components/schemas/Message/invoice`.
                var invoice: Components.Schemas.Invoice?
                /// - Remark: Generated from `#/components/schemas/Message/successful_payment`.
                var successful_payment: Components.Schemas.SuccessfulPayment?
                /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
                ///
                /// - Remark: Generated from `#/components/schemas/Message/connected_website`.
                var connected_website: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Message/passport_data`.
                var passport_data: Components.Schemas.PassportData?
                /// - Remark: Generated from `#/components/schemas/Message/proximity_alert_triggered`.
                var proximity_alert_triggered: Components.Schemas.ProximityAlertTriggered?
                /// - Remark: Generated from `#/components/schemas/Message/reply_markup`.
                var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                /// *Optional*. Amount of views. Only for channel messages.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/views`.
                var views: Swift.Int?
                /// *Optional*. How many times the message has been forwarded
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forwards`.
                var forwards: Swift.Int?
                /// *Optional*. Is the message scheduled.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/is_scheduled`.
                var is_scheduled: Swift.Bool?
                /// *Optional*. Time the message will be sent.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/scheduled_at`.
                var scheduled_at: OpenAPIRuntime.OpenAPIValueContainer?
                init(
                    message_id: Swift.Int,
                    from: Components.Schemas.User? = nil,
                    sender_chat: Components.Schemas.Chat? = nil,
                    date: Swift.Int,
                    chat: Components.Schemas.Chat,
                    forward_from: Components.Schemas.User? = nil,
                    forward_from_chat: Components.Schemas.Chat? = nil,
                    forward_from_message_id: Swift.Int? = nil,
                    forward_signature: Swift.String? = nil,
                    forward_sender_name: Swift.String? = nil,
                    forward_date: Swift.Int? = nil,
                    reply_to_message: Components.Schemas.Message? = nil,
                    via_bot: Components.Schemas.User? = nil,
                    edit_date: Swift.Int? = nil,
                    media_group_id: Swift.String? = nil,
                    message_thread_id: Swift.String? = nil,
                    author_signature: Swift.String? = nil,
                    text: Swift.String? = nil,
                    entities: [Components.Schemas.MessageEntity]? = nil,
                    animation: Components.Schemas.Animation? = nil,
                    audio: Components.Schemas.Audio? = nil,
                    document: Components.Schemas.Document? = nil,
                    photo: [Components.Schemas.PhotoSize]? = nil,
                    sticker: Components.Schemas.Sticker? = nil,
                    video: Components.Schemas.Video? = nil,
                    video_note: Components.Schemas.VideoNote? = nil,
                    voice: Components.Schemas.Voice? = nil,
                    caption: Swift.String? = nil,
                    caption_entities: [Components.Schemas.MessageEntity]? = nil,
                    contact: Components.Schemas.Contact? = nil,
                    dice: Components.Schemas.Dice? = nil,
                    game: Components.Schemas.Game? = nil,
                    poll: Components.Schemas.Poll? = nil,
                    venue: Components.Schemas.Venue? = nil,
                    location: Components.Schemas.Location? = nil,
                    new_chat_members: [Components.Schemas.User]? = nil,
                    left_chat_member: Components.Schemas.User? = nil,
                    new_chat_title: Swift.String? = nil,
                    new_chat_photo: [Components.Schemas.PhotoSize]? = nil,
                    delete_chat_photo: Swift.Bool? = nil,
                    group_chat_created: Swift.Bool? = nil,
                    supergroup_chat_created: Swift.Bool? = nil,
                    channel_chat_created: Swift.Bool? = nil,
                    migrate_to_chat_id: Swift.Int? = nil,
                    migrate_from_chat_id: Swift.Int? = nil,
                    pinned_message: Components.Schemas.Message? = nil,
                    invoice: Components.Schemas.Invoice? = nil,
                    successful_payment: Components.Schemas.SuccessfulPayment? = nil,
                    connected_website: Swift.String? = nil,
                    passport_data: Components.Schemas.PassportData? = nil,
                    proximity_alert_triggered: Components.Schemas.ProximityAlertTriggered? = nil,
                    reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                    views: Swift.Int? = nil,
                    forwards: Swift.Int? = nil,
                    is_scheduled: Swift.Bool? = nil,
                    scheduled_at: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.message_id = message_id
                    self.from = from
                    self.sender_chat = sender_chat
                    self.date = date
                    self.chat = chat
                    self.forward_from = forward_from
                    self.forward_from_chat = forward_from_chat
                    self.forward_from_message_id = forward_from_message_id
                    self.forward_signature = forward_signature
                    self.forward_sender_name = forward_sender_name
                    self.forward_date = forward_date
                    self.reply_to_message = reply_to_message
                    self.via_bot = via_bot
                    self.edit_date = edit_date
                    self.media_group_id = media_group_id
                    self.message_thread_id = message_thread_id
                    self.author_signature = author_signature
                    self.text = text
                    self.entities = entities
                    self.animation = animation
                    self.audio = audio
                    self.document = document
                    self.photo = photo
                    self.sticker = sticker
                    self.video = video
                    self.video_note = video_note
                    self.voice = voice
                    self.caption = caption
                    self.caption_entities = caption_entities
                    self.contact = contact
                    self.dice = dice
                    self.game = game
                    self.poll = poll
                    self.venue = venue
                    self.location = location
                    self.new_chat_members = new_chat_members
                    self.left_chat_member = left_chat_member
                    self.new_chat_title = new_chat_title
                    self.new_chat_photo = new_chat_photo
                    self.delete_chat_photo = delete_chat_photo
                    self.group_chat_created = group_chat_created
                    self.supergroup_chat_created = supergroup_chat_created
                    self.channel_chat_created = channel_chat_created
                    self.migrate_to_chat_id = migrate_to_chat_id
                    self.migrate_from_chat_id = migrate_from_chat_id
                    self.pinned_message = pinned_message
                    self.invoice = invoice
                    self.successful_payment = successful_payment
                    self.connected_website = connected_website
                    self.passport_data = passport_data
                    self.proximity_alert_triggered = proximity_alert_triggered
                    self.reply_markup = reply_markup
                    self.views = views
                    self.forwards = forwards
                    self.is_scheduled = is_scheduled
                    self.scheduled_at = scheduled_at
                }
                typealias CodingKeys = Components.Schemas.Message.CodingKeys
            }
        }
        /// This object represents a unique message identifier.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageId`.
        public struct MessageId: Codable, Hashable, Sendable {
            /// Unique message identifier
            ///
            /// - Remark: Generated from `#/components/schemas/MessageId/message_id`.
            public var message_id: Swift.Int
            /// Creates a new `MessageId`.
            ///
            /// - Parameters:
            ///   - message_id: Unique message identifier
            public init(message_id: Swift.Int) {
                self.message_id = message_id
            }
            public enum CodingKeys: String, CodingKey {
                case message_id
            }
        }
        /// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageEntity`.
        public struct MessageEntity: Codable, Hashable, Sendable {
            /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mention = "mention"
                case hashtag = "hashtag"
                case cashtag = "cashtag"
                case bot_command = "bot_command"
                case url = "url"
                case email = "email"
                case phone_number = "phone_number"
                case bold = "bold"
                case italic = "italic"
                case underline = "underline"
                case strikethrough = "strikethrough"
                case code = "code"
                case pre = "pre"
                case text_link = "text_link"
                case text_mention = "text_mention"
            }
            /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/type`.
            public var _type: Components.Schemas.MessageEntity._typePayload
            /// Offset in UTF-16 code units to the start of the entity
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/offset`.
            public var offset: Swift.Int
            /// Length of the entity in UTF-16 code units
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/length`.
            public var length: Swift.Int
            /// *Optional*. For “text\_link” only, url that will be opened after user taps on the text
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageEntity/user`.
            public var user: Components.Schemas.User?
            /// *Optional*. For “pre” only, the programming language of the entity text
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/language`.
            public var language: Swift.String?
            /// Creates a new `MessageEntity`.
            ///
            /// - Parameters:
            ///   - _type: Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///   - offset: Offset in UTF-16 code units to the start of the entity
            ///   - length: Length of the entity in UTF-16 code units
            ///   - url: *Optional*. For “text\_link” only, url that will be opened after user taps on the text
            ///   - user:
            ///   - language: *Optional*. For “pre” only, the programming language of the entity text
            public init(
                _type: Components.Schemas.MessageEntity._typePayload,
                offset: Swift.Int,
                length: Swift.Int,
                url: Swift.String? = nil,
                user: Components.Schemas.User? = nil,
                language: Swift.String? = nil
            ) {
                self._type = _type
                self.offset = offset
                self.length = length
                self.url = url
                self.user = user
                self.language = language
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case offset
                case length
                case url
                case user
                case language
            }
        }
        /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
        ///
        /// - Remark: Generated from `#/components/schemas/PhotoSize`.
        public struct PhotoSize: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Photo width
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/width`.
            public var width: Swift.Int
            /// Photo height
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/height`.
            public var height: Swift.Int
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `PhotoSize`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Photo width
            ///   - height: Photo height
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.width = width
                self.height = height
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case width
                case height
                case file_size
            }
        }
        /// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
        ///
        /// - Remark: Generated from `#/components/schemas/Animation`.
        public struct Animation: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Video width as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/width`.
            public var width: Swift.Int
            /// Video height as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/height`.
            public var height: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Animation/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original animation filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_name`.
            public var file_name: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/mime_type`.
            public var mime_type: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `Animation`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Video width as defined by sender
            ///   - height: Video height as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - file_name: *Optional*. Original animation filename as defined by sender
            ///   - mime_type: *Optional*. MIME type of the file as defined by sender
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                file_name: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.width = width
                self.height = height
                self.duration = duration
                self.thumb = thumb
                self.file_name = file_name
                self.mime_type = mime_type
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case width
                case height
                case duration
                case thumb
                case file_name
                case mime_type
                case file_size
            }
        }
        /// This object represents an audio file to be treated as music by the Telegram clients.
        ///
        /// - Remark: Generated from `#/components/schemas/Audio`.
        public struct Audio: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Duration of the audio in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/duration`.
            public var duration: Swift.Int
            /// *Optional*. Performer of the audio as defined by sender or by audio tags
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Title of the audio as defined by sender or by audio tags
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/title`.
            public var title: Swift.String?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_name`.
            public var file_name: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/mime_type`.
            public var mime_type: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_size`.
            public var file_size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Audio/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// Creates a new `Audio`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - duration: Duration of the audio in seconds as defined by sender
            ///   - performer: *Optional*. Performer of the audio as defined by sender or by audio tags
            ///   - title: *Optional*. Title of the audio as defined by sender or by audio tags
            ///   - file_name: *Optional*. Original filename as defined by sender
            ///   - mime_type: *Optional*. MIME type of the file as defined by sender
            ///   - file_size: *Optional*. File size
            ///   - thumb:
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                duration: Swift.Int,
                performer: Swift.String? = nil,
                title: Swift.String? = nil,
                file_name: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                file_size: Swift.Int? = nil,
                thumb: Components.Schemas.PhotoSize? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.duration = duration
                self.performer = performer
                self.title = title
                self.file_name = file_name
                self.mime_type = mime_type
                self.file_size = file_size
                self.thumb = thumb
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case duration
                case performer
                case title
                case file_name
                case mime_type
                case file_size
                case thumb
            }
        }
        /// This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
        ///
        /// - Remark: Generated from `#/components/schemas/Document`.
        public struct Document: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_unique_id`.
            public var file_unique_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Document/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_name`.
            public var file_name: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Document/mime_type`.
            public var mime_type: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `Document`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - thumb:
            ///   - file_name: *Optional*. Original filename as defined by sender
            ///   - mime_type: *Optional*. MIME type of the file as defined by sender
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                thumb: Components.Schemas.PhotoSize? = nil,
                file_name: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.thumb = thumb
                self.file_name = file_name
                self.mime_type = mime_type
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case thumb
                case file_name
                case mime_type
                case file_size
            }
        }
        /// This object represents a video file.
        ///
        /// - Remark: Generated from `#/components/schemas/Video`.
        public struct Video: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Video width as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/width`.
            public var width: Swift.Int
            /// Video height as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/height`.
            public var height: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Video/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_name`.
            public var file_name: Swift.String?
            /// *Optional*. Mime type of a file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/mime_type`.
            public var mime_type: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `Video`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Video width as defined by sender
            ///   - height: Video height as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - file_name: *Optional*. Original filename as defined by sender
            ///   - mime_type: *Optional*. Mime type of a file as defined by sender
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                file_name: Swift.String? = nil,
                mime_type: Swift.String? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.width = width
                self.height = height
                self.duration = duration
                self.thumb = thumb
                self.file_name = file_name
                self.mime_type = mime_type
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case width
                case height
                case duration
                case thumb
                case file_name
                case mime_type
                case file_size
            }
        }
        /// This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
        ///
        /// - Remark: Generated from `#/components/schemas/VideoNote`.
        public struct VideoNote: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Video width and height (diameter of the video message) as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/length`.
            public var length: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/VideoNote/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `VideoNote`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - length: Video width and height (diameter of the video message) as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                length: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.length = length
                self.duration = duration
                self.thumb = thumb
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case length
                case duration
                case thumb
                case file_size
            }
        }
        /// This object represents a voice note.
        ///
        /// - Remark: Generated from `#/components/schemas/Voice`.
        public struct Voice: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Duration of the audio in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/duration`.
            public var duration: Swift.Int
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/mime_type`.
            public var mime_type: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `Voice`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - duration: Duration of the audio in seconds as defined by sender
            ///   - mime_type: *Optional*. MIME type of the file as defined by sender
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                duration: Swift.Int,
                mime_type: Swift.String? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.duration = duration
                self.mime_type = mime_type
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case duration
                case mime_type
                case file_size
            }
        }
        /// This object represents a phone contact.
        ///
        /// - Remark: Generated from `#/components/schemas/Contact`.
        public struct Contact: Codable, Hashable, Sendable {
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/phone_number`.
            public var phone_number: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/first_name`.
            public var first_name: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/last_name`.
            public var last_name: Swift.String?
            /// *Optional*. Contact's user identifier in Telegram
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/user_id`.
            public var user_id: Swift.Int?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/vcard`.
            public var vcard: Swift.String?
            /// Creates a new `Contact`.
            ///
            /// - Parameters:
            ///   - phone_number: Contact's phone number
            ///   - first_name: Contact's first name
            ///   - last_name: *Optional*. Contact's last name
            ///   - user_id: *Optional*. Contact's user identifier in Telegram
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
            public init(
                phone_number: Swift.String,
                first_name: Swift.String,
                last_name: Swift.String? = nil,
                user_id: Swift.Int? = nil,
                vcard: Swift.String? = nil
            ) {
                self.phone_number = phone_number
                self.first_name = first_name
                self.last_name = last_name
                self.user_id = user_id
                self.vcard = vcard
            }
            public enum CodingKeys: String, CodingKey {
                case phone_number
                case first_name
                case last_name
                case user_id
                case vcard
            }
        }
        /// This object represents an animated emoji that displays a random value.
        ///
        /// - Remark: Generated from `#/components/schemas/Dice`.
        public struct Dice: Codable, Hashable, Sendable {
            /// Emoji on which the dice throw animation is based
            ///
            /// - Remark: Generated from `#/components/schemas/Dice/emoji`.
            public var emoji: Swift.String
            /// Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
            ///
            /// - Remark: Generated from `#/components/schemas/Dice/value`.
            public var value: Swift.Int
            /// Creates a new `Dice`.
            ///
            /// - Parameters:
            ///   - emoji: Emoji on which the dice throw animation is based
            ///   - value: Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
            public init(
                emoji: Swift.String,
                value: Swift.Int
            ) {
                self.emoji = emoji
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case value
            }
        }
        /// This object contains information about one answer option in a poll.
        ///
        /// - Remark: Generated from `#/components/schemas/PollOption`.
        public struct PollOption: Codable, Hashable, Sendable {
            /// Option text, 1-100 characters
            ///
            /// - Remark: Generated from `#/components/schemas/PollOption/text`.
            public var text: Swift.String
            /// Number of users that voted for this option
            ///
            /// - Remark: Generated from `#/components/schemas/PollOption/voter_count`.
            public var voter_count: Swift.Int
            /// Creates a new `PollOption`.
            ///
            /// - Parameters:
            ///   - text: Option text, 1-100 characters
            ///   - voter_count: Number of users that voted for this option
            public init(
                text: Swift.String,
                voter_count: Swift.Int
            ) {
                self.text = text
                self.voter_count = voter_count
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case voter_count
            }
        }
        /// This object represents an answer of a user in a non-anonymous poll.
        ///
        /// - Remark: Generated from `#/components/schemas/PollAnswer`.
        public struct PollAnswer: Codable, Hashable, Sendable {
            /// Unique poll identifier
            ///
            /// - Remark: Generated from `#/components/schemas/PollAnswer/poll_id`.
            public var poll_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PollAnswer/user`.
            public var user: Components.Schemas.User
            /// 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            ///
            /// - Remark: Generated from `#/components/schemas/PollAnswer/option_ids`.
            public var option_ids: [Swift.Int]
            /// Creates a new `PollAnswer`.
            ///
            /// - Parameters:
            ///   - poll_id: Unique poll identifier
            ///   - user:
            ///   - option_ids: 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            public init(
                poll_id: Swift.String,
                user: Components.Schemas.User,
                option_ids: [Swift.Int]
            ) {
                self.poll_id = poll_id
                self.user = user
                self.option_ids = option_ids
            }
            public enum CodingKeys: String, CodingKey {
                case poll_id
                case user
                case option_ids
            }
        }
        /// This object contains information about a poll.
        ///
        /// - Remark: Generated from `#/components/schemas/Poll`.
        public struct Poll: Codable, Hashable, Sendable {
            /// Unique poll identifier
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/id`.
            public var id: Swift.String
            /// Poll question, 1-255 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/question`.
            public var question: Swift.String
            /// List of poll options
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/options`.
            public var options: [Components.Schemas.PollOption]
            /// Total number of users that voted in the poll
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/total_voter_count`.
            public var total_voter_count: Swift.Int
            /// True, if the poll is closed
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/is_closed`.
            public var is_closed: Swift.Bool
            /// True, if the poll is anonymous
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/is_anonymous`.
            public var is_anonymous: Swift.Bool
            /// Poll type, currently can be “regular” or “quiz”
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/type`.
            public var _type: Swift.String
            /// True, if the poll allows multiple answers
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/allows_multiple_answers`.
            public var allows_multiple_answers: Swift.Bool
            /// *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/correct_option_id`.
            public var correct_option_id: Swift.Int?
            /// *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/explanation`.
            public var explanation: Swift.String?
            /// *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/explanation_entities`.
            public var explanation_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Amount of time in seconds the poll will be active after creation
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/open_period`.
            public var open_period: Swift.Int?
            /// *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/close_date`.
            public var close_date: Swift.Int?
            /// Creates a new `Poll`.
            ///
            /// - Parameters:
            ///   - id: Unique poll identifier
            ///   - question: Poll question, 1-255 characters
            ///   - options: List of poll options
            ///   - total_voter_count: Total number of users that voted in the poll
            ///   - is_closed: True, if the poll is closed
            ///   - is_anonymous: True, if the poll is anonymous
            ///   - _type: Poll type, currently can be “regular” or “quiz”
            ///   - allows_multiple_answers: True, if the poll allows multiple answers
            ///   - correct_option_id: *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            ///   - explanation: *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
            ///   - explanation_entities: *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
            ///   - open_period: *Optional*. Amount of time in seconds the poll will be active after creation
            ///   - close_date: *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
            public init(
                id: Swift.String,
                question: Swift.String,
                options: [Components.Schemas.PollOption],
                total_voter_count: Swift.Int,
                is_closed: Swift.Bool,
                is_anonymous: Swift.Bool,
                _type: Swift.String,
                allows_multiple_answers: Swift.Bool,
                correct_option_id: Swift.Int? = nil,
                explanation: Swift.String? = nil,
                explanation_entities: [Components.Schemas.MessageEntity]? = nil,
                open_period: Swift.Int? = nil,
                close_date: Swift.Int? = nil
            ) {
                self.id = id
                self.question = question
                self.options = options
                self.total_voter_count = total_voter_count
                self.is_closed = is_closed
                self.is_anonymous = is_anonymous
                self._type = _type
                self.allows_multiple_answers = allows_multiple_answers
                self.correct_option_id = correct_option_id
                self.explanation = explanation
                self.explanation_entities = explanation_entities
                self.open_period = open_period
                self.close_date = close_date
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case question
                case options
                case total_voter_count
                case is_closed
                case is_anonymous
                case _type = "type"
                case allows_multiple_answers
                case correct_option_id
                case explanation
                case explanation_entities
                case open_period
                case close_date
            }
        }
        /// This object represents a point on the map.
        ///
        /// - Remark: Generated from `#/components/schemas/Location`.
        public struct Location: Codable, Hashable, Sendable {
            /// Longitude as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Location/longitude`.
            public var longitude: Swift.Double
            /// Latitude as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Location/latitude`.
            public var latitude: Swift.Double
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/Location/horizontal_accuracy`.
            public var horizontal_accuracy: Swift.Double?
            /// *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/live_period`.
            public var live_period: Swift.Int?
            /// *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/heading`.
            public var heading: Swift.Int?
            /// *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/proximity_alert_radius`.
            public var proximity_alert_radius: Swift.Int?
            /// Creates a new `Location`.
            ///
            /// - Parameters:
            ///   - longitude: Longitude as defined by sender
            ///   - latitude: Latitude as defined by sender
            ///   - horizontal_accuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - live_period: *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            ///   - heading: *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            ///   - proximity_alert_radius: *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            public init(
                longitude: Swift.Double,
                latitude: Swift.Double,
                horizontal_accuracy: Swift.Double? = nil,
                live_period: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximity_alert_radius: Swift.Int? = nil
            ) {
                self.longitude = longitude
                self.latitude = latitude
                self.horizontal_accuracy = horizontal_accuracy
                self.live_period = live_period
                self.heading = heading
                self.proximity_alert_radius = proximity_alert_radius
            }
            public enum CodingKeys: String, CodingKey {
                case longitude
                case latitude
                case horizontal_accuracy
                case live_period
                case heading
                case proximity_alert_radius
            }
        }
        /// This object represents a venue.
        ///
        /// - Remark: Generated from `#/components/schemas/Venue`.
        public struct Venue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Venue/location`.
            public var location: Components.Schemas.Location
            /// Name of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/foursquare_id`.
            public var foursquare_id: Swift.String?
            /// *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/foursquare_type`.
            public var foursquare_type: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/google_place_id`.
            public var google_place_id: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/google_place_type`.
            public var google_place_type: Swift.String?
            /// Creates a new `Venue`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - title: Name of the venue
            ///   - address: Address of the venue
            ///   - foursquare_id: *Optional*. Foursquare identifier of the venue
            ///   - foursquare_type: *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - google_place_id: *Optional*. Google Places identifier of the venue
            ///   - google_place_type: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            public init(
                location: Components.Schemas.Location,
                title: Swift.String,
                address: Swift.String,
                foursquare_id: Swift.String? = nil,
                foursquare_type: Swift.String? = nil,
                google_place_id: Swift.String? = nil,
                google_place_type: Swift.String? = nil
            ) {
                self.location = location
                self.title = title
                self.address = address
                self.foursquare_id = foursquare_id
                self.foursquare_type = foursquare_type
                self.google_place_id = google_place_id
                self.google_place_type = google_place_type
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case title
                case address
                case foursquare_id
                case foursquare_type
                case google_place_id
                case google_place_type
            }
        }
        /// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
        ///
        /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered`.
        public struct ProximityAlertTriggered: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/traveler`.
            public var traveler: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/watcher`.
            public var watcher: Components.Schemas.User
            /// The distance between the users
            ///
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/distance`.
            public var distance: Swift.Int
            /// Creates a new `ProximityAlertTriggered`.
            ///
            /// - Parameters:
            ///   - traveler:
            ///   - watcher:
            ///   - distance: The distance between the users
            public init(
                traveler: Components.Schemas.User,
                watcher: Components.Schemas.User,
                distance: Swift.Int
            ) {
                self.traveler = traveler
                self.watcher = watcher
                self.distance = distance
            }
            public enum CodingKeys: String, CodingKey {
                case traveler
                case watcher
                case distance
            }
        }
        /// This object represent a user's profile pictures.
        ///
        /// - Remark: Generated from `#/components/schemas/UserProfilePhotos`.
        public struct UserProfilePhotos: Codable, Hashable, Sendable {
            /// Total number of profile pictures the target user has
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfilePhotos/total_count`.
            public var total_count: Swift.Int
            /// Requested profile pictures (in up to 4 sizes each)
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfilePhotos/photos`.
            public var photos: [[Components.Schemas.PhotoSize]]
            /// Creates a new `UserProfilePhotos`.
            ///
            /// - Parameters:
            ///   - total_count: Total number of profile pictures the target user has
            ///   - photos: Requested profile pictures (in up to 4 sizes each)
            public init(
                total_count: Swift.Int,
                photos: [[Components.Schemas.PhotoSize]]
            ) {
                self.total_count = total_count
                self.photos = photos
            }
            public enum CodingKeys: String, CodingKey {
                case total_count
                case photos
            }
        }
        /// This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
        ///
        /// Maximum file size to download is 20 MB
        ///
        /// - Remark: Generated from `#/components/schemas/File`.
        public struct File: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_unique_id`.
            public var file_unique_id: Swift.String
            /// *Optional*. File size, if known
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_size`.
            public var file_size: Swift.Int?
            /// *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_path`.
            public var file_path: Swift.String?
            /// Creates a new `File`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - file_size: *Optional*. File size, if known
            ///   - file_path: *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                file_size: Swift.Int? = nil,
                file_path: Swift.String? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.file_size = file_size
                self.file_path = file_path
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case file_size
                case file_path
            }
        }
        /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
        ///
        /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup`.
        public struct ReplyKeyboardMarkup: Codable, Hashable, Sendable {
            /// Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/keyboard`.
            public var keyboard: [[Components.Schemas.KeyboardButton]]
            /// *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/resize_keyboard`.
            public var resize_keyboard: Swift.Bool?
            /// *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/one_time_keyboard`.
            public var one_time_keyboard: Swift.Bool?
            /// *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            ///
            /// *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ReplyKeyboardMarkup`.
            ///
            /// - Parameters:
            ///   - keyboard: Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
            ///   - resize_keyboard: *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            ///   - one_time_keyboard: *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
            ///   - selective: *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            public init(
                keyboard: [[Components.Schemas.KeyboardButton]],
                resize_keyboard: Swift.Bool? = nil,
                one_time_keyboard: Swift.Bool? = nil,
                selective: Swift.Bool? = nil
            ) {
                self.keyboard = keyboard
                self.resize_keyboard = resize_keyboard
                self.one_time_keyboard = one_time_keyboard
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case keyboard
                case resize_keyboard
                case one_time_keyboard
                case selective
            }
        }
        /// This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
        ///
        /// - Remark: Generated from `#/components/schemas/KeyboardButton`.
        public struct KeyboardButton: Codable, Hashable, Sendable {
            /// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/text`.
            public var text: Swift.String
            /// *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_contact`.
            public var request_contact: Swift.Bool?
            /// *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_location`.
            public var request_location: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_poll`.
            public var request_poll: Components.Schemas.KeyboardButtonPollType?
            /// Creates a new `KeyboardButton`.
            ///
            /// - Parameters:
            ///   - text: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
            ///   - request_contact: *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            ///   - request_location: *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
            ///   - request_poll:
            public init(
                text: Swift.String,
                request_contact: Swift.Bool? = nil,
                request_location: Swift.Bool? = nil,
                request_poll: Components.Schemas.KeyboardButtonPollType? = nil
            ) {
                self.text = text
                self.request_contact = request_contact
                self.request_location = request_location
                self.request_poll = request_poll
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case request_contact
                case request_location
                case request_poll
            }
        }
        /// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
        ///
        /// - Remark: Generated from `#/components/schemas/KeyboardButtonPollType`.
        public struct KeyboardButtonPollType: Codable, Hashable, Sendable {
            /// *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButtonPollType/type`.
            public var _type: Swift.String?
            /// Creates a new `KeyboardButtonPollType`.
            ///
            /// - Parameters:
            ///   - _type: *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            public init(_type: Swift.String? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
        ///
        /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove`.
        public struct ReplyKeyboardRemove: Codable, Hashable, Sendable {
            /// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove/remove_keyboard`.
            public var remove_keyboard: Swift.Bool
            /// *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            ///
            /// *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ReplyKeyboardRemove`.
            ///
            /// - Parameters:
            ///   - remove_keyboard: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
            ///   - selective: *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            public init(
                remove_keyboard: Swift.Bool,
                selective: Swift.Bool? = nil
            ) {
                self.remove_keyboard = remove_keyboard
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case remove_keyboard
                case selective
            }
        }
        /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineKeyboardMarkup`.
        public struct InlineKeyboardMarkup: Codable, Hashable, Sendable {
            /// Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardMarkup/inline_keyboard`.
            public var inline_keyboard: [[Components.Schemas.InlineKeyboardButton]]
            /// Creates a new `InlineKeyboardMarkup`.
            ///
            /// - Parameters:
            ///   - inline_keyboard: Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
            public init(inline_keyboard: [[Components.Schemas.InlineKeyboardButton]]) {
                self.inline_keyboard = inline_keyboard
            }
            public enum CodingKeys: String, CodingKey {
                case inline_keyboard
            }
        }
        /// This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton`.
        public struct InlineKeyboardButton: Codable, Hashable, Sendable {
            /// Label text on the button
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/text`.
            public var text: Swift.String
            /// *Optional*. HTTP or tg:// url to be opened when button is pressed
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/login_url`.
            public var login_url: Components.Schemas.LoginUrl?
            /// *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/callback_data`.
            public var callback_data: Swift.String?
            /// *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  
            ///
            /// **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/switch_inline_query`.
            public var switch_inline_query: Swift.String?
            /// *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  
            ///
            /// This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/switch_inline_query_current_chat`.
            public var switch_inline_query_current_chat: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/callback_game`.
            public var callback_game: Components.Schemas.CallbackGame?
            /// *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  
            ///
            /// **NOTE:** This type of button **must** always be the first button in the first row.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/pay`.
            public var pay: Swift.Bool?
            /// Creates a new `InlineKeyboardButton`.
            ///
            /// - Parameters:
            ///   - text: Label text on the button
            ///   - url: *Optional*. HTTP or tg:// url to be opened when button is pressed
            ///   - login_url:
            ///   - callback_data: *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
            ///   - switch_inline_query: *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  
            ///   - switch_inline_query_current_chat: *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  
            ///   - callback_game:
            ///   - pay: *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  
            public init(
                text: Swift.String,
                url: Swift.String? = nil,
                login_url: Components.Schemas.LoginUrl? = nil,
                callback_data: Swift.String? = nil,
                switch_inline_query: Swift.String? = nil,
                switch_inline_query_current_chat: Swift.String? = nil,
                callback_game: Components.Schemas.CallbackGame? = nil,
                pay: Swift.Bool? = nil
            ) {
                self.text = text
                self.url = url
                self.login_url = login_url
                self.callback_data = callback_data
                self.switch_inline_query = switch_inline_query
                self.switch_inline_query_current_chat = switch_inline_query_current_chat
                self.callback_game = callback_game
                self.pay = pay
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case url
                case login_url
                case callback_data
                case switch_inline_query
                case switch_inline_query_current_chat
                case callback_game
                case pay
            }
        }
        /// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
        ///
        /// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
        ///
        /// Sample bot: [@discussbot](https://t.me/discussbot)
        ///
        /// - Remark: Generated from `#/components/schemas/LoginUrl`.
        public struct LoginUrl: Codable, Hashable, Sendable {
            /// An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
            ///
            /// **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/url`.
            public var url: Swift.String
            /// *Optional*. New text of the button in forwarded messages.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/forward_text`.
            public var forward_text: Swift.String?
            /// *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/bot_username`.
            public var bot_username: Swift.String?
            /// *Optional*. Pass True to request the permission for your bot to send messages to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/request_write_access`.
            public var request_write_access: Swift.Bool?
            /// Creates a new `LoginUrl`.
            ///
            /// - Parameters:
            ///   - url: An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
            ///   - forward_text: *Optional*. New text of the button in forwarded messages.
            ///   - bot_username: *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
            ///   - request_write_access: *Optional*. Pass True to request the permission for your bot to send messages to the user.
            public init(
                url: Swift.String,
                forward_text: Swift.String? = nil,
                bot_username: Swift.String? = nil,
                request_write_access: Swift.Bool? = nil
            ) {
                self.url = url
                self.forward_text = forward_text
                self.bot_username = bot_username
                self.request_write_access = request_write_access
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case forward_text
                case bot_username
                case request_write_access
            }
        }
        /// This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackQuery`.
        public struct CallbackQuery: Codable, Hashable, Sendable {
            /// Unique identifier for this query
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/message`.
            public var message: Components.Schemas.Message?
            /// *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/inline_message_id`.
            public var inline_message_id: Swift.String?
            /// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/chat_instance`.
            public var chat_instance: Swift.String
            /// *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/data`.
            public var data: Swift.String?
            /// *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/game_short_name`.
            public var game_short_name: Swift.String?
            /// Creates a new `CallbackQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this query
            ///   - from:
            ///   - message:
            ///   - inline_message_id: *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
            ///   - chat_instance: Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
            ///   - data: *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
            ///   - game_short_name: *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                message: Components.Schemas.Message? = nil,
                inline_message_id: Swift.String? = nil,
                chat_instance: Swift.String,
                data: Swift.String? = nil,
                game_short_name: Swift.String? = nil
            ) {
                self.id = id
                self.from = from
                self.message = message
                self.inline_message_id = inline_message_id
                self.chat_instance = chat_instance
                self.data = data
                self.game_short_name = game_short_name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case message
                case inline_message_id
                case chat_instance
                case data
                case game_short_name
            }
        }
        /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
        ///
        /// - Remark: Generated from `#/components/schemas/ForceReply`.
        public struct ForceReply: Codable, Hashable, Sendable {
            /// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
            ///
            /// - Remark: Generated from `#/components/schemas/ForceReply/force_reply`.
            public var force_reply: Swift.Bool
            /// *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
            ///
            /// - Remark: Generated from `#/components/schemas/ForceReply/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ForceReply`.
            ///
            /// - Parameters:
            ///   - force_reply: Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
            ///   - selective: *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
            public init(
                force_reply: Swift.Bool,
                selective: Swift.Bool? = nil
            ) {
                self.force_reply = force_reply
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case force_reply
                case selective
            }
        }
        /// This object represents a chat photo.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatPhoto`.
        public struct ChatPhoto: Codable, Hashable, Sendable {
            /// File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/small_file_id`.
            public var small_file_id: Swift.String
            /// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/small_file_unique_id`.
            public var small_file_unique_id: Swift.String
            /// File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/big_file_id`.
            public var big_file_id: Swift.String
            /// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/big_file_unique_id`.
            public var big_file_unique_id: Swift.String
            /// Creates a new `ChatPhoto`.
            ///
            /// - Parameters:
            ///   - small_file_id: File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///   - small_file_unique_id: Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - big_file_id: File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///   - big_file_unique_id: Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            public init(
                small_file_id: Swift.String,
                small_file_unique_id: Swift.String,
                big_file_id: Swift.String,
                big_file_unique_id: Swift.String
            ) {
                self.small_file_id = small_file_id
                self.small_file_unique_id = small_file_unique_id
                self.big_file_id = big_file_id
                self.big_file_unique_id = big_file_unique_id
            }
            public enum CodingKeys: String, CodingKey {
                case small_file_id
                case small_file_unique_id
                case big_file_id
                case big_file_unique_id
            }
        }
        /// This object contains information about one member of a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatMember`.
        public struct ChatMember: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatMember/user`.
            public var user: Components.Schemas.User
            /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case creator = "creator"
                case administrator = "administrator"
                case member = "member"
                case restricted = "restricted"
                case left = "left"
                case kicked = "kicked"
            }
            /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/status`.
            public var status: Components.Schemas.ChatMember.statusPayload
            /// *Optional*. Owner and administrators only. Custom title for this user
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/custom_title`.
            public var custom_title: Swift.String?
            /// *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/is_anonymous`.
            public var is_anonymous: Swift.Bool?
            /// *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_be_edited`.
            public var can_be_edited: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_post_messages`.
            public var can_post_messages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_edit_messages`.
            public var can_edit_messages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can delete messages of other users
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_delete_messages`.
            public var can_delete_messages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_restrict_members`.
            public var can_restrict_members: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_promote_members`.
            public var can_promote_members: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_change_info`.
            public var can_change_info: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_invite_users`.
            public var can_invite_users: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_pin_messages`.
            public var can_pin_messages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/is_member`.
            public var is_member: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_messages`.
            public var can_send_messages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_media_messages`.
            public var can_send_media_messages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send polls
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_polls`.
            public var can_send_polls: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_other_messages`.
            public var can_send_other_messages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_add_web_page_previews`.
            public var can_add_web_page_previews: Swift.Bool?
            /// *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/until_date`.
            public var until_date: Swift.Int?
            /// *Optional*. Time when the user joined the group. unix time
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/joined_date`.
            public var joined_date: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ChatMember/inviter`.
            public var inviter: Components.Schemas.User?
            /// Creates a new `ChatMember`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - status: The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///   - custom_title: *Optional*. Owner and administrators only. Custom title for this user
            ///   - is_anonymous: *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
            ///   - can_be_edited: *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
            ///   - can_post_messages: *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
            ///   - can_edit_messages: *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
            ///   - can_delete_messages: *Optional*. Administrators only. True, if the administrator can delete messages of other users
            ///   - can_restrict_members: *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
            ///   - can_promote_members: *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
            ///   - can_change_info: *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
            ///   - can_invite_users: *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
            ///   - can_pin_messages: *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
            ///   - is_member: *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
            ///   - can_send_messages: *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
            ///   - can_send_media_messages: *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
            ///   - can_send_polls: *Optional*. Restricted only. True, if the user is allowed to send polls
            ///   - can_send_other_messages: *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
            ///   - can_add_web_page_previews: *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
            ///   - until_date: *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
            ///   - joined_date: *Optional*. Time when the user joined the group. unix time
            ///   - inviter:
            public init(
                user: Components.Schemas.User,
                status: Components.Schemas.ChatMember.statusPayload,
                custom_title: Swift.String? = nil,
                is_anonymous: Swift.Bool? = nil,
                can_be_edited: Swift.Bool? = nil,
                can_post_messages: Swift.Bool? = nil,
                can_edit_messages: Swift.Bool? = nil,
                can_delete_messages: Swift.Bool? = nil,
                can_restrict_members: Swift.Bool? = nil,
                can_promote_members: Swift.Bool? = nil,
                can_change_info: Swift.Bool? = nil,
                can_invite_users: Swift.Bool? = nil,
                can_pin_messages: Swift.Bool? = nil,
                is_member: Swift.Bool? = nil,
                can_send_messages: Swift.Bool? = nil,
                can_send_media_messages: Swift.Bool? = nil,
                can_send_polls: Swift.Bool? = nil,
                can_send_other_messages: Swift.Bool? = nil,
                can_add_web_page_previews: Swift.Bool? = nil,
                until_date: Swift.Int? = nil,
                joined_date: Swift.Int? = nil,
                inviter: Components.Schemas.User? = nil
            ) {
                self.user = user
                self.status = status
                self.custom_title = custom_title
                self.is_anonymous = is_anonymous
                self.can_be_edited = can_be_edited
                self.can_post_messages = can_post_messages
                self.can_edit_messages = can_edit_messages
                self.can_delete_messages = can_delete_messages
                self.can_restrict_members = can_restrict_members
                self.can_promote_members = can_promote_members
                self.can_change_info = can_change_info
                self.can_invite_users = can_invite_users
                self.can_pin_messages = can_pin_messages
                self.is_member = is_member
                self.can_send_messages = can_send_messages
                self.can_send_media_messages = can_send_media_messages
                self.can_send_polls = can_send_polls
                self.can_send_other_messages = can_send_other_messages
                self.can_add_web_page_previews = can_add_web_page_previews
                self.until_date = until_date
                self.joined_date = joined_date
                self.inviter = inviter
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case status
                case custom_title
                case is_anonymous
                case can_be_edited
                case can_post_messages
                case can_edit_messages
                case can_delete_messages
                case can_restrict_members
                case can_promote_members
                case can_change_info
                case can_invite_users
                case can_pin_messages
                case is_member
                case can_send_messages
                case can_send_media_messages
                case can_send_polls
                case can_send_other_messages
                case can_add_web_page_previews
                case until_date
                case joined_date
                case inviter
            }
        }
        /// Describes actions that a non-administrator user is allowed to take in a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatPermissions`.
        public struct ChatPermissions: Codable, Hashable, Sendable {
            /// *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_messages`.
            public var can_send_messages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_media_messages`.
            public var can_send_media_messages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_polls`.
            public var can_send_polls: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_other_messages`.
            public var can_send_other_messages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_add_web_page_previews`.
            public var can_add_web_page_previews: Swift.Bool?
            /// *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_change_info`.
            public var can_change_info: Swift.Bool?
            /// *Optional*. True, if the user is allowed to invite new users to the chat
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_invite_users`.
            public var can_invite_users: Swift.Bool?
            /// *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_pin_messages`.
            public var can_pin_messages: Swift.Bool?
            /// Creates a new `ChatPermissions`.
            ///
            /// - Parameters:
            ///   - can_send_messages: *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
            ///   - can_send_media_messages: *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
            ///   - can_send_polls: *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
            ///   - can_send_other_messages: *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
            ///   - can_add_web_page_previews: *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
            ///   - can_change_info: *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
            ///   - can_invite_users: *Optional*. True, if the user is allowed to invite new users to the chat
            ///   - can_pin_messages: *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
            public init(
                can_send_messages: Swift.Bool? = nil,
                can_send_media_messages: Swift.Bool? = nil,
                can_send_polls: Swift.Bool? = nil,
                can_send_other_messages: Swift.Bool? = nil,
                can_add_web_page_previews: Swift.Bool? = nil,
                can_change_info: Swift.Bool? = nil,
                can_invite_users: Swift.Bool? = nil,
                can_pin_messages: Swift.Bool? = nil
            ) {
                self.can_send_messages = can_send_messages
                self.can_send_media_messages = can_send_media_messages
                self.can_send_polls = can_send_polls
                self.can_send_other_messages = can_send_other_messages
                self.can_add_web_page_previews = can_add_web_page_previews
                self.can_change_info = can_change_info
                self.can_invite_users = can_invite_users
                self.can_pin_messages = can_pin_messages
            }
            public enum CodingKeys: String, CodingKey {
                case can_send_messages
                case can_send_media_messages
                case can_send_polls
                case can_send_other_messages
                case can_add_web_page_previews
                case can_change_info
                case can_invite_users
                case can_pin_messages
            }
        }
        /// Represents a location to which a chat is connected.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatLocation`.
        public struct ChatLocation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatLocation/location`.
            public var location: Components.Schemas.Location
            /// Location address; 1-64 characters, as defined by the chat owner
            ///
            /// - Remark: Generated from `#/components/schemas/ChatLocation/address`.
            public var address: Swift.String
            /// Creates a new `ChatLocation`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - address: Location address; 1-64 characters, as defined by the chat owner
            public init(
                location: Components.Schemas.Location,
                address: Swift.String
            ) {
                self.location = location
                self.address = address
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case address
            }
        }
        /// This object represents a bot command.
        ///
        /// - Remark: Generated from `#/components/schemas/BotCommand`.
        public struct BotCommand: Codable, Hashable, Sendable {
            /// Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            ///
            /// - Remark: Generated from `#/components/schemas/BotCommand/command`.
            public var command: Swift.String
            /// Description of the command, 3-256 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/BotCommand/description`.
            public var description: Swift.String
            /// Creates a new `BotCommand`.
            ///
            /// - Parameters:
            ///   - command: Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            ///   - description: Description of the command, 3-256 characters.
            public init(
                command: Swift.String,
                description: Swift.String
            ) {
                self.command = command
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case command
                case description
            }
        }
        /// Contains information about why a request was unsuccessful.
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseParameters`.
        public struct ResponseParameters: Codable, Hashable, Sendable {
            /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseParameters/migrate_to_chat_id`.
            public var migrate_to_chat_id: Swift.Int?
            /// *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseParameters/retry_after`.
            public var retry_after: Swift.Int?
            /// Creates a new `ResponseParameters`.
            ///
            /// - Parameters:
            ///   - migrate_to_chat_id: *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - retry_after: *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
            public init(
                migrate_to_chat_id: Swift.Int? = nil,
                retry_after: Swift.Int? = nil
            ) {
                self.migrate_to_chat_id = migrate_to_chat_id
                self.retry_after = retry_after
            }
            public enum CodingKeys: String, CodingKey {
                case migrate_to_chat_id
                case retry_after
            }
        }
        /// This object represents the content of a media message to be sent. It should be one of
        ///
        /// - Remark: Generated from `#/components/schemas/InputMedia`.
        public struct InputMedia: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputMedia/value1`.
            public var value1: Components.Schemas.InputMediaAnimation?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value2`.
            public var value2: Components.Schemas.InputMediaDocument?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value3`.
            public var value3: Components.Schemas.InputMediaAudio?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value4`.
            public var value4: Components.Schemas.InputMediaPhoto?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value5`.
            public var value5: Components.Schemas.InputMediaVideo?
            /// Creates a new `InputMedia`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            public init(
                value1: Components.Schemas.InputMediaAnimation? = nil,
                value2: Components.Schemas.InputMediaDocument? = nil,
                value3: Components.Schemas.InputMediaAudio? = nil,
                value4: Components.Schemas.InputMediaPhoto? = nil,
                value5: Components.Schemas.InputMediaVideo? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
            }
        }
        /// Represents a photo to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaPhoto`.
        public struct InputMediaPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/media`.
            public var media: Swift.String
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// Creates a new `InputMediaPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            public init(
                _type: Swift.String,
                media: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil
            ) {
                self._type = _type
                self.media = media
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case caption
                case parse_mode
                case caption_entities
            }
        }
        /// Represents a video to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaVideo`.
        public struct InputMediaVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb`.
            public struct thumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `thumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb`.
            public var thumb: Components.Schemas.InputMediaVideo.thumbPayload?
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/width`.
            public var width: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/height`.
            public var height: Swift.Int?
            /// *Optional*. Video duration
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/duration`.
            public var duration: Swift.Int?
            /// *Optional*. Pass *True*, if the uploaded video is suitable for streaming
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/supports_streaming`.
            public var supports_streaming: Swift.Bool?
            /// Creates a new `InputMediaVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - width: *Optional*. Video width
            ///   - height: *Optional*. Video height
            ///   - duration: *Optional*. Video duration
            ///   - supports_streaming: *Optional*. Pass *True*, if the uploaded video is suitable for streaming
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaVideo.thumbPayload? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                width: Swift.Int? = nil,
                height: Swift.Int? = nil,
                duration: Swift.Int? = nil,
                supports_streaming: Swift.Bool? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.width = width
                self.height = height
                self.duration = duration
                self.supports_streaming = supports_streaming
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parse_mode
                case caption_entities
                case width
                case height
                case duration
                case supports_streaming
            }
        }
        /// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaAnimation`.
        public struct InputMediaAnimation: Codable, Hashable, Sendable {
            /// Type of the result, must be *animation*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb`.
            public struct thumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `thumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb`.
            public var thumb: Components.Schemas.InputMediaAnimation.thumbPayload?
            /// *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Animation width
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/width`.
            public var width: Swift.Int?
            /// *Optional*. Animation height
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/height`.
            public var height: Swift.Int?
            /// *Optional*. Animation duration
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/duration`.
            public var duration: Swift.Int?
            /// Creates a new `InputMediaAnimation`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *animation*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - width: *Optional*. Animation width
            ///   - height: *Optional*. Animation height
            ///   - duration: *Optional*. Animation duration
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaAnimation.thumbPayload? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                width: Swift.Int? = nil,
                height: Swift.Int? = nil,
                duration: Swift.Int? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.width = width
                self.height = height
                self.duration = duration
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parse_mode
                case caption_entities
                case width
                case height
                case duration
            }
        }
        /// Represents an audio file to be treated as music to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaAudio`.
        public struct InputMediaAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb`.
            public struct thumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `thumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb`.
            public var thumb: Components.Schemas.InputMediaAudio.thumbPayload?
            /// *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Duration of the audio in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/duration`.
            public var duration: Swift.Int?
            /// *Optional*. Performer of the audio
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Title of the audio
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/title`.
            public var title: Swift.String?
            /// Creates a new `InputMediaAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - duration: *Optional*. Duration of the audio in seconds
            ///   - performer: *Optional*. Performer of the audio
            ///   - title: *Optional*. Title of the audio
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaAudio.thumbPayload? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                duration: Swift.Int? = nil,
                performer: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.duration = duration
                self.performer = performer
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parse_mode
                case caption_entities
                case duration
                case performer
                case title
            }
        }
        /// Represents a general file to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaDocument`.
        public struct InputMediaDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb`.
            public struct thumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `thumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb`.
            public var thumb: Components.Schemas.InputMediaDocument.thumbPayload?
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/disable_content_type_detection`.
            public var disable_content_type_detection: Swift.Bool?
            /// Creates a new `InputMediaDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - disable_content_type_detection: *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaDocument.thumbPayload? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                disable_content_type_detection: Swift.Bool? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.disable_content_type_detection = disable_content_type_detection
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parse_mode
                case caption_entities
                case disable_content_type_detection
            }
        }
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// - Remark: Generated from `#/components/schemas/InputFile`.
        public typealias InputFile = OpenAPIRuntime.OpenAPIValueContainer
        /// This object represents a sticker.
        ///
        /// - Remark: Generated from `#/components/schemas/Sticker`.
        public struct Sticker: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_unique_id`.
            public var file_unique_id: Swift.String
            /// Sticker width
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/width`.
            public var width: Swift.Int
            /// Sticker height
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/height`.
            public var height: Swift.Int
            /// *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/is_animated`.
            public var is_animated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Sticker/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Emoji associated with the sticker
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/emoji`.
            public var emoji: Swift.String?
            /// *Optional*. Name of the sticker set to which the sticker belongs
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/set_name`.
            public var set_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Sticker/mask_position`.
            public var mask_position: Components.Schemas.MaskPosition?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_size`.
            public var file_size: Swift.Int?
            /// Creates a new `Sticker`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Sticker width
            ///   - height: Sticker height
            ///   - is_animated: *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
            ///   - thumb:
            ///   - emoji: *Optional*. Emoji associated with the sticker
            ///   - set_name: *Optional*. Name of the sticker set to which the sticker belongs
            ///   - mask_position:
            ///   - file_size: *Optional*. File size
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                is_animated: Swift.Bool,
                thumb: Components.Schemas.PhotoSize? = nil,
                emoji: Swift.String? = nil,
                set_name: Swift.String? = nil,
                mask_position: Components.Schemas.MaskPosition? = nil,
                file_size: Swift.Int? = nil
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.width = width
                self.height = height
                self.is_animated = is_animated
                self.thumb = thumb
                self.emoji = emoji
                self.set_name = set_name
                self.mask_position = mask_position
                self.file_size = file_size
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case width
                case height
                case is_animated
                case thumb
                case emoji
                case set_name
                case mask_position
                case file_size
            }
        }
        /// This object represents a sticker set.
        ///
        /// - Remark: Generated from `#/components/schemas/StickerSet`.
        public struct StickerSet: Codable, Hashable, Sendable {
            /// Sticker set name
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/name`.
            public var name: Swift.String
            /// Sticker set title
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/title`.
            public var title: Swift.String
            /// *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/is_animated`.
            public var is_animated: Swift.Bool
            /// *True*, if the sticker set contains masks
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/contains_masks`.
            public var contains_masks: Swift.Bool
            /// List of all set stickers
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/stickers`.
            public var stickers: [Components.Schemas.Sticker]
            /// - Remark: Generated from `#/components/schemas/StickerSet/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// Creates a new `StickerSet`.
            ///
            /// - Parameters:
            ///   - name: Sticker set name
            ///   - title: Sticker set title
            ///   - is_animated: *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
            ///   - contains_masks: *True*, if the sticker set contains masks
            ///   - stickers: List of all set stickers
            ///   - thumb:
            public init(
                name: Swift.String,
                title: Swift.String,
                is_animated: Swift.Bool,
                contains_masks: Swift.Bool,
                stickers: [Components.Schemas.Sticker],
                thumb: Components.Schemas.PhotoSize? = nil
            ) {
                self.name = name
                self.title = title
                self.is_animated = is_animated
                self.contains_masks = contains_masks
                self.stickers = stickers
                self.thumb = thumb
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case title
                case is_animated
                case contains_masks
                case stickers
                case thumb
            }
        }
        /// This object describes the position on faces where a mask should be placed by default.
        ///
        /// - Remark: Generated from `#/components/schemas/MaskPosition`.
        public struct MaskPosition: Codable, Hashable, Sendable {
            /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/point`.
            @frozen public enum pointPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case forehead = "forehead"
                case eyes = "eyes"
                case mouth = "mouth"
                case chin = "chin"
            }
            /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/point`.
            public var point: Components.Schemas.MaskPosition.pointPayload
            /// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/x_shift`.
            public var x_shift: Swift.Double
            /// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/y_shift`.
            public var y_shift: Swift.Double
            /// Mask scaling coefficient. For example, 2.0 means double size.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/scale`.
            public var scale: Swift.Double
            /// Creates a new `MaskPosition`.
            ///
            /// - Parameters:
            ///   - point: The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///   - x_shift: Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
            ///   - y_shift: Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
            ///   - scale: Mask scaling coefficient. For example, 2.0 means double size.
            public init(
                point: Components.Schemas.MaskPosition.pointPayload,
                x_shift: Swift.Double,
                y_shift: Swift.Double,
                scale: Swift.Double
            ) {
                self.point = point
                self.x_shift = x_shift
                self.y_shift = y_shift
                self.scale = scale
            }
            public enum CodingKeys: String, CodingKey {
                case point
                case x_shift
                case y_shift
                case scale
            }
        }
        /// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQuery`.
        public struct InlineQuery: Codable, Hashable, Sendable {
            /// Unique identifier for this query
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQuery/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/InlineQuery/location`.
            public var location: Components.Schemas.Location?
            /// Text of the query (up to 256 characters)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/query`.
            public var query: Swift.String
            /// Offset of the results to be returned, can be controlled by the bot
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/offset`.
            public var offset: Swift.String
            /// Creates a new `InlineQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this query
            ///   - from:
            ///   - location:
            ///   - query: Text of the query (up to 256 characters)
            ///   - offset: Offset of the results to be returned, can be controlled by the bot
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                location: Components.Schemas.Location? = nil,
                query: Swift.String,
                offset: Swift.String
            ) {
                self.id = id
                self.from = from
                self.location = location
                self.query = query
                self.offset = offset
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case location
                case query
                case offset
            }
        }
        /// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResult`.
        public struct InlineQueryResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value1`.
            public var value1: Components.Schemas.InlineQueryResultCachedAudio?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value2`.
            public var value2: Components.Schemas.InlineQueryResultCachedDocument?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value3`.
            public var value3: Components.Schemas.InlineQueryResultCachedGif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value4`.
            public var value4: Components.Schemas.InlineQueryResultCachedMpeg4Gif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value5`.
            public var value5: Components.Schemas.InlineQueryResultCachedPhoto?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value6`.
            public var value6: Components.Schemas.InlineQueryResultCachedSticker?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value7`.
            public var value7: Components.Schemas.InlineQueryResultCachedVideo?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value8`.
            public var value8: Components.Schemas.InlineQueryResultCachedVoice?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value9`.
            public var value9: Components.Schemas.InlineQueryResultArticle?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value10`.
            public var value10: Components.Schemas.InlineQueryResultAudio?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value11`.
            public var value11: Components.Schemas.InlineQueryResultContact?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value12`.
            public var value12: Components.Schemas.InlineQueryResultGame?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value13`.
            public var value13: Components.Schemas.InlineQueryResultDocument?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value14`.
            public var value14: Components.Schemas.InlineQueryResultGif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value15`.
            public var value15: Components.Schemas.InlineQueryResultLocation?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value16`.
            public var value16: Components.Schemas.InlineQueryResultMpeg4Gif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value17`.
            public var value17: Components.Schemas.InlineQueryResultPhoto?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value18`.
            public var value18: Components.Schemas.InlineQueryResultVenue?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value19`.
            public var value19: Components.Schemas.InlineQueryResultVideo?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value20`.
            public var value20: Components.Schemas.InlineQueryResultVoice?
            /// Creates a new `InlineQueryResult`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            ///   - value16:
            ///   - value17:
            ///   - value18:
            ///   - value19:
            ///   - value20:
            public init(
                value1: Components.Schemas.InlineQueryResultCachedAudio? = nil,
                value2: Components.Schemas.InlineQueryResultCachedDocument? = nil,
                value3: Components.Schemas.InlineQueryResultCachedGif? = nil,
                value4: Components.Schemas.InlineQueryResultCachedMpeg4Gif? = nil,
                value5: Components.Schemas.InlineQueryResultCachedPhoto? = nil,
                value6: Components.Schemas.InlineQueryResultCachedSticker? = nil,
                value7: Components.Schemas.InlineQueryResultCachedVideo? = nil,
                value8: Components.Schemas.InlineQueryResultCachedVoice? = nil,
                value9: Components.Schemas.InlineQueryResultArticle? = nil,
                value10: Components.Schemas.InlineQueryResultAudio? = nil,
                value11: Components.Schemas.InlineQueryResultContact? = nil,
                value12: Components.Schemas.InlineQueryResultGame? = nil,
                value13: Components.Schemas.InlineQueryResultDocument? = nil,
                value14: Components.Schemas.InlineQueryResultGif? = nil,
                value15: Components.Schemas.InlineQueryResultLocation? = nil,
                value16: Components.Schemas.InlineQueryResultMpeg4Gif? = nil,
                value17: Components.Schemas.InlineQueryResultPhoto? = nil,
                value18: Components.Schemas.InlineQueryResultVenue? = nil,
                value19: Components.Schemas.InlineQueryResultVideo? = nil,
                value20: Components.Schemas.InlineQueryResultVoice? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
                self.value16 = value16
                self.value17 = value17
                self.value18 = value18
                self.value19 = value19
                self.value20 = value20
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value16 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value17 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value18 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value19 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value20 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9,
                        self.value10,
                        self.value11,
                        self.value12,
                        self.value13,
                        self.value14,
                        self.value15,
                        self.value16,
                        self.value17,
                        self.value18,
                        self.value19,
                        self.value20
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
                try self.value10?.encode(to: encoder)
                try self.value11?.encode(to: encoder)
                try self.value12?.encode(to: encoder)
                try self.value13?.encode(to: encoder)
                try self.value14?.encode(to: encoder)
                try self.value15?.encode(to: encoder)
                try self.value16?.encode(to: encoder)
                try self.value17?.encode(to: encoder)
                try self.value18?.encode(to: encoder)
                try self.value19?.encode(to: encoder)
                try self.value20?.encode(to: encoder)
            }
        }
        /// Represents a link to an article or web page.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle`.
        public struct InlineQueryResultArticle: Codable, Hashable, Sendable {
            /// Type of the result, must be *article*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/id`.
            public var id: Swift.String
            /// Title of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// *Optional*. URL of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/url`.
            public var url: Swift.String?
            /// *Optional*. Pass *True*, if you don't want the URL to be shown in the message
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/hide_url`.
            public var hide_url: Swift.Bool?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/description`.
            public var description: Swift.String?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_url`.
            public var thumb_url: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_width`.
            public var thumb_width: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_height`.
            public var thumb_height: Swift.Int?
            /// Creates a new `InlineQueryResultArticle`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *article*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - title: Title of the result
            ///   - input_message_content:
            ///   - reply_markup:
            ///   - url: *Optional*. URL of the result
            ///   - hide_url: *Optional*. Pass *True*, if you don't want the URL to be shown in the message
            ///   - description: *Optional*. Short description of the result
            ///   - thumb_url: *Optional*. Url of the thumbnail for the result
            ///   - thumb_width: *Optional*. Thumbnail width
            ///   - thumb_height: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                input_message_content: Components.Schemas.InputMessageContent,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                url: Swift.String? = nil,
                hide_url: Swift.Bool? = nil,
                description: Swift.String? = nil,
                thumb_url: Swift.String? = nil,
                thumb_width: Swift.Int? = nil,
                thumb_height: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.input_message_content = input_message_content
                self.reply_markup = reply_markup
                self.url = url
                self.hide_url = hide_url
                self.description = description
                self.thumb_url = thumb_url
                self.thumb_width = thumb_width
                self.thumb_height = thumb_height
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case input_message_content
                case reply_markup
                case url
                case hide_url
                case description
                case thumb_url
                case thumb_width
                case thumb_height
            }
        }
        /// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto`.
        public struct InlineQueryResultPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/id`.
            public var id: Swift.String
            /// A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_url`.
            public var photo_url: Swift.String
            /// URL of the thumbnail for the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/thumb_url`.
            public var thumb_url: Swift.String
            /// *Optional*. Width of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_width`.
            public var photo_width: Swift.Int?
            /// *Optional*. Height of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_height`.
            public var photo_height: Swift.Int?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/title`.
            public var title: Swift.String?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - photo_url: A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
            ///   - thumb_url: URL of the thumbnail for the photo
            ///   - photo_width: *Optional*. Width of the photo
            ///   - photo_height: *Optional*. Height of the photo
            ///   - title: *Optional*. Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                photo_url: Swift.String,
                thumb_url: Swift.String,
                photo_width: Swift.Int? = nil,
                photo_height: Swift.Int? = nil,
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.photo_url = photo_url
                self.thumb_url = thumb_url
                self.photo_width = photo_width
                self.photo_height = photo_height
                self.title = title
                self.description = description
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case photo_url
                case thumb_url
                case photo_width
                case photo_height
                case title
                case description
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif`.
        public struct InlineQueryResultGif: Codable, Hashable, Sendable {
            /// Type of the result, must be *gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/id`.
            public var id: Swift.String
            /// A valid URL for the GIF file. File size must not exceed 1MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_url`.
            public var gif_url: Swift.String
            /// *Optional*. Width of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_width`.
            public var gif_width: Swift.Int?
            /// *Optional*. Height of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_height`.
            public var gif_height: Swift.Int?
            /// *Optional*. Duration of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_duration`.
            public var gif_duration: Swift.Int?
            /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_url`.
            public var thumb_url: Swift.String
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_mime_type`.
            @frozen public enum thumb_mime_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case image_sol_jpeg = "image/jpeg"
                case image_sol_gif = "image/gif"
                case video_sol_mp4 = "video/mp4"
            }
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_mime_type`.
            public var thumb_mime_type: Components.Schemas.InlineQueryResultGif.thumb_mime_typePayload?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultGif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - gif_url: A valid URL for the GIF file. File size must not exceed 1MB
            ///   - gif_width: *Optional*. Width of the GIF
            ///   - gif_height: *Optional*. Height of the GIF
            ///   - gif_duration: *Optional*. Duration of the GIF
            ///   - thumb_url: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///   - thumb_mime_type: *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                gif_url: Swift.String,
                gif_width: Swift.Int? = nil,
                gif_height: Swift.Int? = nil,
                gif_duration: Swift.Int? = nil,
                thumb_url: Swift.String,
                thumb_mime_type: Components.Schemas.InlineQueryResultGif.thumb_mime_typePayload? = nil,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.gif_url = gif_url
                self.gif_width = gif_width
                self.gif_height = gif_height
                self.gif_duration = gif_duration
                self.thumb_url = thumb_url
                self.thumb_mime_type = thumb_mime_type
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case gif_url
                case gif_width
                case gif_height
                case gif_duration
                case thumb_url
                case thumb_mime_type
                case title
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif`.
        public struct InlineQueryResultMpeg4Gif: Codable, Hashable, Sendable {
            /// Type of the result, must be *mpeg4\_gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/id`.
            public var id: Swift.String
            /// A valid URL for the MP4 file. File size must not exceed 1MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_url`.
            public var mpeg4_url: Swift.String
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_width`.
            public var mpeg4_width: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_height`.
            public var mpeg4_height: Swift.Int?
            /// *Optional*. Video duration
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_duration`.
            public var mpeg4_duration: Swift.Int?
            /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_url`.
            public var thumb_url: Swift.String
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_mime_type`.
            @frozen public enum thumb_mime_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case image_sol_jpeg = "image/jpeg"
                case image_sol_gif = "image/gif"
                case video_sol_mp4 = "video/mp4"
            }
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_mime_type`.
            public var thumb_mime_type: Components.Schemas.InlineQueryResultMpeg4Gif.thumb_mime_typePayload?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultMpeg4Gif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *mpeg4\_gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - mpeg4_url: A valid URL for the MP4 file. File size must not exceed 1MB
            ///   - mpeg4_width: *Optional*. Video width
            ///   - mpeg4_height: *Optional*. Video height
            ///   - mpeg4_duration: *Optional*. Video duration
            ///   - thumb_url: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///   - thumb_mime_type: *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                mpeg4_url: Swift.String,
                mpeg4_width: Swift.Int? = nil,
                mpeg4_height: Swift.Int? = nil,
                mpeg4_duration: Swift.Int? = nil,
                thumb_url: Swift.String,
                thumb_mime_type: Components.Schemas.InlineQueryResultMpeg4Gif.thumb_mime_typePayload? = nil,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.mpeg4_url = mpeg4_url
                self.mpeg4_width = mpeg4_width
                self.mpeg4_height = mpeg4_height
                self.mpeg4_duration = mpeg4_duration
                self.thumb_url = thumb_url
                self.thumb_mime_type = thumb_mime_type
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case mpeg4_url
                case mpeg4_width
                case mpeg4_height
                case mpeg4_duration
                case thumb_url
                case thumb_mime_type
                case title
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
        ///
        /// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo`.
        public struct InlineQueryResultVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/id`.
            public var id: Swift.String
            /// A valid URL for the embedded video player or video file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_url`.
            public var video_url: Swift.String
            /// Mime type of the content of video url, “text/html” or “video/mp4”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/mime_type`.
            public var mime_type: Swift.String
            /// URL of the thumbnail (jpeg only) for the video
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/thumb_url`.
            public var thumb_url: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/title`.
            public var title: Swift.String
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_width`.
            public var video_width: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_height`.
            public var video_height: Swift.Int?
            /// *Optional*. Video duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_duration`.
            public var video_duration: Swift.Int?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - video_url: A valid URL for the embedded video player or video file
            ///   - mime_type: Mime type of the content of video url, “text/html” or “video/mp4”
            ///   - thumb_url: URL of the thumbnail (jpeg only) for the video
            ///   - title: Title for the result
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - video_width: *Optional*. Video width
            ///   - video_height: *Optional*. Video height
            ///   - video_duration: *Optional*. Video duration in seconds
            ///   - description: *Optional*. Short description of the result
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                video_url: Swift.String,
                mime_type: Swift.String,
                thumb_url: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                video_width: Swift.Int? = nil,
                video_height: Swift.Int? = nil,
                video_duration: Swift.Int? = nil,
                description: Swift.String? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.video_url = video_url
                self.mime_type = mime_type
                self.thumb_url = thumb_url
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.video_width = video_width
                self.video_height = video_height
                self.video_duration = video_duration
                self.description = description
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case video_url
                case mime_type
                case thumb_url
                case title
                case caption
                case parse_mode
                case caption_entities
                case video_width
                case video_height
                case video_duration
                case description
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio`.
        public struct InlineQueryResultAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/id`.
            public var id: Swift.String
            /// A valid URL for the audio file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/audio_url`.
            public var audio_url: Swift.String
            /// Title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Performer
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Audio duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/audio_duration`.
            public var audio_duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - audio_url: A valid URL for the audio file
            ///   - title: Title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - performer: *Optional*. Performer
            ///   - audio_duration: *Optional*. Audio duration in seconds
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                audio_url: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                performer: Swift.String? = nil,
                audio_duration: Swift.Int? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.audio_url = audio_url
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.performer = performer
                self.audio_duration = audio_duration
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case audio_url
                case title
                case caption
                case parse_mode
                case caption_entities
                case performer
                case audio_duration
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice`.
        public struct InlineQueryResultVoice: Codable, Hashable, Sendable {
            /// Type of the result, must be *voice*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/id`.
            public var id: Swift.String
            /// A valid URL for the voice recording
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/voice_url`.
            public var voice_url: Swift.String
            /// Recording title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Recording duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/voice_duration`.
            public var voice_duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultVoice`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *voice*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - voice_url: A valid URL for the voice recording
            ///   - title: Recording title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - voice_duration: *Optional*. Recording duration in seconds
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                voice_url: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                voice_duration: Swift.Int? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.voice_url = voice_url
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.voice_duration = voice_duration
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case voice_url
                case title
                case caption
                case parse_mode
                case caption_entities
                case voice_duration
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument`.
        public struct InlineQueryResultDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/id`.
            public var id: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/title`.
            public var title: Swift.String
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// A valid URL for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/document_url`.
            public var document_url: Swift.String
            /// Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/mime_type`.
            @frozen public enum mime_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case application_sol_pdf = "application/pdf"
                case application_sol_zip = "application/zip"
            }
            /// Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/mime_type`.
            public var mime_type: Components.Schemas.InlineQueryResultDocument.mime_typePayload
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// *Optional*. URL of the thumbnail (jpeg only) for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_url`.
            public var thumb_url: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_width`.
            public var thumb_width: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_height`.
            public var thumb_height: Swift.Int?
            /// Creates a new `InlineQueryResultDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - title: Title for the result
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - document_url: A valid URL for the file
            ///   - mime_type: Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///   - description: *Optional*. Short description of the result
            ///   - reply_markup:
            ///   - input_message_content:
            ///   - thumb_url: *Optional*. URL of the thumbnail (jpeg only) for the file
            ///   - thumb_width: *Optional*. Thumbnail width
            ///   - thumb_height: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                document_url: Swift.String,
                mime_type: Components.Schemas.InlineQueryResultDocument.mime_typePayload,
                description: Swift.String? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil,
                thumb_url: Swift.String? = nil,
                thumb_width: Swift.Int? = nil,
                thumb_height: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.document_url = document_url
                self.mime_type = mime_type
                self.description = description
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
                self.thumb_url = thumb_url
                self.thumb_width = thumb_width
                self.thumb_height = thumb_height
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case caption
                case parse_mode
                case caption_entities
                case document_url
                case mime_type
                case description
                case reply_markup
                case input_message_content
                case thumb_url
                case thumb_width
                case thumb_height
            }
        }
        /// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation`.
        public struct InlineQueryResultLocation: Codable, Hashable, Sendable {
            /// Type of the result, must be *location*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/id`.
            public var id: Swift.String
            /// Location latitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/latitude`.
            public var latitude: Swift.Double
            /// Location longitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/longitude`.
            public var longitude: Swift.Double
            /// Location title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/title`.
            public var title: Swift.String
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/horizontal_accuracy`.
            public var horizontal_accuracy: Swift.Double?
            /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/live_period`.
            public var live_period: Swift.Int?
            /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/heading`.
            public var heading: Swift.Int?
            /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/proximity_alert_radius`.
            public var proximity_alert_radius: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_url`.
            public var thumb_url: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_width`.
            public var thumb_width: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_height`.
            public var thumb_height: Swift.Int?
            /// Creates a new `InlineQueryResultLocation`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *location*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - latitude: Location latitude in degrees
            ///   - longitude: Location longitude in degrees
            ///   - title: Location title
            ///   - horizontal_accuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - live_period: *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///   - heading: *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///   - proximity_alert_radius: *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///   - reply_markup:
            ///   - input_message_content:
            ///   - thumb_url: *Optional*. Url of the thumbnail for the result
            ///   - thumb_width: *Optional*. Thumbnail width
            ///   - thumb_height: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                horizontal_accuracy: Swift.Double? = nil,
                live_period: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximity_alert_radius: Swift.Int? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil,
                thumb_url: Swift.String? = nil,
                thumb_width: Swift.Int? = nil,
                thumb_height: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.horizontal_accuracy = horizontal_accuracy
                self.live_period = live_period
                self.heading = heading
                self.proximity_alert_radius = proximity_alert_radius
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
                self.thumb_url = thumb_url
                self.thumb_width = thumb_width
                self.thumb_height = thumb_height
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case latitude
                case longitude
                case title
                case horizontal_accuracy
                case live_period
                case heading
                case proximity_alert_radius
                case reply_markup
                case input_message_content
                case thumb_url
                case thumb_width
                case thumb_height
            }
        }
        /// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue`.
        public struct InlineQueryResultVenue: Codable, Hashable, Sendable {
            /// Type of the result, must be *venue*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/id`.
            public var id: Swift.String
            /// Latitude of the venue location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the venue location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/longitude`.
            public var longitude: Swift.Double
            /// Title of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue if known
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/foursquare_id`.
            public var foursquare_id: Swift.String?
            /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/foursquare_type`.
            public var foursquare_type: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/google_place_id`.
            public var google_place_id: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/google_place_type`.
            public var google_place_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_url`.
            public var thumb_url: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_width`.
            public var thumb_width: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_height`.
            public var thumb_height: Swift.Int?
            /// Creates a new `InlineQueryResultVenue`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *venue*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - latitude: Latitude of the venue location in degrees
            ///   - longitude: Longitude of the venue location in degrees
            ///   - title: Title of the venue
            ///   - address: Address of the venue
            ///   - foursquare_id: *Optional*. Foursquare identifier of the venue if known
            ///   - foursquare_type: *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - google_place_id: *Optional*. Google Places identifier of the venue
            ///   - google_place_type: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///   - reply_markup:
            ///   - input_message_content:
            ///   - thumb_url: *Optional*. Url of the thumbnail for the result
            ///   - thumb_width: *Optional*. Thumbnail width
            ///   - thumb_height: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                address: Swift.String,
                foursquare_id: Swift.String? = nil,
                foursquare_type: Swift.String? = nil,
                google_place_id: Swift.String? = nil,
                google_place_type: Swift.String? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil,
                thumb_url: Swift.String? = nil,
                thumb_width: Swift.Int? = nil,
                thumb_height: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.address = address
                self.foursquare_id = foursquare_id
                self.foursquare_type = foursquare_type
                self.google_place_id = google_place_id
                self.google_place_type = google_place_type
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
                self.thumb_url = thumb_url
                self.thumb_width = thumb_width
                self.thumb_height = thumb_height
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case latitude
                case longitude
                case title
                case address
                case foursquare_id
                case foursquare_type
                case google_place_id
                case google_place_type
                case reply_markup
                case input_message_content
                case thumb_url
                case thumb_width
                case thumb_height
            }
        }
        /// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact`.
        public struct InlineQueryResultContact: Codable, Hashable, Sendable {
            /// Type of the result, must be *contact*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/id`.
            public var id: Swift.String
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/phone_number`.
            public var phone_number: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/first_name`.
            public var first_name: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/last_name`.
            public var last_name: Swift.String?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/vcard`.
            public var vcard: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_url`.
            public var thumb_url: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_width`.
            public var thumb_width: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_height`.
            public var thumb_height: Swift.Int?
            /// Creates a new `InlineQueryResultContact`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *contact*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - phone_number: Contact's phone number
            ///   - first_name: Contact's first name
            ///   - last_name: *Optional*. Contact's last name
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///   - reply_markup:
            ///   - input_message_content:
            ///   - thumb_url: *Optional*. Url of the thumbnail for the result
            ///   - thumb_width: *Optional*. Thumbnail width
            ///   - thumb_height: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                phone_number: Swift.String,
                first_name: Swift.String,
                last_name: Swift.String? = nil,
                vcard: Swift.String? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil,
                thumb_url: Swift.String? = nil,
                thumb_width: Swift.Int? = nil,
                thumb_height: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.phone_number = phone_number
                self.first_name = first_name
                self.last_name = last_name
                self.vcard = vcard
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
                self.thumb_url = thumb_url
                self.thumb_width = thumb_width
                self.thumb_height = thumb_height
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case phone_number
                case first_name
                case last_name
                case vcard
                case reply_markup
                case input_message_content
                case thumb_url
                case thumb_width
                case thumb_height
            }
        }
        /// Represents a [Game](https://core.telegram.org/bots/api/#games).
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame`.
        public struct InlineQueryResultGame: Codable, Hashable, Sendable {
            /// Type of the result, must be *game*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/id`.
            public var id: Swift.String
            /// Short name of the game
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/game_short_name`.
            public var game_short_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// Creates a new `InlineQueryResultGame`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *game*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - game_short_name: Short name of the game
            ///   - reply_markup:
            public init(
                _type: Swift.String,
                id: Swift.String,
                game_short_name: Swift.String,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
            ) {
                self._type = _type
                self.id = id
                self.game_short_name = game_short_name
                self.reply_markup = reply_markup
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case game_short_name
                case reply_markup
            }
        }
        /// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto`.
        public struct InlineQueryResultCachedPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/id`.
            public var id: Swift.String
            /// A valid file identifier of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/photo_file_id`.
            public var photo_file_id: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/title`.
            public var title: Swift.String?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - photo_file_id: A valid file identifier of the photo
            ///   - title: *Optional*. Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                photo_file_id: Swift.String,
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.photo_file_id = photo_file_id
                self.title = title
                self.description = description
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case photo_file_id
                case title
                case description
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif`.
        public struct InlineQueryResultCachedGif: Codable, Hashable, Sendable {
            /// Type of the result, must be *gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/id`.
            public var id: Swift.String
            /// A valid file identifier for the GIF file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/gif_file_id`.
            public var gif_file_id: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedGif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - gif_file_id: A valid file identifier for the GIF file
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                gif_file_id: Swift.String,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.gif_file_id = gif_file_id
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case gif_file_id
                case title
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif`.
        public struct InlineQueryResultCachedMpeg4Gif: Codable, Hashable, Sendable {
            /// Type of the result, must be *mpeg4\_gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/id`.
            public var id: Swift.String
            /// A valid file identifier for the MP4 file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/mpeg4_file_id`.
            public var mpeg4_file_id: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedMpeg4Gif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *mpeg4\_gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - mpeg4_file_id: A valid file identifier for the MP4 file
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                mpeg4_file_id: Swift.String,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.mpeg4_file_id = mpeg4_file_id
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case mpeg4_file_id
                case title
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker`.
        public struct InlineQueryResultCachedSticker: Codable, Hashable, Sendable {
            /// Type of the result, must be *sticker*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/id`.
            public var id: Swift.String
            /// A valid file identifier of the sticker
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/sticker_file_id`.
            public var sticker_file_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedSticker`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *sticker*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - sticker_file_id: A valid file identifier of the sticker
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                sticker_file_id: Swift.String,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.sticker_file_id = sticker_file_id
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case sticker_file_id
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument`.
        public struct InlineQueryResultCachedDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/id`.
            public var id: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/title`.
            public var title: Swift.String
            /// A valid file identifier for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/document_file_id`.
            public var document_file_id: Swift.String
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - title: Title for the result
            ///   - document_file_id: A valid file identifier for the file
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                document_file_id: Swift.String,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.document_file_id = document_file_id
                self.description = description
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case document_file_id
                case description
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo`.
        public struct InlineQueryResultCachedVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/id`.
            public var id: Swift.String
            /// A valid file identifier for the video file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/video_file_id`.
            public var video_file_id: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/title`.
            public var title: Swift.String
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - video_file_id: A valid file identifier for the video file
            ///   - title: Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                video_file_id: Swift.String,
                title: Swift.String,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.video_file_id = video_file_id
                self.title = title
                self.description = description
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case video_file_id
                case title
                case description
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice`.
        public struct InlineQueryResultCachedVoice: Codable, Hashable, Sendable {
            /// Type of the result, must be *voice*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/id`.
            public var id: Swift.String
            /// A valid file identifier for the voice message
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/voice_file_id`.
            public var voice_file_id: Swift.String
            /// Voice message title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedVoice`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *voice*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - voice_file_id: A valid file identifier for the voice message
            ///   - title: Voice message title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                voice_file_id: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.voice_file_id = voice_file_id
                self.title = title
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case voice_file_id
                case title
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio`.
        public struct InlineQueryResultCachedAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/id`.
            public var id: Swift.String
            /// A valid file identifier for the audio file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/audio_file_id`.
            public var audio_file_id: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/caption_entities`.
            public var caption_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/reply_markup`.
            public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/input_message_content`.
            public var input_message_content: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - audio_file_id: A valid file identifier for the audio file
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parse_mode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - reply_markup:
            ///   - input_message_content:
            public init(
                _type: Swift.String,
                id: Swift.String,
                audio_file_id: Swift.String,
                caption: Swift.String? = nil,
                parse_mode: Swift.String? = nil,
                caption_entities: [Components.Schemas.MessageEntity]? = nil,
                reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil,
                input_message_content: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.audio_file_id = audio_file_id
                self.caption = caption
                self.parse_mode = parse_mode
                self.caption_entities = caption_entities
                self.reply_markup = reply_markup
                self.input_message_content = input_message_content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case audio_file_id
                case caption
                case parse_mode
                case caption_entities
                case reply_markup
                case input_message_content
            }
        }
        /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
        ///
        /// - Remark: Generated from `#/components/schemas/InputMessageContent`.
        public struct InputMessageContent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value1`.
            public var value1: Components.Schemas.InputTextMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value2`.
            public var value2: Components.Schemas.InputLocationMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value3`.
            public var value3: Components.Schemas.InputVenueMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value4`.
            public var value4: Components.Schemas.InputContactMessageContent?
            /// Creates a new `InputMessageContent`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            public init(
                value1: Components.Schemas.InputTextMessageContent? = nil,
                value2: Components.Schemas.InputLocationMessageContent? = nil,
                value3: Components.Schemas.InputVenueMessageContent? = nil,
                value4: Components.Schemas.InputContactMessageContent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputTextMessageContent`.
        public struct InputTextMessageContent: Codable, Hashable, Sendable {
            /// Text of the message to be sent, 1-4096 characters
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/message_text`.
            public var message_text: Swift.String
            /// *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/parse_mode`.
            public var parse_mode: Swift.String?
            /// *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/entities`.
            public var entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Disables link previews for links in the sent message
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/disable_web_page_preview`.
            public var disable_web_page_preview: Swift.Bool?
            /// Creates a new `InputTextMessageContent`.
            ///
            /// - Parameters:
            ///   - message_text: Text of the message to be sent, 1-4096 characters
            ///   - parse_mode: *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - entities: *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            ///   - disable_web_page_preview: *Optional*. Disables link previews for links in the sent message
            public init(
                message_text: Swift.String,
                parse_mode: Swift.String? = nil,
                entities: [Components.Schemas.MessageEntity]? = nil,
                disable_web_page_preview: Swift.Bool? = nil
            ) {
                self.message_text = message_text
                self.parse_mode = parse_mode
                self.entities = entities
                self.disable_web_page_preview = disable_web_page_preview
            }
            public enum CodingKeys: String, CodingKey {
                case message_text
                case parse_mode
                case entities
                case disable_web_page_preview
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent`.
        public struct InputLocationMessageContent: Codable, Hashable, Sendable {
            /// Latitude of the location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/longitude`.
            public var longitude: Swift.Double
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/horizontal_accuracy`.
            public var horizontal_accuracy: Swift.Double?
            /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/live_period`.
            public var live_period: Swift.Int?
            /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/heading`.
            public var heading: Swift.Int?
            /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/proximity_alert_radius`.
            public var proximity_alert_radius: Swift.Int?
            /// Creates a new `InputLocationMessageContent`.
            ///
            /// - Parameters:
            ///   - latitude: Latitude of the location in degrees
            ///   - longitude: Longitude of the location in degrees
            ///   - horizontal_accuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - live_period: *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///   - heading: *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///   - proximity_alert_radius: *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            public init(
                latitude: Swift.Double,
                longitude: Swift.Double,
                horizontal_accuracy: Swift.Double? = nil,
                live_period: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximity_alert_radius: Swift.Int? = nil
            ) {
                self.latitude = latitude
                self.longitude = longitude
                self.horizontal_accuracy = horizontal_accuracy
                self.live_period = live_period
                self.heading = heading
                self.proximity_alert_radius = proximity_alert_radius
            }
            public enum CodingKeys: String, CodingKey {
                case latitude
                case longitude
                case horizontal_accuracy
                case live_period
                case heading
                case proximity_alert_radius
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent`.
        public struct InputVenueMessageContent: Codable, Hashable, Sendable {
            /// Latitude of the venue in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the venue in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/longitude`.
            public var longitude: Swift.Double
            /// Name of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue, if known
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/foursquare_id`.
            public var foursquare_id: Swift.String?
            /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/foursquare_type`.
            public var foursquare_type: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/google_place_id`.
            public var google_place_id: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/google_place_type`.
            public var google_place_type: Swift.String?
            /// Creates a new `InputVenueMessageContent`.
            ///
            /// - Parameters:
            ///   - latitude: Latitude of the venue in degrees
            ///   - longitude: Longitude of the venue in degrees
            ///   - title: Name of the venue
            ///   - address: Address of the venue
            ///   - foursquare_id: *Optional*. Foursquare identifier of the venue, if known
            ///   - foursquare_type: *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - google_place_id: *Optional*. Google Places identifier of the venue
            ///   - google_place_type: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            public init(
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                address: Swift.String,
                foursquare_id: Swift.String? = nil,
                foursquare_type: Swift.String? = nil,
                google_place_id: Swift.String? = nil,
                google_place_type: Swift.String? = nil
            ) {
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.address = address
                self.foursquare_id = foursquare_id
                self.foursquare_type = foursquare_type
                self.google_place_id = google_place_id
                self.google_place_type = google_place_type
            }
            public enum CodingKeys: String, CodingKey {
                case latitude
                case longitude
                case title
                case address
                case foursquare_id
                case foursquare_type
                case google_place_id
                case google_place_type
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputContactMessageContent`.
        public struct InputContactMessageContent: Codable, Hashable, Sendable {
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/phone_number`.
            public var phone_number: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/first_name`.
            public var first_name: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/last_name`.
            public var last_name: Swift.String?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/vcard`.
            public var vcard: Swift.String?
            /// Creates a new `InputContactMessageContent`.
            ///
            /// - Parameters:
            ///   - phone_number: Contact's phone number
            ///   - first_name: Contact's first name
            ///   - last_name: *Optional*. Contact's last name
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            public init(
                phone_number: Swift.String,
                first_name: Swift.String,
                last_name: Swift.String? = nil,
                vcard: Swift.String? = nil
            ) {
                self.phone_number = phone_number
                self.first_name = first_name
                self.last_name = last_name
                self.vcard = vcard
            }
            public enum CodingKeys: String, CodingKey {
                case phone_number
                case first_name
                case last_name
                case vcard
            }
        }
        /// Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
        ///
        /// - Remark: Generated from `#/components/schemas/ChosenInlineResult`.
        public struct ChosenInlineResult: Codable, Hashable, Sendable {
            /// The unique identifier for the result that was chosen
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/result_id`.
            public var result_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/location`.
            public var location: Components.Schemas.Location?
            /// *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/inline_message_id`.
            public var inline_message_id: Swift.String?
            /// The query that was used to obtain the result
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/query`.
            public var query: Swift.String
            /// Creates a new `ChosenInlineResult`.
            ///
            /// - Parameters:
            ///   - result_id: The unique identifier for the result that was chosen
            ///   - from:
            ///   - location:
            ///   - inline_message_id: *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
            ///   - query: The query that was used to obtain the result
            public init(
                result_id: Swift.String,
                from: Components.Schemas.User,
                location: Components.Schemas.Location? = nil,
                inline_message_id: Swift.String? = nil,
                query: Swift.String
            ) {
                self.result_id = result_id
                self.from = from
                self.location = location
                self.inline_message_id = inline_message_id
                self.query = query
            }
            public enum CodingKeys: String, CodingKey {
                case result_id
                case from
                case location
                case inline_message_id
                case query
            }
        }
        /// This object represents a portion of the price for goods or services.
        ///
        /// - Remark: Generated from `#/components/schemas/LabeledPrice`.
        public struct LabeledPrice: Codable, Hashable, Sendable {
            /// Portion label
            ///
            /// - Remark: Generated from `#/components/schemas/LabeledPrice/label`.
            public var label: Swift.String
            /// Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/LabeledPrice/amount`.
            public var amount: Swift.Int
            /// Creates a new `LabeledPrice`.
            ///
            /// - Parameters:
            ///   - label: Portion label
            ///   - amount: Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            public init(
                label: Swift.String,
                amount: Swift.Int
            ) {
                self.label = label
                self.amount = amount
            }
            public enum CodingKeys: String, CodingKey {
                case label
                case amount
            }
        }
        /// This object contains basic information about an invoice.
        ///
        /// - Remark: Generated from `#/components/schemas/Invoice`.
        public struct Invoice: Codable, Hashable, Sendable {
            /// Product name
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/title`.
            public var title: Swift.String
            /// Product description
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/description`.
            public var description: Swift.String
            /// Unique bot deep-linking parameter that can be used to generate this invoice
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/start_parameter`.
            public var start_parameter: Swift.String
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/total_amount`.
            public var total_amount: Swift.Int
            /// Creates a new `Invoice`.
            ///
            /// - Parameters:
            ///   - title: Product name
            ///   - description: Product description
            ///   - start_parameter: Unique bot deep-linking parameter that can be used to generate this invoice
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - total_amount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            public init(
                title: Swift.String,
                description: Swift.String,
                start_parameter: Swift.String,
                currency: Swift.String,
                total_amount: Swift.Int
            ) {
                self.title = title
                self.description = description
                self.start_parameter = start_parameter
                self.currency = currency
                self.total_amount = total_amount
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case start_parameter
                case currency
                case total_amount
            }
        }
        /// This object represents a shipping address.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingAddress`.
        public struct ShippingAddress: Codable, Hashable, Sendable {
            /// ISO 3166-1 alpha-2 country code
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/country_code`.
            public var country_code: Swift.String
            /// State, if applicable
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/state`.
            public var state: Swift.String
            /// City
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/city`.
            public var city: Swift.String
            /// First line for the address
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/street_line1`.
            public var street_line1: Swift.String
            /// Second line for the address
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/street_line2`.
            public var street_line2: Swift.String
            /// Address post code
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/post_code`.
            public var post_code: Swift.String
            /// Creates a new `ShippingAddress`.
            ///
            /// - Parameters:
            ///   - country_code: ISO 3166-1 alpha-2 country code
            ///   - state: State, if applicable
            ///   - city: City
            ///   - street_line1: First line for the address
            ///   - street_line2: Second line for the address
            ///   - post_code: Address post code
            public init(
                country_code: Swift.String,
                state: Swift.String,
                city: Swift.String,
                street_line1: Swift.String,
                street_line2: Swift.String,
                post_code: Swift.String
            ) {
                self.country_code = country_code
                self.state = state
                self.city = city
                self.street_line1 = street_line1
                self.street_line2 = street_line2
                self.post_code = post_code
            }
            public enum CodingKeys: String, CodingKey {
                case country_code
                case state
                case city
                case street_line1
                case street_line2
                case post_code
            }
        }
        /// This object represents information about an order.
        ///
        /// - Remark: Generated from `#/components/schemas/OrderInfo`.
        public struct OrderInfo: Codable, Hashable, Sendable {
            /// *Optional*. User name
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/name`.
            public var name: Swift.String?
            /// *Optional*. User's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/phone_number`.
            public var phone_number: Swift.String?
            /// *Optional*. User email
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderInfo/shipping_address`.
            public var shipping_address: Components.Schemas.ShippingAddress?
            /// Creates a new `OrderInfo`.
            ///
            /// - Parameters:
            ///   - name: *Optional*. User name
            ///   - phone_number: *Optional*. User's phone number
            ///   - email: *Optional*. User email
            ///   - shipping_address:
            public init(
                name: Swift.String? = nil,
                phone_number: Swift.String? = nil,
                email: Swift.String? = nil,
                shipping_address: Components.Schemas.ShippingAddress? = nil
            ) {
                self.name = name
                self.phone_number = phone_number
                self.email = email
                self.shipping_address = shipping_address
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case phone_number
                case email
                case shipping_address
            }
        }
        /// This object represents one shipping option.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingOption`.
        public struct ShippingOption: Codable, Hashable, Sendable {
            /// Shipping option identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/id`.
            public var id: Swift.String
            /// Option title
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/title`.
            public var title: Swift.String
            /// List of price portions
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/prices`.
            public var prices: [Components.Schemas.LabeledPrice]
            /// Creates a new `ShippingOption`.
            ///
            /// - Parameters:
            ///   - id: Shipping option identifier
            ///   - title: Option title
            ///   - prices: List of price portions
            public init(
                id: Swift.String,
                title: Swift.String,
                prices: [Components.Schemas.LabeledPrice]
            ) {
                self.id = id
                self.title = title
                self.prices = prices
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case prices
            }
        }
        /// This object contains basic information about a successful payment.
        ///
        /// - Remark: Generated from `#/components/schemas/SuccessfulPayment`.
        public struct SuccessfulPayment: Codable, Hashable, Sendable {
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/total_amount`.
            public var total_amount: Swift.Int
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/invoice_payload`.
            public var invoice_payload: Swift.String
            /// *Optional*. Identifier of the shipping option chosen by the user
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/shipping_option_id`.
            public var shipping_option_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/order_info`.
            public var order_info: Components.Schemas.OrderInfo?
            /// Telegram payment identifier
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/telegram_payment_charge_id`.
            public var telegram_payment_charge_id: Swift.String
            /// Provider payment identifier
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/provider_payment_charge_id`.
            public var provider_payment_charge_id: Swift.String
            /// Creates a new `SuccessfulPayment`.
            ///
            /// - Parameters:
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - total_amount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///   - invoice_payload: Bot specified invoice payload
            ///   - shipping_option_id: *Optional*. Identifier of the shipping option chosen by the user
            ///   - order_info:
            ///   - telegram_payment_charge_id: Telegram payment identifier
            ///   - provider_payment_charge_id: Provider payment identifier
            public init(
                currency: Swift.String,
                total_amount: Swift.Int,
                invoice_payload: Swift.String,
                shipping_option_id: Swift.String? = nil,
                order_info: Components.Schemas.OrderInfo? = nil,
                telegram_payment_charge_id: Swift.String,
                provider_payment_charge_id: Swift.String
            ) {
                self.currency = currency
                self.total_amount = total_amount
                self.invoice_payload = invoice_payload
                self.shipping_option_id = shipping_option_id
                self.order_info = order_info
                self.telegram_payment_charge_id = telegram_payment_charge_id
                self.provider_payment_charge_id = provider_payment_charge_id
            }
            public enum CodingKeys: String, CodingKey {
                case currency
                case total_amount
                case invoice_payload
                case shipping_option_id
                case order_info
                case telegram_payment_charge_id
                case provider_payment_charge_id
            }
        }
        /// This object contains information about an incoming shipping query.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingQuery`.
        public struct ShippingQuery: Codable, Hashable, Sendable {
            /// Unique query identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/from`.
            public var from: Components.Schemas.User
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/invoice_payload`.
            public var invoice_payload: Swift.String
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/shipping_address`.
            public var shipping_address: Components.Schemas.ShippingAddress
            /// Creates a new `ShippingQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique query identifier
            ///   - from:
            ///   - invoice_payload: Bot specified invoice payload
            ///   - shipping_address:
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                invoice_payload: Swift.String,
                shipping_address: Components.Schemas.ShippingAddress
            ) {
                self.id = id
                self.from = from
                self.invoice_payload = invoice_payload
                self.shipping_address = shipping_address
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case invoice_payload
                case shipping_address
            }
        }
        /// This object contains information about an incoming pre-checkout query.
        ///
        /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery`.
        public struct PreCheckoutQuery: Codable, Hashable, Sendable {
            /// Unique query identifier
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/from`.
            public var from: Components.Schemas.User
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/total_amount`.
            public var total_amount: Swift.Int
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/invoice_payload`.
            public var invoice_payload: Swift.String
            /// *Optional*. Identifier of the shipping option chosen by the user
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/shipping_option_id`.
            public var shipping_option_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/order_info`.
            public var order_info: Components.Schemas.OrderInfo?
            /// Creates a new `PreCheckoutQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique query identifier
            ///   - from:
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - total_amount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///   - invoice_payload: Bot specified invoice payload
            ///   - shipping_option_id: *Optional*. Identifier of the shipping option chosen by the user
            ///   - order_info:
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                currency: Swift.String,
                total_amount: Swift.Int,
                invoice_payload: Swift.String,
                shipping_option_id: Swift.String? = nil,
                order_info: Components.Schemas.OrderInfo? = nil
            ) {
                self.id = id
                self.from = from
                self.currency = currency
                self.total_amount = total_amount
                self.invoice_payload = invoice_payload
                self.shipping_option_id = shipping_option_id
                self.order_info = order_info
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case currency
                case total_amount
                case invoice_payload
                case shipping_option_id
                case order_info
            }
        }
        /// Contains information about Telegram Passport data shared with the bot by the user.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportData`.
        public struct PassportData: Codable, Hashable, Sendable {
            /// Array with information about documents and other Telegram Passport elements that was shared with the bot
            ///
            /// - Remark: Generated from `#/components/schemas/PassportData/data`.
            public var data: [Components.Schemas.EncryptedPassportElement]
            /// - Remark: Generated from `#/components/schemas/PassportData/credentials`.
            public var credentials: Components.Schemas.EncryptedCredentials
            /// Creates a new `PassportData`.
            ///
            /// - Parameters:
            ///   - data: Array with information about documents and other Telegram Passport elements that was shared with the bot
            ///   - credentials:
            public init(
                data: [Components.Schemas.EncryptedPassportElement],
                credentials: Components.Schemas.EncryptedCredentials
            ) {
                self.data = data
                self.credentials = credentials
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case credentials
            }
        }
        /// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportFile`.
        public struct PassportFile: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_id`.
            public var file_id: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_unique_id`.
            public var file_unique_id: Swift.String
            /// File size
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_size`.
            public var file_size: Swift.Int
            /// Unix time when the file was uploaded
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_date`.
            public var file_date: Swift.Int
            /// Creates a new `PassportFile`.
            ///
            /// - Parameters:
            ///   - file_id: Identifier for this file, which can be used to download or reuse the file
            ///   - file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - file_size: File size
            ///   - file_date: Unix time when the file was uploaded
            public init(
                file_id: Swift.String,
                file_unique_id: Swift.String,
                file_size: Swift.Int,
                file_date: Swift.Int
            ) {
                self.file_id = file_id
                self.file_unique_id = file_unique_id
                self.file_size = file_size
                self.file_date = file_date
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_unique_id
                case file_size
                case file_date
            }
        }
        /// Contains information about documents or other Telegram Passport elements shared with the bot by the user.
        ///
        /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement`.
        public struct EncryptedPassportElement: Codable, Hashable, Sendable {
            /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case personal_details = "personal_details"
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
                case address = "address"
                case utility_bill = "utility_bill"
                case bank_statement = "bank_statement"
                case rental_agreement = "rental_agreement"
                case passport_registration = "passport_registration"
                case temporary_registration = "temporary_registration"
                case phone_number = "phone_number"
                case email = "email"
            }
            /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/type`.
            public var _type: Components.Schemas.EncryptedPassportElement._typePayload
            /// *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/data`.
            public var data: Swift.String?
            /// *Optional*. User's verified phone number, available only for “phone\_number” type
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/phone_number`.
            public var phone_number: Swift.String?
            /// *Optional*. User's verified email address, available only for “email” type
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/email`.
            public var email: Swift.String?
            /// *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/files`.
            public var files: [Components.Schemas.PassportFile]?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/front_side`.
            public var front_side: Components.Schemas.PassportFile?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/reverse_side`.
            public var reverse_side: Components.Schemas.PassportFile?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/selfie`.
            public var selfie: Components.Schemas.PassportFile?
            /// *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/translation`.
            public var translation: [Components.Schemas.PassportFile]?
            /// Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/hash`.
            public var hash: Swift.String
            /// Creates a new `EncryptedPassportElement`.
            ///
            /// - Parameters:
            ///   - _type: Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///   - data: *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - phone_number: *Optional*. User's verified phone number, available only for “phone\_number” type
            ///   - email: *Optional*. User's verified email address, available only for “email” type
            ///   - files: *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - front_side:
            ///   - reverse_side:
            ///   - selfie:
            ///   - translation: *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - hash: Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
            public init(
                _type: Components.Schemas.EncryptedPassportElement._typePayload,
                data: Swift.String? = nil,
                phone_number: Swift.String? = nil,
                email: Swift.String? = nil,
                files: [Components.Schemas.PassportFile]? = nil,
                front_side: Components.Schemas.PassportFile? = nil,
                reverse_side: Components.Schemas.PassportFile? = nil,
                selfie: Components.Schemas.PassportFile? = nil,
                translation: [Components.Schemas.PassportFile]? = nil,
                hash: Swift.String
            ) {
                self._type = _type
                self.data = data
                self.phone_number = phone_number
                self.email = email
                self.files = files
                self.front_side = front_side
                self.reverse_side = reverse_side
                self.selfie = selfie
                self.translation = translation
                self.hash = hash
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case data
                case phone_number
                case email
                case files
                case front_side
                case reverse_side
                case selfie
                case translation
                case hash
            }
        }
        /// Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
        ///
        /// - Remark: Generated from `#/components/schemas/EncryptedCredentials`.
        public struct EncryptedCredentials: Codable, Hashable, Sendable {
            /// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/data`.
            public var data: Swift.String
            /// Base64-encoded data hash for data authentication
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/hash`.
            public var hash: Swift.String
            /// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/secret`.
            public var secret: Swift.String
            /// Creates a new `EncryptedCredentials`.
            ///
            /// - Parameters:
            ///   - data: Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
            ///   - hash: Base64-encoded data hash for data authentication
            ///   - secret: Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
            public init(
                data: Swift.String,
                hash: Swift.String,
                secret: Swift.String
            ) {
                self.data = data
                self.hash = hash
                self.secret = secret
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case hash
                case secret
            }
        }
        /// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementError`.
        public struct PassportElementError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value1`.
            public var value1: Components.Schemas.PassportElementErrorDataField?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value2`.
            public var value2: Components.Schemas.PassportElementErrorFrontSide?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value3`.
            public var value3: Components.Schemas.PassportElementErrorReverseSide?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value4`.
            public var value4: Components.Schemas.PassportElementErrorSelfie?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value5`.
            public var value5: Components.Schemas.PassportElementErrorFile?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value6`.
            public var value6: Components.Schemas.PassportElementErrorFiles?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value7`.
            public var value7: Components.Schemas.PassportElementErrorTranslationFile?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value8`.
            public var value8: Components.Schemas.PassportElementErrorTranslationFiles?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value9`.
            public var value9: Components.Schemas.PassportElementErrorUnspecified?
            /// Creates a new `PassportElementError`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            public init(
                value1: Components.Schemas.PassportElementErrorDataField? = nil,
                value2: Components.Schemas.PassportElementErrorFrontSide? = nil,
                value3: Components.Schemas.PassportElementErrorReverseSide? = nil,
                value4: Components.Schemas.PassportElementErrorSelfie? = nil,
                value5: Components.Schemas.PassportElementErrorFile? = nil,
                value6: Components.Schemas.PassportElementErrorFiles? = nil,
                value7: Components.Schemas.PassportElementErrorTranslationFile? = nil,
                value8: Components.Schemas.PassportElementErrorTranslationFiles? = nil,
                value9: Components.Schemas.PassportElementErrorUnspecified? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
            }
        }
        /// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField`.
        public struct PassportElementErrorDataField: Codable, Hashable, Sendable {
            /// Error source, must be *data*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case personal_details = "personal_details"
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
                case address = "address"
            }
            /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/type`.
            public var _type: Components.Schemas.PassportElementErrorDataField._typePayload
            /// Name of the data field which has the error
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/field_name`.
            public var field_name: Swift.String
            /// Base64-encoded data hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/data_hash`.
            public var data_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorDataField`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *data*
            ///   - _type: The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///   - field_name: Name of the data field which has the error
            ///   - data_hash: Base64-encoded data hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorDataField._typePayload,
                field_name: Swift.String,
                data_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.field_name = field_name
                self.data_hash = data_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case field_name
                case data_hash
                case message
            }
        }
        /// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide`.
        public struct PassportElementErrorFrontSide: Codable, Hashable, Sendable {
            /// Error source, must be *front\_side*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/type`.
            public var _type: Components.Schemas.PassportElementErrorFrontSide._typePayload
            /// Base64-encoded hash of the file with the front side of the document
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/file_hash`.
            public var file_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFrontSide`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *front\_side*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///   - file_hash: Base64-encoded hash of the file with the front side of the document
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFrontSide._typePayload,
                file_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hash = file_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hash
                case message
            }
        }
        /// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide`.
        public struct PassportElementErrorReverseSide: Codable, Hashable, Sendable {
            /// Error source, must be *reverse\_side*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case driver_license = "driver_license"
                case identity_card = "identity_card"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/type`.
            public var _type: Components.Schemas.PassportElementErrorReverseSide._typePayload
            /// Base64-encoded hash of the file with the reverse side of the document
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/file_hash`.
            public var file_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorReverseSide`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *reverse\_side*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///   - file_hash: Base64-encoded hash of the file with the reverse side of the document
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorReverseSide._typePayload,
                file_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hash = file_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hash
                case message
            }
        }
        /// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie`.
        public struct PassportElementErrorSelfie: Codable, Hashable, Sendable {
            /// Error source, must be *selfie*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/type`.
            public var _type: Components.Schemas.PassportElementErrorSelfie._typePayload
            /// Base64-encoded hash of the file with the selfie
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/file_hash`.
            public var file_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorSelfie`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *selfie*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///   - file_hash: Base64-encoded hash of the file with the selfie
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorSelfie._typePayload,
                file_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hash = file_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hash
                case message
            }
        }
        /// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile`.
        public struct PassportElementErrorFile: Codable, Hashable, Sendable {
            /// Error source, must be *file*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case utility_bill = "utility_bill"
                case bank_statement = "bank_statement"
                case rental_agreement = "rental_agreement"
                case passport_registration = "passport_registration"
                case temporary_registration = "temporary_registration"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/type`.
            public var _type: Components.Schemas.PassportElementErrorFile._typePayload
            /// Base64-encoded file hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/file_hash`.
            public var file_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFile`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *file*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - file_hash: Base64-encoded file hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFile._typePayload,
                file_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hash = file_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hash
                case message
            }
        }
        /// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles`.
        public struct PassportElementErrorFiles: Codable, Hashable, Sendable {
            /// Error source, must be *files*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case utility_bill = "utility_bill"
                case bank_statement = "bank_statement"
                case rental_agreement = "rental_agreement"
                case passport_registration = "passport_registration"
                case temporary_registration = "temporary_registration"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/type`.
            public var _type: Components.Schemas.PassportElementErrorFiles._typePayload
            /// List of base64-encoded file hashes
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/file_hashes`.
            public var file_hashes: [Swift.String]
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFiles`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *files*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - file_hashes: List of base64-encoded file hashes
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFiles._typePayload,
                file_hashes: [Swift.String],
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hashes = file_hashes
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hashes
                case message
            }
        }
        /// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile`.
        public struct PassportElementErrorTranslationFile: Codable, Hashable, Sendable {
            /// Error source, must be *translation\_file*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
                case utility_bill = "utility_bill"
                case bank_statement = "bank_statement"
                case rental_agreement = "rental_agreement"
                case passport_registration = "passport_registration"
                case temporary_registration = "temporary_registration"
            }
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/type`.
            public var _type: Components.Schemas.PassportElementErrorTranslationFile._typePayload
            /// Base64-encoded file hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/file_hash`.
            public var file_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorTranslationFile`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *translation\_file*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - file_hash: Base64-encoded file hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorTranslationFile._typePayload,
                file_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hash = file_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hash
                case message
            }
        }
        /// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles`.
        public struct PassportElementErrorTranslationFiles: Codable, Hashable, Sendable {
            /// Error source, must be *translation\_files*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driver_license = "driver_license"
                case identity_card = "identity_card"
                case internal_passport = "internal_passport"
                case utility_bill = "utility_bill"
                case bank_statement = "bank_statement"
                case rental_agreement = "rental_agreement"
                case passport_registration = "passport_registration"
                case temporary_registration = "temporary_registration"
            }
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/type`.
            public var _type: Components.Schemas.PassportElementErrorTranslationFiles._typePayload
            /// List of base64-encoded file hashes
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/file_hashes`.
            public var file_hashes: [Swift.String]
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorTranslationFiles`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *translation\_files*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - file_hashes: List of base64-encoded file hashes
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorTranslationFiles._typePayload,
                file_hashes: [Swift.String],
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.file_hashes = file_hashes
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case file_hashes
                case message
            }
        }
        /// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified`.
        public struct PassportElementErrorUnspecified: Codable, Hashable, Sendable {
            /// Error source, must be *unspecified*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/type`.
            public var _type: Swift.String
            /// Base64-encoded element hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/element_hash`.
            public var element_hash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorUnspecified`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *unspecified*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue
            ///   - element_hash: Base64-encoded element hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Swift.String,
                element_hash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.element_hash = element_hash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case element_hash
                case message
            }
        }
        /// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
        ///
        /// - Remark: Generated from `#/components/schemas/Game`.
        public struct Game: Codable, Hashable, Sendable {
            /// Title of the game
            ///
            /// - Remark: Generated from `#/components/schemas/Game/title`.
            public var title: Swift.String
            /// Description of the game
            ///
            /// - Remark: Generated from `#/components/schemas/Game/description`.
            public var description: Swift.String
            /// Photo that will be displayed in the game message in chats.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/photo`.
            public var photo: [Components.Schemas.PhotoSize]
            /// *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/text`.
            public var text: Swift.String?
            /// *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/text_entities`.
            public var text_entities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/Game/animation`.
            public var animation: Components.Schemas.Animation?
            /// Creates a new `Game`.
            ///
            /// - Parameters:
            ///   - title: Title of the game
            ///   - description: Description of the game
            ///   - photo: Photo that will be displayed in the game message in chats.
            ///   - text: *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
            ///   - text_entities: *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
            ///   - animation:
            public init(
                title: Swift.String,
                description: Swift.String,
                photo: [Components.Schemas.PhotoSize],
                text: Swift.String? = nil,
                text_entities: [Components.Schemas.MessageEntity]? = nil,
                animation: Components.Schemas.Animation? = nil
            ) {
                self.title = title
                self.description = description
                self.photo = photo
                self.text = text
                self.text_entities = text_entities
                self.animation = animation
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case photo
                case text
                case text_entities
                case animation
            }
        }
        /// A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackGame`.
        public typealias CallbackGame = OpenAPIRuntime.OpenAPIValueContainer
        /// This object represents one row of the high scores table for a game.
        ///
        /// - Remark: Generated from `#/components/schemas/GameHighScore`.
        public struct GameHighScore: Codable, Hashable, Sendable {
            /// Position in high score table for the game
            ///
            /// - Remark: Generated from `#/components/schemas/GameHighScore/position`.
            public var position: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GameHighScore/user`.
            public var user: Components.Schemas.User
            /// Score
            ///
            /// - Remark: Generated from `#/components/schemas/GameHighScore/score`.
            public var score: Swift.Int
            /// Creates a new `GameHighScore`.
            ///
            /// - Parameters:
            ///   - position: Position in high score table for the game
            ///   - user:
            ///   - score: Score
            public init(
                position: Swift.Int,
                user: Components.Schemas.User,
                score: Swift.Int
            ) {
                self.position = position
                self.user = user
                self.score = score
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case user
                case score
            }
        }
        /// Used in the User Authorization process, used to return the current state of the authorization and the token.
        ///
        /// - Remark: Generated from `#/components/schemas/AuthorizationState`.
        public struct AuthorizationState: Codable, Hashable, Sendable {
            /// Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/authorization_state`.
            @frozen public enum authorization_statePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case wait_code = "wait_code"
                case wait_password = "wait_password"
                case wait_registration = "wait_registration"
                case ready = "ready"
                case unknown = "unknown"
            }
            /// Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/authorization_state`.
            public var authorization_state: Components.Schemas.AuthorizationState.authorization_statePayload
            /// Optional. Token to be used for calling methods at the bot api. Only returned once after the `userlogin` method.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/token`.
            public var token: Swift.String?
            /// Optional. Timeout for entering the authorization code.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/timeout`.
            public var timeout: Swift.Int?
            /// Optional. The password hint for your 2fa password. May be empty even if you set a hint.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/password_hint`.
            public var password_hint: Swift.String?
            /// Optional. True, if a recovery email address has been set up.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/has_recovery_email_address`.
            public var has_recovery_email_address: Swift.Bool?
            /// Creates a new `AuthorizationState`.
            ///
            /// - Parameters:
            ///   - authorization_state: Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///   - token: Optional. Token to be used for calling methods at the bot api. Only returned once after the `userlogin` method.
            ///   - timeout: Optional. Timeout for entering the authorization code.
            ///   - password_hint: Optional. The password hint for your 2fa password. May be empty even if you set a hint.
            ///   - has_recovery_email_address: Optional. True, if a recovery email address has been set up.
            public init(
                authorization_state: Components.Schemas.AuthorizationState.authorization_statePayload,
                token: Swift.String? = nil,
                timeout: Swift.Int? = nil,
                password_hint: Swift.String? = nil,
                has_recovery_email_address: Swift.Bool? = nil
            ) {
                self.authorization_state = authorization_state
                self.token = token
                self.timeout = timeout
                self.password_hint = password_hint
                self.has_recovery_email_address = has_recovery_email_address
            }
            public enum CodingKeys: String, CodingKey {
                case authorization_state
                case token
                case timeout
                case password_hint
                case has_recovery_email_address
            }
        }
        /// Contains a bot's answer to a callback query.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer`.
        public struct CallbackQueryAnswer: Codable, Hashable, Sendable {
            /// Text of the answer
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/text`.
            public var text: Swift.String
            /// True, if an alert should be shown to the user instead of a toast notification.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/show_alert`.
            public var show_alert: Swift.Bool?
            /// URL to be opened.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/url`.
            public var url: Swift.String?
            /// Creates a new `CallbackQueryAnswer`.
            ///
            /// - Parameters:
            ///   - text: Text of the answer
            ///   - show_alert: True, if an alert should be shown to the user instead of a toast notification.
            ///   - url: URL to be opened.
            public init(
                text: Swift.String,
                show_alert: Swift.Bool? = nil,
                url: Swift.String? = nil
            ) {
                self.text = text
                self.show_alert = show_alert
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case show_alert
                case url
            }
        }
        /// Contains a proxy definition.
        ///
        /// - Remark: Generated from `#/components/schemas/Proxy`.
        public struct Proxy: Codable, Hashable, Sendable {
            /// Unique ID of the proxy
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/id`.
            public var id: Swift.Int
            /// Unix timestamp indicating when the proxy was used for the last time.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/last_used_date`.
            public var last_used_date: Swift.Int
            /// Whether the bot is being used at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/is_enabled`.
            public var is_enabled: Swift.Bool
            /// Hostname or IP of the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/server`.
            public var server: Swift.String
            /// TCP port where the proxy server listens.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/port`.
            public var port: Swift.Int
            /// Type of proxy server, either socks5, mtproto or http.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/type`.
            public var _type: Swift.String
            /// Username to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/username`.
            public var username: Swift.String?
            /// Password to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/password`.
            public var password: Swift.String?
            /// Secret to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/secret`.
            public var secret: Swift.String?
            /// Whether an Http proxy can only use Http requests (and does not support HTTP CONNECT method).
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/http_only`.
            public var http_only: Swift.Bool?
            /// Creates a new `Proxy`.
            ///
            /// - Parameters:
            ///   - id: Unique ID of the proxy
            ///   - last_used_date: Unix timestamp indicating when the proxy was used for the last time.
            ///   - is_enabled: Whether the bot is being used at the moment.
            ///   - server: Hostname or IP of the proxy server.
            ///   - port: TCP port where the proxy server listens.
            ///   - _type: Type of proxy server, either socks5, mtproto or http.
            ///   - username: Username to authenticate to the proxy server.
            ///   - password: Password to authenticate to the proxy server.
            ///   - secret: Secret to authenticate to the proxy server.
            ///   - http_only: Whether an Http proxy can only use Http requests (and does not support HTTP CONNECT method).
            public init(
                id: Swift.Int,
                last_used_date: Swift.Int,
                is_enabled: Swift.Bool,
                server: Swift.String,
                port: Swift.Int,
                _type: Swift.String,
                username: Swift.String? = nil,
                password: Swift.String? = nil,
                secret: Swift.String? = nil,
                http_only: Swift.Bool? = nil
            ) {
                self.id = id
                self.last_used_date = last_used_date
                self.is_enabled = is_enabled
                self.server = server
                self.port = port
                self._type = _type
                self.username = username
                self.password = password
                self.secret = secret
                self.http_only = http_only
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case last_used_date
                case is_enabled
                case server
                case port
                case _type = "type"
                case username
                case password
                case secret
                case http_only
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    public enum post_sol_userLogin {
        public static let id: Swift.String = "post/userLogin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userLogin/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_userLogin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_userLogin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_userLogin.Input.Headers
            /// - Remark: Generated from `#/paths/userLogin/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Your phone number to log in.
                    ///
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/urlEncodedForm/phone_number`.
                    public var phone_number: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - phone_number: Your phone number to log in.
                    public init(phone_number: Swift.String) {
                        self.phone_number = phone_number
                    }
                    public enum CodingKeys: String, CodingKey {
                        case phone_number
                    }
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_userLogin.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/multipartForm/phone_number`.
                    public struct phone_numberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `phone_numberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case phone_number(OpenAPIRuntime.MultipartPart<Operations.post_sol_userLogin.Input.Body.multipartFormPayload.phone_numberPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_userLogin.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Your phone number to log in.
                    ///
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/json/phone_number`.
                    public var phone_number: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - phone_number: Your phone number to log in.
                    public init(phone_number: Swift.String) {
                        self.phone_number = phone_number
                    }
                    public enum CodingKeys: String, CodingKey {
                        case phone_number
                    }
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_userLogin.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_userLogin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_userLogin.Input.Headers = .init(),
                body: Operations.post_sol_userLogin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_userLogin.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_userLogin.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_userLogin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_userLogin.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//userLogin/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_userLogin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_userLogin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_userLogin.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_userLogin.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//userLogin/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_userLogin.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_userLogin.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    public enum post_sol_authCode {
        public static let id: Swift.String = "post/authCode"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/authCode/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_authCode.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_authCode.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_authCode.Input.Headers
            /// - Remark: Generated from `#/paths/authCode/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The verification code received via SMS, Telegram message, phone call, or flash call.
                    ///
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/urlEncodedForm/code`.
                    public var code: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: The verification code received via SMS, Telegram message, phone call, or flash call.
                    public init(code: Swift.Int) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_authCode.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/multipartForm/code`.
                    public struct codePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `codePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case code(OpenAPIRuntime.MultipartPart<Operations.post_sol_authCode.Input.Body.multipartFormPayload.codePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_authCode.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The verification code received via SMS, Telegram message, phone call, or flash call.
                    ///
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/json/code`.
                    public var code: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: The verification code received via SMS, Telegram message, phone call, or flash call.
                    public init(code: Swift.Int) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_authCode.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_authCode.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_authCode.Input.Headers = .init(),
                body: Operations.post_sol_authCode.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_authCode.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_authCode.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_authCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_authCode.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authCode/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_authCode.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_authCode.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_authCode.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_authCode.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authCode/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_authCode.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_authCode.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    public enum post_sol_authPassword {
        public static let id: Swift.String = "post/authPassword"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/authPassword/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_authPassword.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_authPassword.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_authPassword.Input.Headers
            /// - Remark: Generated from `#/paths/authPassword/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The password to check.
                    ///
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/urlEncodedForm/password`.
                    public var password: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The password to check.
                    public init(password: Swift.String) {
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_authPassword.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/multipartForm/password`.
                    public struct passwordPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `passwordPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case password(OpenAPIRuntime.MultipartPart<Operations.post_sol_authPassword.Input.Body.multipartFormPayload.passwordPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_authPassword.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The password to check.
                    ///
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/json/password`.
                    public var password: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The password to check.
                    public init(password: Swift.String) {
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_authPassword.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_authPassword.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_authPassword.Input.Headers = .init(),
                body: Operations.post_sol_authPassword.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_authPassword.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_authPassword.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_authPassword.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_authPassword.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authPassword/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_authPassword.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_authPassword.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_authPassword.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_authPassword.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authPassword/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_authPassword.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_authPassword.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    public enum post_sol_registerUser {
        public static let id: Swift.String = "post/registerUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/registerUser/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_registerUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_registerUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_registerUser.Input.Headers
            /// - Remark: Generated from `#/paths/registerUser/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The first name of the user; 1-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/first_name`.
                    public var first_name: Swift.String
                    /// The last name of the user; 0-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/last_name`.
                    public var last_name: Swift.String?
                    /// Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - first_name: The first name of the user; 1-64 characters.
                    ///   - last_name: The last name of the user; 0-64 characters.
                    ///   - disable_notification: Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    public init(
                        first_name: Swift.String,
                        last_name: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil
                    ) {
                        self.first_name = first_name
                        self.last_name = last_name
                        self.disable_notification = disable_notification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case first_name
                        case last_name
                        case disable_notification
                    }
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_registerUser.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/first_name`.
                    public struct first_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `first_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case first_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_registerUser.Input.Body.multipartFormPayload.first_namePayload>)
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/last_name`.
                    public struct last_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `last_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case last_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_registerUser.Input.Body.multipartFormPayload.last_namePayload>)
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_registerUser.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_registerUser.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The first name of the user; 1-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/first_name`.
                    public var first_name: Swift.String
                    /// The last name of the user; 0-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/last_name`.
                    public var last_name: Swift.String?
                    /// Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - first_name: The first name of the user; 1-64 characters.
                    ///   - last_name: The last name of the user; 0-64 characters.
                    ///   - disable_notification: Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    public init(
                        first_name: Swift.String,
                        last_name: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil
                    ) {
                        self.first_name = first_name
                        self.last_name = last_name
                        self.disable_notification = disable_notification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case first_name
                        case last_name
                        case disable_notification
                    }
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_registerUser.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_registerUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_registerUser.Input.Headers = .init(),
                body: Operations.post_sol_registerUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_registerUser.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_registerUser.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_registerUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_registerUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//registerUser/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_registerUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_registerUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_registerUser.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_registerUser.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//registerUser/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_registerUser.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_registerUser.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    public enum post_sol_optimizeMemory {
        public static let id: Swift.String = "post/optimizeMemory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/optimizeMemory/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_optimizeMemory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_optimizeMemory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_optimizeMemory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_optimizeMemory.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_optimizeMemory.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_optimizeMemory.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_optimizeMemory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_optimizeMemory.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//optimizeMemory/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_optimizeMemory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_optimizeMemory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_optimizeMemory.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_optimizeMemory.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//optimizeMemory/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_optimizeMemory.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_optimizeMemory.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    public enum post_sol_getMessageInfo {
        public static let id: Swift.String = "post/getMessageInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMessageInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMessageInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMessageInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getMessageInfo.Input.Headers
            /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getMessageInfo.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    public init(
                        chat_id: Operations.post_sol_getMessageInfo.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getMessageInfo.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getMessageInfo.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getMessageInfo.Input.Body.multipartFormPayload.message_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getMessageInfo.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getMessageInfo.Input.Body.jsonPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    public init(
                        chat_id: Operations.post_sol_getMessageInfo.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getMessageInfo.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getMessageInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getMessageInfo.Input.Headers = .init(),
                body: Operations.post_sol_getMessageInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getMessageInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getMessageInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMessageInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMessageInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMessageInfo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getMessageInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getMessageInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMessageInfo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMessageInfo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMessageInfo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getMessageInfo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getMessageInfo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    public enum post_sol_getChatMembers {
        public static let id: Swift.String = "post/getChatMembers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMembers/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMembers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMembers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChatMembers.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMembers.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case members = "members"
                        case banned = "banned"
                        case restricted = "restricted"
                        case bots = "bots"
                        case admins = "admins"
                    }
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.post_sol_getChatMembers.Input.Body.urlEncodedFormPayload.filterPayload?
                    /// Query to search for in names and usernames
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String?
                    /// Number of users to skip.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// The maximum number of users be returned; up to 200.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - filter: Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///   - query: Query to search for in names and usernames
                    ///   - offset: Number of users to skip.
                    ///   - limit: The maximum number of users be returned; up to 200.
                    public init(
                        chat_id: Operations.post_sol_getChatMembers.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        filter: Operations.post_sol_getChatMembers.Input.Body.urlEncodedFormPayload.filterPayload? = nil,
                        query: Swift.String? = nil,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.filter = filter
                        self.query = query
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case filter
                        case query
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChatMembers.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/filter`.
                    public struct filterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload.filterPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/query`.
                    public struct queryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload.queryPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/offset`.
                    public struct offsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload.offsetPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/limit`.
                    public struct limitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `limitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload.limitPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChatMembers.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMembers.Input.Body.jsonPayload.chat_idPayload
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case members = "members"
                        case banned = "banned"
                        case restricted = "restricted"
                        case bots = "bots"
                        case admins = "admins"
                    }
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/filter`.
                    public var filter: Operations.post_sol_getChatMembers.Input.Body.jsonPayload.filterPayload?
                    /// Query to search for in names and usernames
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/query`.
                    public var query: Swift.String?
                    /// Number of users to skip.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// The maximum number of users be returned; up to 200.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - filter: Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///   - query: Query to search for in names and usernames
                    ///   - offset: Number of users to skip.
                    ///   - limit: The maximum number of users be returned; up to 200.
                    public init(
                        chat_id: Operations.post_sol_getChatMembers.Input.Body.jsonPayload.chat_idPayload,
                        filter: Operations.post_sol_getChatMembers.Input.Body.jsonPayload.filterPayload? = nil,
                        query: Swift.String? = nil,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.filter = filter
                        self.query = query
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case filter
                        case query
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChatMembers.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChatMembers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChatMembers.Input.Headers = .init(),
                body: Operations.post_sol_getChatMembers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.ChatMember]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.ChatMember]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChatMembers.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChatMembers.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMembers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMembers.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembers/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChatMembers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChatMembers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMembers.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMembers.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembers/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChatMembers.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChatMembers.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    public enum post_sol_deleteMessages {
        public static let id: Swift.String = "post/deleteMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteMessages.Input.Headers
            /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_deleteMessages.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/message_ids`.
                    public var message_ids: [Swift.Int]?
                    /// First message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/start`.
                    public var start: Swift.Int?
                    /// Last message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/end`.
                    public var end: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_ids:
                    ///   - start: First message id to delete
                    ///   - end: Last message id to delete
                    public init(
                        chat_id: Operations.post_sol_deleteMessages.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_ids: [Swift.Int]? = nil,
                        start: Swift.Int? = nil,
                        end: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_ids = message_ids
                        self.start = start
                        self.end = end
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_ids
                        case start
                        case end
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteMessages.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessages.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/message_ids`.
                    public struct message_idsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_ids(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessages.Input.Body.multipartFormPayload.message_idsPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/start`.
                    public struct startPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `startPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case start(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessages.Input.Body.multipartFormPayload.startPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/end`.
                    public struct endPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `endPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case end(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessages.Input.Body.multipartFormPayload.endPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteMessages.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_deleteMessages.Input.Body.jsonPayload.chat_idPayload
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/message_ids`.
                    public var message_ids: [Swift.Int]?
                    /// First message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/start`.
                    public var start: Swift.Int?
                    /// Last message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/end`.
                    public var end: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_ids:
                    ///   - start: First message id to delete
                    ///   - end: Last message id to delete
                    public init(
                        chat_id: Operations.post_sol_deleteMessages.Input.Body.jsonPayload.chat_idPayload,
                        message_ids: [Swift.Int]? = nil,
                        start: Swift.Int? = nil,
                        end: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_ids = message_ids
                        self.start = start
                        self.end = end
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_ids
                        case start
                        case end
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteMessages.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteMessages.Input.Headers = .init(),
                body: Operations.post_sol_deleteMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteMessages.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteMessages.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Request was successful, the result is returned.
            ///
            /// - Remark: Generated from `#/paths//deleteMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    public enum post_sol_ping {
        public static let id: Swift.String = "post/ping"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_ping.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_ping.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_ping.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_ping.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json/result`.
                        public var result: Swift.Double
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Double
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_ping.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_ping.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_ping.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_ping.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//ping/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_ping.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_ping.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_ping.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_ping.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//ping/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_ping.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_ping.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    public enum post_sol_getChats {
        public static let id: Swift.String = "post/getChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChats.Input.Headers
            /// - Remark: Generated from `#/paths/getChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset_chat_id: Chat identifier to return chats from.
                    public init(offset_chat_id: Swift.Int? = nil) {
                        self.offset_chat_id = offset_chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset_chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChats.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct offset_chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offset_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset_chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChats.Input.Body.multipartFormPayload.offset_chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChats.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/json/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset_chat_id: Chat identifier to return chats from.
                    public init(offset_chat_id: Swift.Int? = nil) {
                        self.offset_chat_id = offset_chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset_chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChats.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChats.Input.Headers = .init(),
                body: Operations.post_sol_getChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    public enum post_sol_getCommonChats {
        public static let id: Swift.String = "post/getCommonChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getCommonChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getCommonChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getCommonChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getCommonChats.Input.Headers
            /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Unique identifier of the target user
                    ///   - offset_chat_id: Chat identifier to return chats from.
                    public init(
                        user_id: Swift.Int,
                        offset_chat_id: Swift.Int? = nil
                    ) {
                        self.user_id = user_id
                        self.offset_chat_id = offset_chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case offset_chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getCommonChats.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getCommonChats.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct offset_chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offset_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset_chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getCommonChats.Input.Body.multipartFormPayload.offset_chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getCommonChats.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Unique identifier of the target user
                    ///   - offset_chat_id: Chat identifier to return chats from.
                    public init(
                        user_id: Swift.Int,
                        offset_chat_id: Swift.Int? = nil
                    ) {
                        self.user_id = user_id
                        self.offset_chat_id = offset_chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case offset_chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getCommonChats.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getCommonChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getCommonChats.Input.Headers = .init(),
                body: Operations.post_sol_getCommonChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getCommonChats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getCommonChats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getCommonChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getCommonChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCommonChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getCommonChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getCommonChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getCommonChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getCommonChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCommonChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getCommonChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getCommonChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    public enum post_sol_getInactiveChats {
        public static let id: Swift.String = "post/getInactiveChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getInactiveChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getInactiveChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getInactiveChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getInactiveChats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_getInactiveChats.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getInactiveChats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getInactiveChats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getInactiveChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getInactiveChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getInactiveChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getInactiveChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getInactiveChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getInactiveChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getInactiveChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getInactiveChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getInactiveChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getInactiveChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    public enum post_sol_searchPublicChats {
        public static let id: Swift.String = "post/searchPublicChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchPublicChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchPublicChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchPublicChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_searchPublicChats.Input.Headers
            /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    public init(query: Swift.String) {
                        self.query = query
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                    }
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_searchPublicChats.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/multipartForm/query`.
                    public struct queryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchPublicChats.Input.Body.multipartFormPayload.queryPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_searchPublicChats.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    public init(query: Swift.String) {
                        self.query = query
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                    }
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_searchPublicChats.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_searchPublicChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_searchPublicChats.Input.Headers = .init(),
                body: Operations.post_sol_searchPublicChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_searchPublicChats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_searchPublicChats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchPublicChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchPublicChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchPublicChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_searchPublicChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_searchPublicChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchPublicChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchPublicChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchPublicChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_searchPublicChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_searchPublicChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    public enum post_sol_setPollAnswer {
        public static let id: Swift.String = "post/setPollAnswer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setPollAnswer/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setPollAnswer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setPollAnswer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setPollAnswer.Input.Headers
            /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Identifier of the message containing the poll.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_idsPayload`.
                    public struct option_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `option_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_ids`.
                    public typealias option_idsPayload = [Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload.option_idsPayloadPayload]
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_ids`.
                    public var option_ids: Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload.option_idsPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the message containing the poll.
                    ///   - option_ids: 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    public init(
                        chat_id: Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int,
                        option_ids: Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload.option_idsPayload
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.option_ids = option_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case option_ids
                    }
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setPollAnswer.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids`.
                    public struct option_idsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload.option_idsPayload.bodyPayload
                        /// Creates a new `option_idsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload.option_idsPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case option_ids(OpenAPIRuntime.MultipartPart<Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload.option_idsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setPollAnswer.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setPollAnswer.Input.Body.jsonPayload.chat_idPayload
                    /// Identifier of the message containing the poll.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_idsPayload`.
                    public struct option_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `option_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_ids`.
                    public typealias option_idsPayload = [Operations.post_sol_setPollAnswer.Input.Body.jsonPayload.option_idsPayloadPayload]
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_ids`.
                    public var option_ids: Operations.post_sol_setPollAnswer.Input.Body.jsonPayload.option_idsPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the message containing the poll.
                    ///   - option_ids: 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    public init(
                        chat_id: Operations.post_sol_setPollAnswer.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int,
                        option_ids: Operations.post_sol_setPollAnswer.Input.Body.jsonPayload.option_idsPayload
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.option_ids = option_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case option_ids
                    }
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setPollAnswer.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setPollAnswer.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setPollAnswer.Input.Headers = .init(),
                body: Operations.post_sol_setPollAnswer.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setPollAnswer.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setPollAnswer.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setPollAnswer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setPollAnswer.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPollAnswer/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setPollAnswer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setPollAnswer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setPollAnswer.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setPollAnswer.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPollAnswer/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setPollAnswer.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setPollAnswer.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    public enum post_sol_joinChat {
        public static let id: Swift.String = "post/joinChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/joinChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_joinChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_joinChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_joinChat.Input.Headers
            /// - Remark: Generated from `#/paths/joinChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_joinChat.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/invite_link`.
                    public var invite_link: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - invite_link: Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    public init(
                        chat_id: Operations.post_sol_joinChat.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        invite_link: Swift.String? = nil
                    ) {
                        self.chat_id = chat_id
                        self.invite_link = invite_link
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case invite_link
                    }
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_joinChat.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_joinChat.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm/invite_link`.
                    public struct invite_linkPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `invite_linkPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case invite_link(OpenAPIRuntime.MultipartPart<Operations.post_sol_joinChat.Input.Body.multipartFormPayload.invite_linkPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_joinChat.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_joinChat.Input.Body.jsonPayload.chat_idPayload?
                    /// Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/invite_link`.
                    public var invite_link: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - invite_link: Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    public init(
                        chat_id: Operations.post_sol_joinChat.Input.Body.jsonPayload.chat_idPayload? = nil,
                        invite_link: Swift.String? = nil
                    ) {
                        self.chat_id = chat_id
                        self.invite_link = invite_link
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case invite_link
                    }
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_joinChat.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_joinChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_joinChat.Input.Headers = .init(),
                body: Operations.post_sol_joinChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_joinChat.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_joinChat.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_joinChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_joinChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//joinChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_joinChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_joinChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_joinChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_joinChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//joinChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_joinChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_joinChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    public enum post_sol_addChatMember {
        public static let id: Swift.String = "post/addChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_addChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_addChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    public init(
                        chat_id: Operations.post_sol_addChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                    }
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_addChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_addChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_addChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_addChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_addChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    public init(
                        chat_id: Operations.post_sol_addChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                    }
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_addChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_addChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_addChatMember.Input.Headers = .init(),
                body: Operations.post_sol_addChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_addChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_addChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_addChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_addChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_addChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_addChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    public enum post_sol_reportChat {
        public static let id: Swift.String = "post/reportChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reportChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_reportChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_reportChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_reportChat.Input.Headers
            /// - Remark: Generated from `#/paths/reportChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/reason`.
                    public var reason: Swift.String
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_idsPayload`.
                    public struct message_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `message_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_ids`.
                    public typealias message_idsPayload = [Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload.message_idsPayloadPayload]
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_ids`.
                    public var message_ids: Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload.message_idsPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - reason: The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///   - message_ids: Identifiers of reported messages.
                    public init(
                        chat_id: Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        reason: Swift.String,
                        message_ids: Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload.message_idsPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.reason = reason
                        self.message_ids = message_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case reason
                        case message_ids
                    }
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_reportChat.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_reportChat.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/reason`.
                    public struct reasonPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reasonPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reason(OpenAPIRuntime.MultipartPart<Operations.post_sol_reportChat.Input.Body.multipartFormPayload.reasonPayload>)
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids`.
                    public struct message_idsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.post_sol_reportChat.Input.Body.multipartFormPayload.message_idsPayload.bodyPayload
                        /// Creates a new `message_idsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_reportChat.Input.Body.multipartFormPayload.message_idsPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case message_ids(OpenAPIRuntime.MultipartPart<Operations.post_sol_reportChat.Input.Body.multipartFormPayload.message_idsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_reportChat.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_reportChat.Input.Body.jsonPayload.chat_idPayload
                    /// The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/reason`.
                    public var reason: Swift.String
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_idsPayload`.
                    public struct message_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `message_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_ids`.
                    public typealias message_idsPayload = [Operations.post_sol_reportChat.Input.Body.jsonPayload.message_idsPayloadPayload]
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_ids`.
                    public var message_ids: Operations.post_sol_reportChat.Input.Body.jsonPayload.message_idsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - reason: The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///   - message_ids: Identifiers of reported messages.
                    public init(
                        chat_id: Operations.post_sol_reportChat.Input.Body.jsonPayload.chat_idPayload,
                        reason: Swift.String,
                        message_ids: Operations.post_sol_reportChat.Input.Body.jsonPayload.message_idsPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.reason = reason
                        self.message_ids = message_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case reason
                        case message_ids
                    }
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_reportChat.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_reportChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_reportChat.Input.Headers = .init(),
                body: Operations.post_sol_reportChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_reportChat.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_reportChat.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_reportChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_reportChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//reportChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_reportChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_reportChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_reportChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_reportChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//reportChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_reportChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_reportChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    public enum post_sol_createChat {
        public static let id: Swift.String = "post/createChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/createChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_createChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_createChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_createChat.Input.Headers
            /// - Remark: Generated from `#/paths/createChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Title of the new chat; 1-128 characters.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case group = "group"
                        case supergroup = "supergroup"
                        case channel = "channel"
                    }
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload._typePayload
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_idsPayload`.
                    public struct user_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `user_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_ids`.
                    public typealias user_idsPayload = [Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload.user_idsPayloadPayload]
                    /// May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_ids`.
                    public var user_ids: Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload.user_idsPayload?
                    /// Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Title of the new chat; 1-128 characters.
                    ///   - _type: Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///   - user_ids: May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///   - description: Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    public init(
                        title: Swift.String,
                        _type: Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload._typePayload,
                        user_ids: Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload.user_idsPayload? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.title = title
                        self._type = _type
                        self.user_ids = user_ids
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case _type = "type"
                        case user_ids
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_createChat.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_createChat.Input.Body.multipartFormPayload.titlePayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/type`.
                    public struct _typePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.post_sol_createChat.Input.Body.multipartFormPayload._typePayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids`.
                    public struct user_idsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.post_sol_createChat.Input.Body.multipartFormPayload.user_idsPayload.bodyPayload
                        /// Creates a new `user_idsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_createChat.Input.Body.multipartFormPayload.user_idsPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case user_ids(OpenAPIRuntime.MultipartPart<Operations.post_sol_createChat.Input.Body.multipartFormPayload.user_idsPayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/description`.
                    public struct descriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `descriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.post_sol_createChat.Input.Body.multipartFormPayload.descriptionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_createChat.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Title of the new chat; 1-128 characters.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case group = "group"
                        case supergroup = "supergroup"
                        case channel = "channel"
                    }
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/type`.
                    public var _type: Operations.post_sol_createChat.Input.Body.jsonPayload._typePayload
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_idsPayload`.
                    public struct user_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `user_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_ids`.
                    public typealias user_idsPayload = [Operations.post_sol_createChat.Input.Body.jsonPayload.user_idsPayloadPayload]
                    /// Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_ids`.
                    public var user_ids: Operations.post_sol_createChat.Input.Body.jsonPayload.user_idsPayload?
                    /// Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Title of the new chat; 1-128 characters.
                    ///   - _type: Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///   - user_ids: Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///   - description: Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    public init(
                        title: Swift.String,
                        _type: Operations.post_sol_createChat.Input.Body.jsonPayload._typePayload,
                        user_ids: Operations.post_sol_createChat.Input.Body.jsonPayload.user_idsPayload? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.title = title
                        self._type = _type
                        self.user_ids = user_ids
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case _type = "type"
                        case user_ids
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_createChat.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_createChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_createChat.Input.Headers = .init(),
                body: Operations.post_sol_createChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Chat
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Chat
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_createChat.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_createChat.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_createChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_createChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_createChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_createChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_createChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_createChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_createChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_createChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    public enum post_sol_searchMessages {
        public static let id: Swift.String = "post/searchMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_searchMessages.Input.Headers
            /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// Filter for chat type in search result. Must be one of `private`, `group` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/chat_filter`.
                    public var chat_filter: Swift.String?
                    /// The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_date`.
                    public var offset_date: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_message_id`.
                    public var offset_message_id: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case chat_photo = "chat_photo"
                        case document = "document"
                        case photo = "photo"
                        case photo_and_video = "photo_and_video"
                        case url = "url"
                        case video = "video"
                        case video_note = "video_note"
                        case voice_and_video_note = "voice_and_video_note"
                        case voice_note = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.post_sol_searchMessages.Input.Body.urlEncodedFormPayload.filterPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    ///   - chat_filter: Filter for chat type in search result. Must be one of `private`, `group` or `channel`
                    ///   - offset_date: The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///   - offset_chat_id: The chat identifier of the last found message, or 0 for the first request.
                    ///   - offset_message_id: The chat identifier of the last found message, or 0 for the first request.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        query: Swift.String,
                        chat_filter: Swift.String? = nil,
                        offset_date: Swift.Int? = nil,
                        offset_chat_id: Swift.Int? = nil,
                        offset_message_id: Swift.Int? = nil,
                        filter: Operations.post_sol_searchMessages.Input.Body.urlEncodedFormPayload.filterPayload? = nil
                    ) {
                        self.query = query
                        self.chat_filter = chat_filter
                        self.offset_date = offset_date
                        self.offset_chat_id = offset_chat_id
                        self.offset_message_id = offset_message_id
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case chat_filter
                        case offset_date
                        case offset_chat_id
                        case offset_message_id
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_searchMessages.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/query`.
                    public struct queryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.queryPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/only_in_channels`.
                    public struct only_in_channelsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `only_in_channelsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case only_in_channels(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.only_in_channelsPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_date`.
                    public struct offset_datePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offset_datePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset_date(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.offset_datePayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct offset_chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offset_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset_chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.offset_chat_idPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_message_id`.
                    public struct offset_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offset_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.offset_message_idPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/filter`.
                    public struct filterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload.filterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_searchMessages.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Search for messages only in channels
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/only_in_channels`.
                    public var only_in_channels: Swift.Bool?
                    /// The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_date`.
                    public var offset_date: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_chat_id`.
                    public var offset_chat_id: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_message_id`.
                    public var offset_message_id: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case chat_photo = "chat_photo"
                        case document = "document"
                        case photo = "photo"
                        case photo_and_video = "photo_and_video"
                        case url = "url"
                        case video = "video"
                        case video_note = "video_note"
                        case voice_and_video_note = "voice_and_video_note"
                        case voice_note = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/filter`.
                    public var filter: Operations.post_sol_searchMessages.Input.Body.jsonPayload.filterPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    ///   - only_in_channels: Search for messages only in channels
                    ///   - offset_date: The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///   - offset_chat_id: The chat identifier of the last found message, or 0 for the first request.
                    ///   - offset_message_id: The chat identifier of the last found message, or 0 for the first request.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        query: Swift.String,
                        only_in_channels: Swift.Bool? = nil,
                        offset_date: Swift.Int? = nil,
                        offset_chat_id: Swift.Int? = nil,
                        offset_message_id: Swift.Int? = nil,
                        filter: Operations.post_sol_searchMessages.Input.Body.jsonPayload.filterPayload? = nil
                    ) {
                        self.query = query
                        self.only_in_channels = only_in_channels
                        self.offset_date = offset_date
                        self.offset_chat_id = offset_chat_id
                        self.offset_message_id = offset_message_id
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case only_in_channels
                        case offset_date
                        case offset_chat_id
                        case offset_message_id
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_searchMessages.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_searchMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_searchMessages.Input.Headers = .init(),
                body: Operations.post_sol_searchMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_searchMessages.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_searchMessages.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_searchMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_searchMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_searchMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_searchMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    public enum post_sol_searchChatMessages {
        public static let id: Swift.String = "post/searchChatMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchChatMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchChatMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_searchChatMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_searchChatMessages.Input.Headers
            /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_searchChatMessages.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// If set, only messages sent by the specified sender will be returned
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/from_user_id`.
                    public var from_user_id: Swift.Int?
                    /// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/from_message_id`.
                    public var from_message_id: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case call = "call"
                        case chat_photo = "chat_photo"
                        case document = "document"
                        case failed_to_send = "failed_to_send"
                        case mention = "mention"
                        case missed_call = "missed_call"
                        case photo = "photo"
                        case photo_and_video = "photo_and_video"
                        case pinnedunread_mention = "pinnedunread_mention"
                        case url = "url"
                        case video = "video"
                        case video_note = "video_note"
                        case voice_and_video_note = "voice_and_video_note"
                        case voice_note = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.post_sol_searchChatMessages.Input.Body.urlEncodedFormPayload.filterPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - query: Query to search for.
                    ///   - from_user_id: If set, only messages sent by the specified sender will be returned
                    ///   - from_message_id: Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        chat_id: Operations.post_sol_searchChatMessages.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        query: Swift.String,
                        from_user_id: Swift.Int? = nil,
                        from_message_id: Swift.Int? = nil,
                        filter: Operations.post_sol_searchChatMessages.Input.Body.urlEncodedFormPayload.filterPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.query = query
                        self.from_user_id = from_user_id
                        self.from_message_id = from_message_id
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case query
                        case from_user_id
                        case from_message_id
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_searchChatMessages.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/query`.
                    public struct queryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload.queryPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/from_user_id`.
                    public struct from_user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `from_user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case from_user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload.from_user_idPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/from_message_id`.
                    public struct from_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `from_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case from_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload.from_message_idPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/filter`.
                    public struct filterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload.filterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_searchChatMessages.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_searchChatMessages.Input.Body.jsonPayload.chat_idPayload
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// If set, only messages sent by the specified sender will be returned
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/from_user_id`.
                    public var from_user_id: Swift.Int?
                    /// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/from_message_id`.
                    public var from_message_id: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/filter`.
                    @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case call = "call"
                        case chat_photo = "chat_photo"
                        case document = "document"
                        case failed_to_send = "failed_to_send"
                        case mention = "mention"
                        case missed_call = "missed_call"
                        case photo = "photo"
                        case photo_and_video = "photo_and_video"
                        case pinnedunread_mention = "pinnedunread_mention"
                        case url = "url"
                        case video = "video"
                        case video_note = "video_note"
                        case voice_and_video_note = "voice_and_video_note"
                        case voice_note = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/filter`.
                    public var filter: Operations.post_sol_searchChatMessages.Input.Body.jsonPayload.filterPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - query: Query to search for.
                    ///   - from_user_id: If set, only messages sent by the specified sender will be returned
                    ///   - from_message_id: Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        chat_id: Operations.post_sol_searchChatMessages.Input.Body.jsonPayload.chat_idPayload,
                        query: Swift.String,
                        from_user_id: Swift.Int? = nil,
                        from_message_id: Swift.Int? = nil,
                        filter: Operations.post_sol_searchChatMessages.Input.Body.jsonPayload.filterPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.query = query
                        self.from_user_id = from_user_id
                        self.from_message_id = from_message_id
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case query
                        case from_user_id
                        case from_message_id
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_searchChatMessages.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_searchChatMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_searchChatMessages.Input.Headers = .init(),
                body: Operations.post_sol_searchChatMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_searchChatMessages.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_searchChatMessages.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchChatMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchChatMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchChatMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_searchChatMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_searchChatMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_searchChatMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_searchChatMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchChatMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_searchChatMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_searchChatMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    public enum post_sol_getCallbackQueryAnswer {
        public static let id: Swift.String = "post/getCallbackQueryAnswer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getCallbackQueryAnswer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getCallbackQueryAnswer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getCallbackQueryAnswer.Input.Headers
            /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getCallbackQueryAnswer.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Data that was attached to the callback button.
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/callback_data`.
                    public var callback_data: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - callback_data: Data that was attached to the callback button.
                    public init(
                        chat_id: Operations.post_sol_getCallbackQueryAnswer.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int,
                        callback_data: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.callback_data = callback_data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case callback_data
                    }
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getCallbackQueryAnswer.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getCallbackQueryAnswer.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getCallbackQueryAnswer.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/callback_data`.
                    public struct callback_dataPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `callback_dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case callback_data(OpenAPIRuntime.MultipartPart<Operations.post_sol_getCallbackQueryAnswer.Input.Body.multipartFormPayload.callback_dataPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getCallbackQueryAnswer.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getCallbackQueryAnswer.Input.Body.jsonPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Data that was attached to the callback button.
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/callback_data`.
                    public var callback_data: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - callback_data: Data that was attached to the callback button.
                    public init(
                        chat_id: Operations.post_sol_getCallbackQueryAnswer.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int,
                        callback_data: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.callback_data = callback_data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case callback_data
                    }
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getCallbackQueryAnswer.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getCallbackQueryAnswer.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getCallbackQueryAnswer.Input.Headers = .init(),
                body: Operations.post_sol_getCallbackQueryAnswer.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.CallbackQueryAnswer
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.CallbackQueryAnswer
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getCallbackQueryAnswer.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getCallbackQueryAnswer.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getCallbackQueryAnswer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getCallbackQueryAnswer.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getCallbackQueryAnswer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getCallbackQueryAnswer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getCallbackQueryAnswer.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getCallbackQueryAnswer.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getCallbackQueryAnswer.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getCallbackQueryAnswer.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    public enum post_sol_deleteChatHistory {
        public static let id: Swift.String = "post/deleteChatHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatHistory/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteChatHistory.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatHistory.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Pass true to try to delete chat history for all users.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/for_everyone`.
                    public var for_everyone: Swift.Bool?
                    /// Pass true if the chat should be removed from the chat list.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/remove_from_chat_list`.
                    public var remove_from_chat_list: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - for_everyone: Pass true to try to delete chat history for all users.
                    ///   - remove_from_chat_list: Pass true if the chat should be removed from the chat list.
                    public init(
                        chat_id: Operations.post_sol_deleteChatHistory.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        for_everyone: Swift.Bool? = nil,
                        remove_from_chat_list: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.for_everyone = for_everyone
                        self.remove_from_chat_list = remove_from_chat_list
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case for_everyone
                        case remove_from_chat_list
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteChatHistory.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteChatHistory.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/for_everyone`.
                    public struct for_everyonePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `for_everyonePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case for_everyone(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteChatHistory.Input.Body.multipartFormPayload.for_everyonePayload>)
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/remove_from_chat_list`.
                    public struct remove_from_chat_listPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `remove_from_chat_listPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case remove_from_chat_list(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteChatHistory.Input.Body.multipartFormPayload.remove_from_chat_listPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteChatHistory.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatHistory.Input.Body.jsonPayload.chat_idPayload
                    /// Pass true to try to delete chat history for all users.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/for_everyone`.
                    public var for_everyone: Swift.Bool?
                    /// Pass true if the chat should be removed from the chat list.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/remove_from_chat_list`.
                    public var remove_from_chat_list: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - for_everyone: Pass true to try to delete chat history for all users.
                    ///   - remove_from_chat_list: Pass true if the chat should be removed from the chat list.
                    public init(
                        chat_id: Operations.post_sol_deleteChatHistory.Input.Body.jsonPayload.chat_idPayload,
                        for_everyone: Swift.Bool? = nil,
                        remove_from_chat_list: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.for_everyone = for_everyone
                        self.remove_from_chat_list = remove_from_chat_list
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case for_everyone
                        case remove_from_chat_list
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteChatHistory.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteChatHistory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteChatHistory.Input.Headers = .init(),
                body: Operations.post_sol_deleteChatHistory.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteChatHistory.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteChatHistory.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatHistory.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatHistory/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteChatHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteChatHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatHistory.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatHistory.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatHistory/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteChatHistory.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteChatHistory.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    public enum post_sol_getScheduledMessages {
        public static let id: Swift.String = "post/getScheduledMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getScheduledMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getScheduledMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getScheduledMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getScheduledMessages.Input.Headers
            /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getScheduledMessages.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getScheduledMessages.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getScheduledMessages.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getScheduledMessages.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getScheduledMessages.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getScheduledMessages.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getScheduledMessages.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getScheduledMessages.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getScheduledMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getScheduledMessages.Input.Headers = .init(),
                body: Operations.post_sol_getScheduledMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getScheduledMessages.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getScheduledMessages.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getScheduledMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getScheduledMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getScheduledMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getScheduledMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getScheduledMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getScheduledMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getScheduledMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getScheduledMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getScheduledMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getScheduledMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    public enum post_sol_editMessageScheduling {
        public static let id: Swift.String = "post/editMessageScheduling"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageScheduling/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageScheduling.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageScheduling.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageScheduling.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageScheduling.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*. Message IDs for scheduled messages are negative.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_editMessageScheduling.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*. Message IDs for scheduled messages are negative.
                    ///   - send_at: Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_editMessageScheduling.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int,
                        send_at: Operations.post_sol_editMessageScheduling.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_editMessageScheduling.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageScheduling.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageScheduling.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageScheduling.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageScheduling.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageScheduling.Input.Body.jsonPayload.chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_editMessageScheduling.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - send_at: Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_editMessageScheduling.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int,
                        send_at: Operations.post_sol_editMessageScheduling.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_editMessageScheduling.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_editMessageScheduling.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageScheduling.Input.Headers = .init(),
                body: Operations.post_sol_editMessageScheduling.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageScheduling.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageScheduling.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageScheduling.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageScheduling.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageScheduling/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageScheduling.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageScheduling.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageScheduling.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageScheduling.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageScheduling/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageScheduling.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageScheduling.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    public enum post_sol_getProxies {
        public static let id: Swift.String = "post/getProxies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getProxies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getProxies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getProxies.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getProxies.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_getProxies.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Proxy]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Proxy]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getProxies.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getProxies.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getProxies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getProxies.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getProxies/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getProxies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getProxies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getProxies/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getProxies.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getProxies.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getProxies/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getProxies.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getProxies.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    public enum post_sol_addProxy {
        public static let id: Swift.String = "post/addProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_addProxy.Input.Headers
            /// - Remark: Generated from `#/paths/addProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Server hostname or IP address to reach the proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/server`.
                    public var server: Swift.String
                    /// TCP port where the server is listening for incomming connections.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/port`.
                    public var port: Swift.Int
                    /// Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Swift.String
                    /// Username used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/username`.
                    public var username: Swift.String?
                    /// Password used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/password`.
                    public var password: Swift.String?
                    /// Secret used to authenticate against an MTProto proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/secret`.
                    public var secret: Swift.String?
                    /// Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/http_only`.
                    public var http_only: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - server: Server hostname or IP address to reach the proxy server.
                    ///   - port: TCP port where the server is listening for incomming connections.
                    ///   - _type: Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///   - username: Username used to authenticate against a Socks5/Http proxy.
                    ///   - password: Password used to authenticate against a Socks5/Http proxy.
                    ///   - secret: Secret used to authenticate against an MTProto proxy.
                    ///   - http_only: Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    public init(
                        server: Swift.String,
                        port: Swift.Int,
                        _type: Swift.String,
                        username: Swift.String? = nil,
                        password: Swift.String? = nil,
                        secret: Swift.String? = nil,
                        http_only: Swift.Bool? = nil
                    ) {
                        self.server = server
                        self.port = port
                        self._type = _type
                        self.username = username
                        self.password = password
                        self.secret = secret
                        self.http_only = http_only
                    }
                    public enum CodingKeys: String, CodingKey {
                        case server
                        case port
                        case _type = "type"
                        case username
                        case password
                        case secret
                        case http_only
                    }
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_addProxy.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/server`.
                    public struct serverPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `serverPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case server(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.serverPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/port`.
                    public struct portPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `portPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case port(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.portPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/type`.
                    public struct _typePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload._typePayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/username`.
                    public struct usernamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `usernamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case username(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.usernamePayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/password`.
                    public struct passwordPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `passwordPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case password(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.passwordPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/secret`.
                    public struct secretPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `secretPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case secret(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.secretPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/http_only`.
                    public struct http_onlyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `http_onlyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case http_only(OpenAPIRuntime.MultipartPart<Operations.post_sol_addProxy.Input.Body.multipartFormPayload.http_onlyPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_addProxy.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Server hostname or IP address to reach the proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/server`.
                    public var server: Swift.String
                    /// TCP port where the server is listening for incomming connections.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/port`.
                    public var port: Swift.Int
                    /// Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/type`.
                    public var _type: Swift.String
                    /// Username used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/username`.
                    public var username: Swift.String?
                    /// Password used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// Secret used to authenticate against an MTProto proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/secret`.
                    public var secret: Swift.String?
                    /// Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/http_only`.
                    public var http_only: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - server: Server hostname or IP address to reach the proxy server.
                    ///   - port: TCP port where the server is listening for incomming connections.
                    ///   - _type: Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///   - username: Username used to authenticate against a Socks5/Http proxy.
                    ///   - password: Password used to authenticate against a Socks5/Http proxy.
                    ///   - secret: Secret used to authenticate against an MTProto proxy.
                    ///   - http_only: Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    public init(
                        server: Swift.String,
                        port: Swift.Int,
                        _type: Swift.String,
                        username: Swift.String? = nil,
                        password: Swift.String? = nil,
                        secret: Swift.String? = nil,
                        http_only: Swift.Bool? = nil
                    ) {
                        self.server = server
                        self.port = port
                        self._type = _type
                        self.username = username
                        self.password = password
                        self.secret = secret
                        self.http_only = http_only
                    }
                    public enum CodingKeys: String, CodingKey {
                        case server
                        case port
                        case _type = "type"
                        case username
                        case password
                        case secret
                        case http_only
                    }
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_addProxy.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_addProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_addProxy.Input.Headers = .init(),
                body: Operations.post_sol_addProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Proxy
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Proxy
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_addProxy.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_addProxy.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_addProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_addProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_addProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_addProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    public enum post_sol_deleteProxy {
        public static let id: Swift.String = "post/deleteProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteProxy.Input.Headers
            /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteProxy.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct proxy_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `proxy_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxy_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteProxy.Input.Body.multipartFormPayload.proxy_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteProxy.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/json/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteProxy.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteProxy.Input.Headers = .init(),
                body: Operations.post_sol_deleteProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteProxy.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteProxy.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    public enum post_sol_enableProxy {
        public static let id: Swift.String = "post/enableProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/enableProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_enableProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_enableProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_enableProxy.Input.Headers
            /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_enableProxy.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct proxy_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `proxy_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxy_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_enableProxy.Input.Body.multipartFormPayload.proxy_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_enableProxy.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/json/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_enableProxy.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_enableProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_enableProxy.Input.Headers = .init(),
                body: Operations.post_sol_enableProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_enableProxy.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_enableProxy.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_enableProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_enableProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//enableProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_enableProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_enableProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_enableProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_enableProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//enableProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_enableProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_enableProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    public enum post_sol_disableProxy {
        public static let id: Swift.String = "post/disableProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/disableProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_disableProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_disableProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_disableProxy.Input.Headers
            /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_disableProxy.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct proxy_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `proxy_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxy_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_disableProxy.Input.Body.multipartFormPayload.proxy_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_disableProxy.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/json/proxy_id`.
                    public var proxy_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxy_id: The id that uniquely identifies that proxy server.
                    public init(proxy_id: Swift.Int) {
                        self.proxy_id = proxy_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxy_id
                    }
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_disableProxy.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_disableProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_disableProxy.Input.Headers = .init(),
                body: Operations.post_sol_disableProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_disableProxy.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_disableProxy.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_disableProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_disableProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//disableProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_disableProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_disableProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_disableProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_disableProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//disableProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_disableProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_disableProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    public enum post_sol_getUpdates {
        public static let id: Swift.String = "post/getUpdates"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getUpdates/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getUpdates.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getUpdates.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getUpdates.Input.Headers
            /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/timeout`.
                    public var timeout: Swift.Int?
                    /// A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    ///
                    /// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/allowed_updates`.
                    public var allowed_updates: [Swift.String]?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///   - limit: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///   - timeout: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///   - allowed_updates: A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    public init(
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil,
                        timeout: Swift.Int? = nil,
                        allowed_updates: [Swift.String]? = nil
                    ) {
                        self.offset = offset
                        self.limit = limit
                        self.timeout = timeout
                        self.allowed_updates = allowed_updates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset
                        case limit
                        case timeout
                        case allowed_updates
                    }
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getUpdates.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/offset`.
                    public struct offsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUpdates.Input.Body.multipartFormPayload.offsetPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/limit`.
                    public struct limitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `limitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUpdates.Input.Body.multipartFormPayload.limitPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/timeout`.
                    public struct timeoutPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `timeoutPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case timeout(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUpdates.Input.Body.multipartFormPayload.timeoutPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/allowed_updates`.
                    public struct allowed_updatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allowed_updatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowed_updates(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUpdates.Input.Body.multipartFormPayload.allowed_updatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getUpdates.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/timeout`.
                    public var timeout: Swift.Int?
                    /// A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    ///
                    /// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/allowed_updates`.
                    public var allowed_updates: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///   - limit: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///   - timeout: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///   - allowed_updates: A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    public init(
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil,
                        timeout: Swift.Int? = nil,
                        allowed_updates: [Swift.String]? = nil
                    ) {
                        self.offset = offset
                        self.limit = limit
                        self.timeout = timeout
                        self.allowed_updates = allowed_updates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset
                        case limit
                        case timeout
                        case allowed_updates
                    }
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getUpdates.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getUpdates.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getUpdates.Input.Headers = .init(),
                body: Operations.post_sol_getUpdates.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Update]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Update]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getUpdates.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getUpdates.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getUpdates.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getUpdates.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUpdates/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getUpdates.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getUpdates.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getUpdates.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getUpdates.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUpdates/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getUpdates.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getUpdates.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    public enum post_sol_setWebhook {
        public static let id: Swift.String = "post/setWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setWebhook/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/url`.
                    public struct urlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `urlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case url(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.urlPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/certificate`.
                    public struct certificatePayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `certificatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case certificate(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.certificatePayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/ip_address`.
                    public struct ip_addressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ip_addressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ip_address(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.ip_addressPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/max_connections`.
                    public struct max_connectionsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `max_connectionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case max_connections(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.max_connectionsPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/allowed_updates`.
                    public struct allowed_updatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allowed_updatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowed_updates(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.allowed_updatesPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/drop_pending_updates`.
                    public struct drop_pending_updatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `drop_pending_updatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case drop_pending_updates(OpenAPIRuntime.MultipartPart<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload.drop_pending_updatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setWebhook.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_setWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setWebhook.Input.Headers = .init(),
                body: Operations.post_sol_setWebhook.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setWebhook.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setWebhook.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setWebhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setWebhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setWebhook/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setWebhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setWebhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setWebhook.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setWebhook.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setWebhook/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setWebhook.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setWebhook.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    public enum post_sol_deleteWebhook {
        public static let id: Swift.String = "post/deleteWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteWebhook/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Pass *True* to drop all pending updates
                    ///
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/urlEncodedForm/drop_pending_updates`.
                    public var drop_pending_updates: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - drop_pending_updates: Pass *True* to drop all pending updates
                    public init(drop_pending_updates: Swift.Bool? = nil) {
                        self.drop_pending_updates = drop_pending_updates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case drop_pending_updates
                    }
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteWebhook.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/multipartForm/drop_pending_updates`.
                    public struct drop_pending_updatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `drop_pending_updatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case drop_pending_updates(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteWebhook.Input.Body.multipartFormPayload.drop_pending_updatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteWebhook.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Pass *True* to drop all pending updates
                    ///
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/json/drop_pending_updates`.
                    public var drop_pending_updates: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - drop_pending_updates: Pass *True* to drop all pending updates
                    public init(drop_pending_updates: Swift.Bool? = nil) {
                        self.drop_pending_updates = drop_pending_updates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case drop_pending_updates
                    }
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteWebhook.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteWebhook.Input.Headers = .init(),
                body: Operations.post_sol_deleteWebhook.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteWebhook.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteWebhook.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteWebhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteWebhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteWebhook/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteWebhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteWebhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteWebhook.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteWebhook.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteWebhook/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteWebhook.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteWebhook.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    public enum post_sol_getWebhookInfo {
        public static let id: Swift.String = "post/getWebhookInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getWebhookInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getWebhookInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getWebhookInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getWebhookInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_getWebhookInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.WebhookInfo
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.WebhookInfo
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getWebhookInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getWebhookInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getWebhookInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getWebhookInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getWebhookInfo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getWebhookInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getWebhookInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getWebhookInfo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getWebhookInfo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getWebhookInfo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getWebhookInfo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getWebhookInfo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    public enum post_sol_getMe {
        public static let id: Swift.String = "post/getMe"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMe/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMe.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMe.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getMe.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_getMe.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.User
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.User
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getMe.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getMe.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMe.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMe.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMe/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getMe.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getMe.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMe/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMe.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMe.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMe/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getMe.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getMe.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    public enum post_sol_logOut {
        public static let id: Swift.String = "post/logOut"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/logOut/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_logOut.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_logOut.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_logOut.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_logOut.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_logOut.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_logOut.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_logOut.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_logOut.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//logOut/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_logOut.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_logOut.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/logOut/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_logOut.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_logOut.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//logOut/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_logOut.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_logOut.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    public enum post_sol_close {
        public static let id: Swift.String = "post/close"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/close/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_close.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_close.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_close.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_close.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/close/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/close/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_close.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_close.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_close.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_close.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//close/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_close.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_close.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/close/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/close/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_close.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_close.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//close/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_close.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_close.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    public enum post_sol_sendMessage {
        public static let id: Swift.String = "post/sendMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendMessage.Input.Headers
            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Text of the message to be sent, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/disable_web_page_preview`.
                    public var disable_web_page_preview: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - text: Text of the message to be sent, 1-4096 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disable_web_page_preview: Disables link previews for links in this message
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        text: Swift.String,
                        parse_mode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_web_page_preview: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.text = text
                        self.parse_mode = parse_mode
                        self.entities = entities
                        self.disable_web_page_preview = disable_web_page_preview
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case text
                        case parse_mode
                        case entities
                        case disable_web_page_preview
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/text`.
                    public struct textPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `textPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.textPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/entities`.
                    public struct entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/disable_web_page_preview`.
                    public struct disable_web_page_previewPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_web_page_previewPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_web_page_preview(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.disable_web_page_previewPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Text of the message to be sent, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/disable_web_page_preview`.
                    public var disable_web_page_preview: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendMessage.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_sendMessage.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - text: Text of the message to be sent, 1-4096 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disable_web_page_preview: Disables link previews for links in this message
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_sendMessage.Input.Body.jsonPayload.chat_idPayload,
                        text: Swift.String,
                        parse_mode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_web_page_preview: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendMessage.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendMessage.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.text = text
                        self.parse_mode = parse_mode
                        self.entities = entities
                        self.disable_web_page_preview = disable_web_page_preview
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case text
                        case parse_mode
                        case entities
                        case disable_web_page_preview
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendMessage.Input.Headers = .init(),
                body: Operations.post_sol_sendMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    public enum post_sol_forwardMessage {
        public static let id: Swift.String = "post/forwardMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/forwardMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_forwardMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_forwardMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_forwardMessage.Input.Headers
            /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public struct from_chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public var from_chat_id: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.from_chat_idPayload
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        from_chat_id: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.from_chat_idPayload,
                        disable_notification: Swift.Bool? = nil,
                        message_id: Swift.Int,
                        send_at: Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.from_chat_id = from_chat_id
                        self.disable_notification = disable_notification
                        self.message_id = message_id
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case from_chat_id
                        case disable_notification
                        case message_id
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_forwardMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/from_chat_id`.
                    public struct from_chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case from_chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload.from_chat_idPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_forwardMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id`.
                    public struct from_chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id`.
                    public var from_chat_id: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.from_chat_idPayload
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.chat_idPayload,
                        from_chat_id: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.from_chat_idPayload,
                        disable_notification: Swift.Bool? = nil,
                        message_id: Swift.Int,
                        send_at: Operations.post_sol_forwardMessage.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.from_chat_id = from_chat_id
                        self.disable_notification = disable_notification
                        self.message_id = message_id
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case from_chat_id
                        case disable_notification
                        case message_id
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_forwardMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_forwardMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_forwardMessage.Input.Headers = .init(),
                body: Operations.post_sol_forwardMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_forwardMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_forwardMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_forwardMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_forwardMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//forwardMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_forwardMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_forwardMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_forwardMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_forwardMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//forwardMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_forwardMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_forwardMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    public enum post_sol_copyMessage {
        public static let id: Swift.String = "post/copyMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/copyMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_copyMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_copyMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_copyMessage.Input.Headers
            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public struct from_chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public var from_chat_id: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.from_chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/caption_entities`.
                    public var caption_entities: [Components.Schemas.MessageEntity]?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - caption: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///   - parse_mode: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - caption_entities: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        from_chat_id: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.from_chat_idPayload,
                        message_id: Swift.Int,
                        caption: Swift.String? = nil,
                        parse_mode: Swift.String? = nil,
                        caption_entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.from_chat_id = from_chat_id
                        self.message_id = message_id
                        self.caption = caption
                        self.parse_mode = parse_mode
                        self.caption_entities = caption_entities
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case from_chat_id
                        case message_id
                        case caption
                        case parse_mode
                        case caption_entities
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_copyMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/from_chat_id`.
                    public struct from_chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case from_chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.from_chat_idPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_copyMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_copyMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id`.
                    public struct from_chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `from_chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id`.
                    public var from_chat_id: Operations.post_sol_copyMessage.Input.Body.jsonPayload.from_chat_idPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/caption_entities`.
                    public var caption_entities: [Components.Schemas.MessageEntity]?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_copyMessage.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_copyMessage.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - message_id: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - caption: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///   - parse_mode: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - caption_entities: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chat_id: Operations.post_sol_copyMessage.Input.Body.jsonPayload.chat_idPayload,
                        from_chat_id: Operations.post_sol_copyMessage.Input.Body.jsonPayload.from_chat_idPayload,
                        message_id: Swift.Int,
                        caption: Swift.String? = nil,
                        parse_mode: Swift.String? = nil,
                        caption_entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_copyMessage.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_copyMessage.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.from_chat_id = from_chat_id
                        self.message_id = message_id
                        self.caption = caption
                        self.parse_mode = parse_mode
                        self.caption_entities = caption_entities
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case from_chat_id
                        case message_id
                        case caption
                        case parse_mode
                        case caption_entities
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_copyMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_copyMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_copyMessage.Input.Headers = .init(),
                body: Operations.post_sol_copyMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.MessageId
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.MessageId
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_copyMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_copyMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_copyMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_copyMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//copyMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_copyMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_copyMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_copyMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_copyMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//copyMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_copyMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_copyMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    public enum post_sol_sendPhoto {
        public static let id: Swift.String = "post/sendPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo`.
                    public struct photoPayload: Sendable, Hashable {
                        /// Photo to send. Pass a file\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.photoPayload.bodyPayload
                        /// Creates a new `photoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.photoPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case photo(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.photoPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendPhoto.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendPhoto.Input.Headers = .init(),
                body: Operations.post_sol_sendPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendPhoto.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendPhoto.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    public enum post_sol_sendAudio {
        public static let id: Swift.String = "post/sendAudio"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendAudio/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendAudio.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendAudio.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendAudio.Input.Headers
            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio`.
                    public struct audioPayload: Sendable, Hashable {
                        /// Audio file to send. Pass a file\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.audioPayload.bodyPayload
                        /// Creates a new `audioPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.audioPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case audio(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.audioPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/duration`.
                    public struct durationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `durationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.durationPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/performer`.
                    public struct performerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `performerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case performer(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.performerPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.titlePayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.thumbPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendAudio.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendAudio.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendAudio.Input.Headers = .init(),
                body: Operations.post_sol_sendAudio.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendAudio.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendAudio.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendAudio.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendAudio.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAudio/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendAudio.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendAudio.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendAudio.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendAudio.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAudio/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendAudio.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendAudio.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    public enum post_sol_sendDocument {
        public static let id: Swift.String = "post/sendDocument"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendDocument/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendDocument.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendDocument.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendDocument.Input.Headers
            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document`.
                    public struct documentPayload: Sendable, Hashable {
                        /// File to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.documentPayload.bodyPayload
                        /// Creates a new `documentPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.documentPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case document(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.documentPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.thumbPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/disable_content_type_detection`.
                    public struct disable_content_type_detectionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_content_type_detectionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_content_type_detection(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.disable_content_type_detectionPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendDocument.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendDocument.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendDocument.Input.Headers = .init(),
                body: Operations.post_sol_sendDocument.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendDocument.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendDocument.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendDocument.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendDocument.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDocument/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendDocument.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendDocument.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendDocument.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendDocument.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDocument/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendDocument.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendDocument.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    public enum post_sol_sendVideo {
        public static let id: Swift.String = "post/sendVideo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVideo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVideo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVideo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendVideo.Input.Headers
            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video`.
                    public struct videoPayload: Sendable, Hashable {
                        /// Video to send. Pass a file\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.videoPayload.bodyPayload
                        /// Creates a new `videoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.videoPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case video(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.videoPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/duration`.
                    public struct durationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `durationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.durationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/width`.
                    public struct widthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `widthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case width(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.widthPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/height`.
                    public struct heightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `heightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case height(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.heightPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.thumbPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/supports_streaming`.
                    public struct supports_streamingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `supports_streamingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case supports_streaming(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.supports_streamingPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendVideo.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendVideo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendVideo.Input.Headers = .init(),
                body: Operations.post_sol_sendVideo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendVideo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendVideo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVideo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVideo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendVideo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendVideo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVideo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVideo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendVideo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendVideo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    public enum post_sol_sendAnimation {
        public static let id: Swift.String = "post/sendAnimation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendAnimation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendAnimation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendAnimation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendAnimation.Input.Headers
            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation`.
                    public struct animationPayload: Sendable, Hashable {
                        /// Animation to send. Pass a file\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.animationPayload.bodyPayload
                        /// Creates a new `animationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.animationPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case animation(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.animationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/duration`.
                    public struct durationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `durationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.durationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/width`.
                    public struct widthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `widthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case width(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.widthPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/height`.
                    public struct heightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `heightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case height(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.heightPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.thumbPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendAnimation.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendAnimation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendAnimation.Input.Headers = .init(),
                body: Operations.post_sol_sendAnimation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendAnimation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendAnimation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendAnimation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendAnimation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAnimation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendAnimation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendAnimation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendAnimation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendAnimation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAnimation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendAnimation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendAnimation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    public enum post_sol_sendVoice {
        public static let id: Swift.String = "post/sendVoice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVoice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVoice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVoice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendVoice.Input.Headers
            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice`.
                    public struct voicePayload: Sendable, Hashable {
                        /// Audio file to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.voicePayload.bodyPayload
                        /// Creates a new `voicePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.voicePayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case voice(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.voicePayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/duration`.
                    public struct durationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `durationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.durationPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendVoice.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendVoice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendVoice.Input.Headers = .init(),
                body: Operations.post_sol_sendVoice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendVoice.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendVoice.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVoice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVoice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVoice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendVoice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendVoice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVoice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVoice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVoice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendVoice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendVoice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    public enum post_sol_sendVideoNote {
        public static let id: Swift.String = "post/sendVideoNote"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVideoNote/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVideoNote.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVideoNote.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendVideoNote.Input.Headers
            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note`.
                    public struct video_notePayload: Sendable, Hashable {
                        /// Video note to send. Pass a file\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.video_notePayload.bodyPayload
                        /// Creates a new `video_notePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.video_notePayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case video_note(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.video_notePayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/duration`.
                    public struct durationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `durationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.durationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/length`.
                    public struct lengthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `lengthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case length(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.lengthPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.thumbPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendVideoNote.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendVideoNote.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendVideoNote.Input.Headers = .init(),
                body: Operations.post_sol_sendVideoNote.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendVideoNote.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendVideoNote.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVideoNote.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVideoNote.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideoNote/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendVideoNote.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendVideoNote.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVideoNote.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVideoNote.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideoNote/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendVideoNote.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendVideoNote.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    public enum post_sol_sendMediaGroup {
        public static let id: Swift.String = "post/sendMediaGroup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendMediaGroup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendMediaGroup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendMediaGroup.Input.Headers
            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media`.
                    public struct mediaPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value1`.
                            public var value1: Components.Schemas.InputMediaAudio?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value2`.
                            public var value2: Components.Schemas.InputMediaDocument?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value3`.
                            public var value3: Components.Schemas.InputMediaPhoto?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value4`.
                            public var value4: Components.Schemas.InputMediaVideo?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InputMediaAudio? = nil,
                                value2: Components.Schemas.InputMediaDocument? = nil,
                                value3: Components.Schemas.InputMediaPhoto? = nil,
                                value4: Components.Schemas.InputMediaVideo? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.mediaPayload.bodyPayload
                        /// Creates a new `mediaPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.mediaPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case media(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.mediaPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendMediaGroup.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendMediaGroup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendMediaGroup.Input.Headers = .init(),
                body: Operations.post_sol_sendMediaGroup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendMediaGroup.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendMediaGroup.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendMediaGroup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendMediaGroup.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMediaGroup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendMediaGroup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendMediaGroup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendMediaGroup.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendMediaGroup.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMediaGroup/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendMediaGroup.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendMediaGroup.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    public enum post_sol_sendLocation {
        public static let id: Swift.String = "post/sendLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendLocation.Input.Headers
            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Latitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/horizontal_accuracy`.
                    public var horizontal_accuracy: Swift.Double?
                    /// Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/live_period`.
                    public var live_period: Swift.Int?
                    /// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/heading`.
                    public var heading: Swift.Int?
                    /// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/proximity_alert_radius`.
                    public var proximity_alert_radius: Swift.Int?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the location
                    ///   - longitude: Longitude of the location
                    ///   - horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - live_period: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///   - heading: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximity_alert_radius: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    public init(
                        chat_id: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontal_accuracy: Swift.Double? = nil,
                        live_period: Swift.Int? = nil,
                        heading: Swift.Int? = nil,
                        proximity_alert_radius: Swift.Int? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontal_accuracy = horizontal_accuracy
                        self.live_period = live_period
                        self.heading = heading
                        self.proximity_alert_radius = proximity_alert_radius
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case latitude
                        case longitude
                        case horizontal_accuracy
                        case live_period
                        case heading
                        case proximity_alert_radius
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendLocation.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/latitude`.
                    public struct latitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `latitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.latitudePayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/longitude`.
                    public struct longitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `longitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.longitudePayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/horizontal_accuracy`.
                    public struct horizontal_accuracyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `horizontal_accuracyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case horizontal_accuracy(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.horizontal_accuracyPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/live_period`.
                    public struct live_periodPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `live_periodPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case live_period(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.live_periodPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/heading`.
                    public struct headingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `headingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case heading(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.headingPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/proximity_alert_radius`.
                    public struct proximity_alert_radiusPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `proximity_alert_radiusPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proximity_alert_radius(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.proximity_alert_radiusPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendLocation.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendLocation.Input.Body.jsonPayload.chat_idPayload
                    /// Latitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/horizontal_accuracy`.
                    public var horizontal_accuracy: Swift.Double?
                    /// Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/live_period`.
                    public var live_period: Swift.Int?
                    /// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/heading`.
                    public var heading: Swift.Int?
                    /// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/proximity_alert_radius`.
                    public var proximity_alert_radius: Swift.Int?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendLocation.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_sendLocation.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the location
                    ///   - longitude: Longitude of the location
                    ///   - horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - live_period: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///   - heading: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximity_alert_radius: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    public init(
                        chat_id: Operations.post_sol_sendLocation.Input.Body.jsonPayload.chat_idPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontal_accuracy: Swift.Double? = nil,
                        live_period: Swift.Int? = nil,
                        heading: Swift.Int? = nil,
                        proximity_alert_radius: Swift.Int? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendLocation.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendLocation.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontal_accuracy = horizontal_accuracy
                        self.live_period = live_period
                        self.heading = heading
                        self.proximity_alert_radius = proximity_alert_radius
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case latitude
                        case longitude
                        case horizontal_accuracy
                        case live_period
                        case heading
                        case proximity_alert_radius
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendLocation.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendLocation.Input.Headers = .init(),
                body: Operations.post_sol_sendLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendLocation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendLocation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    public enum post_sol_editMessageLiveLocation {
        public static let id: Swift.String = "post/editMessageLiveLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageLiveLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageLiveLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageLiveLocation.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageLiveLocation.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Latitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/horizontal_accuracy`.
                    public var horizontal_accuracy: Swift.Double?
                    /// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/heading`.
                    public var heading: Swift.Int?
                    /// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/proximity_alert_radius`.
                    public var proximity_alert_radius: Swift.Int?
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - latitude: Latitude of new location
                    ///   - longitude: Longitude of new location
                    ///   - horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - heading: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximity_alert_radius: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageLiveLocation.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontal_accuracy: Swift.Double? = nil,
                        heading: Swift.Int? = nil,
                        proximity_alert_radius: Swift.Int? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontal_accuracy = horizontal_accuracy
                        self.heading = heading
                        self.proximity_alert_radius = proximity_alert_radius
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case latitude
                        case longitude
                        case horizontal_accuracy
                        case heading
                        case proximity_alert_radius
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_editMessageLiveLocation.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/latitude`.
                    public struct latitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `latitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.latitudePayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/longitude`.
                    public struct longitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `longitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.longitudePayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/horizontal_accuracy`.
                    public struct horizontal_accuracyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `horizontal_accuracyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case horizontal_accuracy(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.horizontal_accuracyPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/heading`.
                    public struct headingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `headingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case heading(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.headingPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/proximity_alert_radius`.
                    public struct proximity_alert_radiusPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `proximity_alert_radiusPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proximity_alert_radius(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.proximity_alert_radiusPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageLiveLocation.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageLiveLocation.Input.Body.jsonPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Latitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/horizontal_accuracy`.
                    public var horizontal_accuracy: Swift.Double?
                    /// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/heading`.
                    public var heading: Swift.Int?
                    /// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/proximity_alert_radius`.
                    public var proximity_alert_radius: Swift.Int?
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - latitude: Latitude of new location
                    ///   - longitude: Longitude of new location
                    ///   - horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - heading: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximity_alert_radius: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageLiveLocation.Input.Body.jsonPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontal_accuracy: Swift.Double? = nil,
                        heading: Swift.Int? = nil,
                        proximity_alert_radius: Swift.Int? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontal_accuracy = horizontal_accuracy
                        self.heading = heading
                        self.proximity_alert_radius = proximity_alert_radius
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case latitude
                        case longitude
                        case horizontal_accuracy
                        case heading
                        case proximity_alert_radius
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_editMessageLiveLocation.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_editMessageLiveLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageLiveLocation.Input.Headers = .init(),
                body: Operations.post_sol_editMessageLiveLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_editMessageLiveLocation.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_editMessageLiveLocation.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageLiveLocation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageLiveLocation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageLiveLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageLiveLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageLiveLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageLiveLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageLiveLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageLiveLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageLiveLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageLiveLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageLiveLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageLiveLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    public enum post_sol_stopMessageLiveLocation {
        public static let id: Swift.String = "post/stopMessageLiveLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_stopMessageLiveLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_stopMessageLiveLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_stopMessageLiveLocation.Input.Headers
            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_stopMessageLiveLocation.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_stopMessageLiveLocation.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_stopMessageLiveLocation.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopMessageLiveLocation.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopMessageLiveLocation.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopMessageLiveLocation.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopMessageLiveLocation.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_stopMessageLiveLocation.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_stopMessageLiveLocation.Input.Body.jsonPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_stopMessageLiveLocation.Input.Body.jsonPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_stopMessageLiveLocation.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_stopMessageLiveLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_stopMessageLiveLocation.Input.Headers = .init(),
                body: Operations.post_sol_stopMessageLiveLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_stopMessageLiveLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_stopMessageLiveLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_stopMessageLiveLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_stopMessageLiveLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_stopMessageLiveLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_stopMessageLiveLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_stopMessageLiveLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    public enum post_sol_sendVenue {
        public static let id: Swift.String = "post/sendVenue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVenue/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVenue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendVenue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendVenue.Input.Headers
            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Latitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// Name of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Address of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/address`.
                    public var address: Swift.String
                    /// Foursquare identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/foursquare_id`.
                    public var foursquare_id: Swift.String?
                    /// Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/foursquare_type`.
                    public var foursquare_type: Swift.String?
                    /// Google Places identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/google_place_id`.
                    public var google_place_id: Swift.String?
                    /// Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/google_place_type`.
                    public var google_place_type: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the venue
                    ///   - longitude: Longitude of the venue
                    ///   - title: Name of the venue
                    ///   - address: Address of the venue
                    ///   - foursquare_id: Foursquare identifier of the venue
                    ///   - foursquare_type: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///   - google_place_id: Google Places identifier of the venue
                    ///   - google_place_type: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        title: Swift.String,
                        address: Swift.String,
                        foursquare_id: Swift.String? = nil,
                        foursquare_type: Swift.String? = nil,
                        google_place_id: Swift.String? = nil,
                        google_place_type: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.title = title
                        self.address = address
                        self.foursquare_id = foursquare_id
                        self.foursquare_type = foursquare_type
                        self.google_place_id = google_place_id
                        self.google_place_type = google_place_type
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case latitude
                        case longitude
                        case title
                        case address
                        case foursquare_id
                        case foursquare_type
                        case google_place_id
                        case google_place_type
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendVenue.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/latitude`.
                    public struct latitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `latitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.latitudePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/longitude`.
                    public struct longitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `longitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.longitudePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.titlePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/address`.
                    public struct addressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `addressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case address(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.addressPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/foursquare_id`.
                    public struct foursquare_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `foursquare_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case foursquare_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.foursquare_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/foursquare_type`.
                    public struct foursquare_typePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `foursquare_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case foursquare_type(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.foursquare_typePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/google_place_id`.
                    public struct google_place_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `google_place_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case google_place_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.google_place_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/google_place_type`.
                    public struct google_place_typePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `google_place_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case google_place_type(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.google_place_typePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendVenue.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendVenue.Input.Body.jsonPayload.chat_idPayload
                    /// Latitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// Name of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Address of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/address`.
                    public var address: Swift.String
                    /// Foursquare identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/foursquare_id`.
                    public var foursquare_id: Swift.String?
                    /// Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/foursquare_type`.
                    public var foursquare_type: Swift.String?
                    /// Google Places identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/google_place_id`.
                    public var google_place_id: Swift.String?
                    /// Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/google_place_type`.
                    public var google_place_type: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendVenue.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_sendVenue.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the venue
                    ///   - longitude: Longitude of the venue
                    ///   - title: Name of the venue
                    ///   - address: Address of the venue
                    ///   - foursquare_id: Foursquare identifier of the venue
                    ///   - foursquare_type: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///   - google_place_id: Google Places identifier of the venue
                    ///   - google_place_type: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendVenue.Input.Body.jsonPayload.chat_idPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        title: Swift.String,
                        address: Swift.String,
                        foursquare_id: Swift.String? = nil,
                        foursquare_type: Swift.String? = nil,
                        google_place_id: Swift.String? = nil,
                        google_place_type: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendVenue.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendVenue.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.latitude = latitude
                        self.longitude = longitude
                        self.title = title
                        self.address = address
                        self.foursquare_id = foursquare_id
                        self.foursquare_type = foursquare_type
                        self.google_place_id = google_place_id
                        self.google_place_type = google_place_type
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case latitude
                        case longitude
                        case title
                        case address
                        case foursquare_id
                        case foursquare_type
                        case google_place_id
                        case google_place_type
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendVenue.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendVenue.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendVenue.Input.Headers = .init(),
                body: Operations.post_sol_sendVenue.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendVenue.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendVenue.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVenue.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVenue.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVenue/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendVenue.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendVenue.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendVenue.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendVenue.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVenue/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendVenue.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendVenue.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    public enum post_sol_sendContact {
        public static let id: Swift.String = "post/sendContact"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendContact/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendContact.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendContact.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendContact.Input.Headers
            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Contact's phone number
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/phone_number`.
                    public var phone_number: Swift.String
                    /// Contact's first name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/first_name`.
                    public var first_name: Swift.String
                    /// Contact's last name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/last_name`.
                    public var last_name: Swift.String?
                    /// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/vcard`.
                    public var vcard: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - phone_number: Contact's phone number
                    ///   - first_name: Contact's first name
                    ///   - last_name: Contact's last name
                    ///   - vcard: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        phone_number: Swift.String,
                        first_name: Swift.String,
                        last_name: Swift.String? = nil,
                        vcard: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.phone_number = phone_number
                        self.first_name = first_name
                        self.last_name = last_name
                        self.vcard = vcard
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case phone_number
                        case first_name
                        case last_name
                        case vcard
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendContact.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/phone_number`.
                    public struct phone_numberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `phone_numberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case phone_number(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.phone_numberPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/first_name`.
                    public struct first_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `first_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case first_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.first_namePayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/last_name`.
                    public struct last_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `last_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case last_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.last_namePayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/vcard`.
                    public struct vcardPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `vcardPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case vcard(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.vcardPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendContact.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendContact.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendContact.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendContact.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendContact.Input.Body.jsonPayload.chat_idPayload
                    /// Contact's phone number
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/phone_number`.
                    public var phone_number: Swift.String
                    /// Contact's first name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/first_name`.
                    public var first_name: Swift.String
                    /// Contact's last name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/last_name`.
                    public var last_name: Swift.String?
                    /// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/vcard`.
                    public var vcard: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendContact.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_sendContact.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - phone_number: Contact's phone number
                    ///   - first_name: Contact's first name
                    ///   - last_name: Contact's last name
                    ///   - vcard: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendContact.Input.Body.jsonPayload.chat_idPayload,
                        phone_number: Swift.String,
                        first_name: Swift.String,
                        last_name: Swift.String? = nil,
                        vcard: Swift.String? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendContact.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendContact.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.phone_number = phone_number
                        self.first_name = first_name
                        self.last_name = last_name
                        self.vcard = vcard
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case phone_number
                        case first_name
                        case last_name
                        case vcard
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendContact.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendContact.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendContact.Input.Headers = .init(),
                body: Operations.post_sol_sendContact.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendContact.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendContact.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendContact.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendContact.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendContact/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendContact.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendContact.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendContact.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendContact.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendContact/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendContact.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendContact.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    public enum post_sol_sendPoll {
        public static let id: Swift.String = "post/sendPoll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendPoll/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendPoll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendPoll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendPoll.Input.Headers
            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Poll question, 1-300 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/question`.
                    public var question: Swift.String
                    /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/options`.
                    public var options: [Swift.String]
                    /// True, if the poll needs to be anonymous, defaults to *True*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/is_anonymous`.
                    public var is_anonymous: Swift.Bool?
                    /// Poll type, “quiz” or “regular”, defaults to “regular”
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Swift.String?
                    /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/allows_multiple_answers`.
                    public var allows_multiple_answers: Swift.Bool?
                    /// 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/correct_option_id`.
                    public var correct_option_id: Swift.Int?
                    /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation`.
                    public var explanation: Swift.String?
                    /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation_parse_mode`.
                    public var explanation_parse_mode: Swift.String?
                    /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation_entities`.
                    public var explanation_entities: [Components.Schemas.MessageEntity]?
                    /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/open_period`.
                    public var open_period: Swift.Int?
                    /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/close_date`.
                    public var close_date: Swift.Int?
                    /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/is_closed`.
                    public var is_closed: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - question: Poll question, 1-300 characters
                    ///   - options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///   - is_anonymous: True, if the poll needs to be anonymous, defaults to *True*
                    ///   - _type: Poll type, “quiz” or “regular”, defaults to “regular”
                    ///   - allows_multiple_answers: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///   - correct_option_id: 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///   - explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///   - explanation_parse_mode: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - explanation_entities: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///   - open_period: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///   - close_date: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///   - is_closed: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        question: Swift.String,
                        options: [Swift.String],
                        is_anonymous: Swift.Bool? = nil,
                        _type: Swift.String? = nil,
                        allows_multiple_answers: Swift.Bool? = nil,
                        correct_option_id: Swift.Int? = nil,
                        explanation: Swift.String? = nil,
                        explanation_parse_mode: Swift.String? = nil,
                        explanation_entities: [Components.Schemas.MessageEntity]? = nil,
                        open_period: Swift.Int? = nil,
                        close_date: Swift.Int? = nil,
                        is_closed: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.question = question
                        self.options = options
                        self.is_anonymous = is_anonymous
                        self._type = _type
                        self.allows_multiple_answers = allows_multiple_answers
                        self.correct_option_id = correct_option_id
                        self.explanation = explanation
                        self.explanation_parse_mode = explanation_parse_mode
                        self.explanation_entities = explanation_entities
                        self.open_period = open_period
                        self.close_date = close_date
                        self.is_closed = is_closed
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case question
                        case options
                        case is_anonymous
                        case _type = "type"
                        case allows_multiple_answers
                        case correct_option_id
                        case explanation
                        case explanation_parse_mode
                        case explanation_entities
                        case open_period
                        case close_date
                        case is_closed
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendPoll.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/question`.
                    public struct questionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `questionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case question(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.questionPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/options`.
                    public struct optionsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `optionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case options(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.optionsPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/is_anonymous`.
                    public struct is_anonymousPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `is_anonymousPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case is_anonymous(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.is_anonymousPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/type`.
                    public struct _typePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_typePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload._typePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/allows_multiple_answers`.
                    public struct allows_multiple_answersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allows_multiple_answersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allows_multiple_answers(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.allows_multiple_answersPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/correct_option_id`.
                    public struct correct_option_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `correct_option_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case correct_option_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.correct_option_idPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation`.
                    public struct explanationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `explanationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case explanation(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.explanationPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation_parse_mode`.
                    public struct explanation_parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `explanation_parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case explanation_parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.explanation_parse_modePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation_entities`.
                    public struct explanation_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `explanation_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case explanation_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.explanation_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/open_period`.
                    public struct open_periodPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `open_periodPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case open_period(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.open_periodPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/close_date`.
                    public struct close_datePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `close_datePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case close_date(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.close_datePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/is_closed`.
                    public struct is_closedPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `is_closedPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case is_closed(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.is_closedPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendPoll.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendPoll.Input.Body.jsonPayload.chat_idPayload
                    /// Poll question, 1-300 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/question`.
                    public var question: Swift.String
                    /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/options`.
                    public var options: [Swift.String]
                    /// True, if the poll needs to be anonymous, defaults to *True*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/is_anonymous`.
                    public var is_anonymous: Swift.Bool?
                    /// Poll type, “quiz” or “regular”, defaults to “regular”
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/type`.
                    public var _type: Swift.String?
                    /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/allows_multiple_answers`.
                    public var allows_multiple_answers: Swift.Bool?
                    /// 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/correct_option_id`.
                    public var correct_option_id: Swift.Int?
                    /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation`.
                    public var explanation: Swift.String?
                    /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation_parse_mode`.
                    public var explanation_parse_mode: Swift.String?
                    /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation_entities`.
                    public var explanation_entities: [Components.Schemas.MessageEntity]?
                    /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/open_period`.
                    public var open_period: Swift.Int?
                    /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/close_date`.
                    public var close_date: Swift.Int?
                    /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/is_closed`.
                    public var is_closed: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendPoll.Input.Body.jsonPayload.reply_markupPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - question: Poll question, 1-300 characters
                    ///   - options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///   - is_anonymous: True, if the poll needs to be anonymous, defaults to *True*
                    ///   - _type: Poll type, “quiz” or “regular”, defaults to “regular”
                    ///   - allows_multiple_answers: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///   - correct_option_id: 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///   - explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///   - explanation_parse_mode: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - explanation_entities: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///   - open_period: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///   - close_date: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///   - is_closed: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    public init(
                        chat_id: Operations.post_sol_sendPoll.Input.Body.jsonPayload.chat_idPayload,
                        question: Swift.String,
                        options: [Swift.String],
                        is_anonymous: Swift.Bool? = nil,
                        _type: Swift.String? = nil,
                        allows_multiple_answers: Swift.Bool? = nil,
                        correct_option_id: Swift.Int? = nil,
                        explanation: Swift.String? = nil,
                        explanation_parse_mode: Swift.String? = nil,
                        explanation_entities: [Components.Schemas.MessageEntity]? = nil,
                        open_period: Swift.Int? = nil,
                        close_date: Swift.Int? = nil,
                        is_closed: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendPoll.Input.Body.jsonPayload.reply_markupPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.question = question
                        self.options = options
                        self.is_anonymous = is_anonymous
                        self._type = _type
                        self.allows_multiple_answers = allows_multiple_answers
                        self.correct_option_id = correct_option_id
                        self.explanation = explanation
                        self.explanation_parse_mode = explanation_parse_mode
                        self.explanation_entities = explanation_entities
                        self.open_period = open_period
                        self.close_date = close_date
                        self.is_closed = is_closed
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case question
                        case options
                        case is_anonymous
                        case _type = "type"
                        case allows_multiple_answers
                        case correct_option_id
                        case explanation
                        case explanation_parse_mode
                        case explanation_entities
                        case open_period
                        case close_date
                        case is_closed
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendPoll.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendPoll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendPoll.Input.Headers = .init(),
                body: Operations.post_sol_sendPoll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendPoll.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendPoll.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendPoll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendPoll.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPoll/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendPoll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendPoll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendPoll.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendPoll.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPoll/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendPoll.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendPoll.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    public enum post_sol_sendDice {
        public static let id: Swift.String = "post/sendDice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendDice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendDice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendDice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendDice.Input.Headers
            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/emoji`.
                    @frozen public enum emojiPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _x1F3B2_ = "🎲"
                        case _x1F3AF_ = "🎯"
                        case _x1F3C0_ = "🏀"
                        case _x26BD_ = "⚽"
                        case _x1F3B0_ = "🎰"
                    }
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/emoji`.
                    public var emoji: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.emojiPayload?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at`.
                    public var send_at: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.send_atPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - emoji: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        emoji: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.emojiPayload? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.emoji = emoji
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case emoji
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendDice.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/emoji`.
                    public struct emojiPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `emojiPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emoji(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.emojiPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendDice.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendDice.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendDice.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendDice.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendDice.Input.Body.jsonPayload.chat_idPayload
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/emoji`.
                    @frozen public enum emojiPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _x1F3B2_ = "🎲"
                        case _x1F3AF_ = "🎯"
                        case _x1F3C0_ = "🏀"
                        case _x26BD_ = "⚽"
                        case _x1F3B0_ = "🎰"
                    }
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/emoji`.
                    public var emoji: Operations.post_sol_sendDice.Input.Body.jsonPayload.emojiPayload?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup`.
                    public struct reply_markupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Operations.post_sol_sendDice.Input.Body.jsonPayload.reply_markupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at`.
                    public struct send_atPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at`.
                    public var send_at: Operations.post_sol_sendDice.Input.Body.jsonPayload.send_atPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - emoji: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - send_at: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chat_id: Operations.post_sol_sendDice.Input.Body.jsonPayload.chat_idPayload,
                        emoji: Operations.post_sol_sendDice.Input.Body.jsonPayload.emojiPayload? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Operations.post_sol_sendDice.Input.Body.jsonPayload.reply_markupPayload? = nil,
                        send_at: Operations.post_sol_sendDice.Input.Body.jsonPayload.send_atPayload? = nil
                    ) {
                        self.chat_id = chat_id
                        self.emoji = emoji
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                        self.send_at = send_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case emoji
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                        case send_at
                    }
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendDice.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendDice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendDice.Input.Headers = .init(),
                body: Operations.post_sol_sendDice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendDice.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendDice.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendDice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendDice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendDice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendDice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendDice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendDice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendDice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendDice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    public enum post_sol_sendChatAction {
        public static let id: Swift.String = "post/sendChatAction"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendChatAction/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendChatAction.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendChatAction.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendChatAction.Input.Headers
            /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_sendChatAction.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/action`.
                    public var action: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - action: Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    public init(
                        chat_id: Operations.post_sol_sendChatAction.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        action: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendChatAction.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendChatAction.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm/action`.
                    public struct actionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `actionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case action(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendChatAction.Input.Body.multipartFormPayload.actionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendChatAction.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_sendChatAction.Input.Body.jsonPayload.chat_idPayload
                    /// Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/action`.
                    public var action: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - action: Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    public init(
                        chat_id: Operations.post_sol_sendChatAction.Input.Body.jsonPayload.chat_idPayload,
                        action: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendChatAction.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendChatAction.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendChatAction.Input.Headers = .init(),
                body: Operations.post_sol_sendChatAction.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendChatAction.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendChatAction.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendChatAction.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendChatAction.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendChatAction/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendChatAction.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendChatAction.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendChatAction.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendChatAction.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendChatAction/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendChatAction.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendChatAction.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    public enum post_sol_getUserProfilePhotos {
        public static let id: Swift.String = "post/getUserProfilePhotos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getUserProfilePhotos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getUserProfilePhotos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getUserProfilePhotos.Input.Headers
            /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Unique identifier of the target user
                    ///   - offset: Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///   - limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    public init(
                        user_id: Swift.Int,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.user_id = user_id
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getUserProfilePhotos.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUserProfilePhotos.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/offset`.
                    public struct offsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `offsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUserProfilePhotos.Input.Body.multipartFormPayload.offsetPayload>)
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/limit`.
                    public struct limitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `limitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.post_sol_getUserProfilePhotos.Input.Body.multipartFormPayload.limitPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getUserProfilePhotos.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Unique identifier of the target user
                    ///   - offset: Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///   - limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    public init(
                        user_id: Swift.Int,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.user_id = user_id
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getUserProfilePhotos.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getUserProfilePhotos.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getUserProfilePhotos.Input.Headers = .init(),
                body: Operations.post_sol_getUserProfilePhotos.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.UserProfilePhotos
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.UserProfilePhotos
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getUserProfilePhotos.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getUserProfilePhotos.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getUserProfilePhotos.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getUserProfilePhotos.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUserProfilePhotos/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getUserProfilePhotos.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getUserProfilePhotos.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getUserProfilePhotos.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getUserProfilePhotos.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUserProfilePhotos/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getUserProfilePhotos.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getUserProfilePhotos.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    public enum post_sol_getFile {
        public static let id: Swift.String = "post/getFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getFile/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getFile.Input.Headers
            /// - Remark: Generated from `#/paths/getFile/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier to get info about
                    ///
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/urlEncodedForm/file_id`.
                    public var file_id: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_id: File identifier to get info about
                    public init(file_id: Swift.String) {
                        self.file_id = file_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_id
                    }
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getFile.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/multipartForm/file_id`.
                    public struct file_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `file_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getFile.Input.Body.multipartFormPayload.file_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getFile.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// File identifier to get info about
                    ///
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/json/file_id`.
                    public var file_id: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_id: File identifier to get info about
                    public init(file_id: Swift.String) {
                        self.file_id = file_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_id
                    }
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getFile.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getFile.Input.Headers = .init(),
                body: Operations.post_sol_getFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.File
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.File
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getFile.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getFile.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getFile/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getFile.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getFile.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getFile/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getFile.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getFile.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    public enum post_sol_kickChatMember {
        public static let id: Swift.String = "post/kickChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/kickChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_kickChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_kickChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_kickChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_kickChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/until_date`.
                    public var until_date: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - until_date: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    public init(
                        chat_id: Operations.post_sol_kickChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int,
                        until_date: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.until_date = until_date
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case until_date
                    }
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_kickChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_kickChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_kickChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/until_date`.
                    public struct until_datePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `until_datePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case until_date(OpenAPIRuntime.MultipartPart<Operations.post_sol_kickChatMember.Input.Body.multipartFormPayload.until_datePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_kickChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_kickChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/until_date`.
                    public var until_date: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - until_date: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    public init(
                        chat_id: Operations.post_sol_kickChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int,
                        until_date: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.until_date = until_date
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case until_date
                    }
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_kickChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_kickChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_kickChatMember.Input.Headers = .init(),
                body: Operations.post_sol_kickChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_kickChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_kickChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_kickChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_kickChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//kickChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_kickChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_kickChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_kickChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_kickChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//kickChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_kickChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_kickChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    public enum post_sol_unbanChatMember {
        public static let id: Swift.String = "post/unbanChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unbanChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unbanChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unbanChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_unbanChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_unbanChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Do nothing if the user is not banned
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/only_if_banned`.
                    public var only_if_banned: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - only_if_banned: Do nothing if the user is not banned
                    public init(
                        chat_id: Operations.post_sol_unbanChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int,
                        only_if_banned: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.only_if_banned = only_if_banned
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case only_if_banned
                    }
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_unbanChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_unbanChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_unbanChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/only_if_banned`.
                    public struct only_if_bannedPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `only_if_bannedPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case only_if_banned(OpenAPIRuntime.MultipartPart<Operations.post_sol_unbanChatMember.Input.Body.multipartFormPayload.only_if_bannedPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_unbanChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_unbanChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Do nothing if the user is not banned
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/only_if_banned`.
                    public var only_if_banned: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - only_if_banned: Do nothing if the user is not banned
                    public init(
                        chat_id: Operations.post_sol_unbanChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int,
                        only_if_banned: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.only_if_banned = only_if_banned
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case only_if_banned
                    }
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_unbanChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_unbanChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_unbanChatMember.Input.Headers = .init(),
                body: Operations.post_sol_unbanChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_unbanChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_unbanChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unbanChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unbanChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unbanChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_unbanChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_unbanChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unbanChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unbanChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unbanChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_unbanChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_unbanChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    public enum post_sol_restrictChatMember {
        public static let id: Swift.String = "post/restrictChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/restrictChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_restrictChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_restrictChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_restrictChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_restrictChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/until_date`.
                    public var until_date: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - permissions:
                    ///   - until_date: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    public init(
                        chat_id: Operations.post_sol_restrictChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int,
                        permissions: Components.Schemas.ChatPermissions,
                        until_date: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.permissions = permissions
                        self.until_date = until_date
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case permissions
                        case until_date
                    }
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_restrictChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_restrictChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_restrictChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/permissions`.
                    public struct permissionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ChatPermissions
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ChatPermissions) {
                            self.body = body
                        }
                    }
                    case permissions(OpenAPIRuntime.MultipartPart<Operations.post_sol_restrictChatMember.Input.Body.multipartFormPayload.permissionsPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/until_date`.
                    public struct until_datePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `until_datePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case until_date(OpenAPIRuntime.MultipartPart<Operations.post_sol_restrictChatMember.Input.Body.multipartFormPayload.until_datePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_restrictChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_restrictChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/until_date`.
                    public var until_date: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - permissions:
                    ///   - until_date: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    public init(
                        chat_id: Operations.post_sol_restrictChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int,
                        permissions: Components.Schemas.ChatPermissions,
                        until_date: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.permissions = permissions
                        self.until_date = until_date
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case permissions
                        case until_date
                    }
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_restrictChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_restrictChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_restrictChatMember.Input.Headers = .init(),
                body: Operations.post_sol_restrictChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_restrictChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_restrictChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_restrictChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_restrictChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//restrictChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_restrictChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_restrictChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_restrictChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_restrictChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//restrictChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_restrictChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_restrictChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    public enum post_sol_promoteChatMember {
        public static let id: Swift.String = "post/promoteChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/promoteChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_promoteChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_promoteChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_promoteChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_promoteChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Pass *True*, if the administrator's presence in the chat is hidden
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/is_anonymous`.
                    public var is_anonymous: Swift.Bool?
                    /// Pass True, if the administrator can change chat title, photo and other settings
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_change_info`.
                    public var can_change_info: Swift.Bool?
                    /// Pass True, if the administrator can create channel posts, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_post_messages`.
                    public var can_post_messages: Swift.Bool?
                    /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_edit_messages`.
                    public var can_edit_messages: Swift.Bool?
                    /// Pass True, if the administrator can delete messages of other users
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_delete_messages`.
                    public var can_delete_messages: Swift.Bool?
                    /// Pass True, if the administrator can invite new users to the chat
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_invite_users`.
                    public var can_invite_users: Swift.Bool?
                    /// Pass True, if the administrator can restrict, ban or unban chat members
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_restrict_members`.
                    public var can_restrict_members: Swift.Bool?
                    /// Pass True, if the administrator can pin messages, supergroups only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_pin_messages`.
                    public var can_pin_messages: Swift.Bool?
                    /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_promote_members`.
                    public var can_promote_members: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - is_anonymous: Pass *True*, if the administrator's presence in the chat is hidden
                    ///   - can_change_info: Pass True, if the administrator can change chat title, photo and other settings
                    ///   - can_post_messages: Pass True, if the administrator can create channel posts, channels only
                    ///   - can_edit_messages: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///   - can_delete_messages: Pass True, if the administrator can delete messages of other users
                    ///   - can_invite_users: Pass True, if the administrator can invite new users to the chat
                    ///   - can_restrict_members: Pass True, if the administrator can restrict, ban or unban chat members
                    ///   - can_pin_messages: Pass True, if the administrator can pin messages, supergroups only
                    ///   - can_promote_members: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    public init(
                        chat_id: Operations.post_sol_promoteChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int,
                        is_anonymous: Swift.Bool? = nil,
                        can_change_info: Swift.Bool? = nil,
                        can_post_messages: Swift.Bool? = nil,
                        can_edit_messages: Swift.Bool? = nil,
                        can_delete_messages: Swift.Bool? = nil,
                        can_invite_users: Swift.Bool? = nil,
                        can_restrict_members: Swift.Bool? = nil,
                        can_pin_messages: Swift.Bool? = nil,
                        can_promote_members: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.is_anonymous = is_anonymous
                        self.can_change_info = can_change_info
                        self.can_post_messages = can_post_messages
                        self.can_edit_messages = can_edit_messages
                        self.can_delete_messages = can_delete_messages
                        self.can_invite_users = can_invite_users
                        self.can_restrict_members = can_restrict_members
                        self.can_pin_messages = can_pin_messages
                        self.can_promote_members = can_promote_members
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case is_anonymous
                        case can_change_info
                        case can_post_messages
                        case can_edit_messages
                        case can_delete_messages
                        case can_invite_users
                        case can_restrict_members
                        case can_pin_messages
                        case can_promote_members
                    }
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_promoteChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/is_anonymous`.
                    public struct is_anonymousPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `is_anonymousPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case is_anonymous(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.is_anonymousPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_change_info`.
                    public struct can_change_infoPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_change_infoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_change_info(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_change_infoPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_post_messages`.
                    public struct can_post_messagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_post_messagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_post_messages(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_post_messagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_edit_messages`.
                    public struct can_edit_messagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_edit_messagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_edit_messages(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_edit_messagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_delete_messages`.
                    public struct can_delete_messagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_delete_messagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_delete_messages(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_delete_messagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_invite_users`.
                    public struct can_invite_usersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_invite_usersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_invite_users(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_invite_usersPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_restrict_members`.
                    public struct can_restrict_membersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_restrict_membersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_restrict_members(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_restrict_membersPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_pin_messages`.
                    public struct can_pin_messagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_pin_messagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_pin_messages(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_pin_messagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_promote_members`.
                    public struct can_promote_membersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `can_promote_membersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case can_promote_members(OpenAPIRuntime.MultipartPart<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload.can_promote_membersPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_promoteChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_promoteChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Pass *True*, if the administrator's presence in the chat is hidden
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/is_anonymous`.
                    public var is_anonymous: Swift.Bool?
                    /// Pass True, if the administrator can change chat title, photo and other settings
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_change_info`.
                    public var can_change_info: Swift.Bool?
                    /// Pass True, if the administrator can create channel posts, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_post_messages`.
                    public var can_post_messages: Swift.Bool?
                    /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_edit_messages`.
                    public var can_edit_messages: Swift.Bool?
                    /// Pass True, if the administrator can delete messages of other users
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_delete_messages`.
                    public var can_delete_messages: Swift.Bool?
                    /// Pass True, if the administrator can invite new users to the chat
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_invite_users`.
                    public var can_invite_users: Swift.Bool?
                    /// Pass True, if the administrator can restrict, ban or unban chat members
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_restrict_members`.
                    public var can_restrict_members: Swift.Bool?
                    /// Pass True, if the administrator can pin messages, supergroups only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_pin_messages`.
                    public var can_pin_messages: Swift.Bool?
                    /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_promote_members`.
                    public var can_promote_members: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - is_anonymous: Pass *True*, if the administrator's presence in the chat is hidden
                    ///   - can_change_info: Pass True, if the administrator can change chat title, photo and other settings
                    ///   - can_post_messages: Pass True, if the administrator can create channel posts, channels only
                    ///   - can_edit_messages: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///   - can_delete_messages: Pass True, if the administrator can delete messages of other users
                    ///   - can_invite_users: Pass True, if the administrator can invite new users to the chat
                    ///   - can_restrict_members: Pass True, if the administrator can restrict, ban or unban chat members
                    ///   - can_pin_messages: Pass True, if the administrator can pin messages, supergroups only
                    ///   - can_promote_members: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    public init(
                        chat_id: Operations.post_sol_promoteChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int,
                        is_anonymous: Swift.Bool? = nil,
                        can_change_info: Swift.Bool? = nil,
                        can_post_messages: Swift.Bool? = nil,
                        can_edit_messages: Swift.Bool? = nil,
                        can_delete_messages: Swift.Bool? = nil,
                        can_invite_users: Swift.Bool? = nil,
                        can_restrict_members: Swift.Bool? = nil,
                        can_pin_messages: Swift.Bool? = nil,
                        can_promote_members: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.is_anonymous = is_anonymous
                        self.can_change_info = can_change_info
                        self.can_post_messages = can_post_messages
                        self.can_edit_messages = can_edit_messages
                        self.can_delete_messages = can_delete_messages
                        self.can_invite_users = can_invite_users
                        self.can_restrict_members = can_restrict_members
                        self.can_pin_messages = can_pin_messages
                        self.can_promote_members = can_promote_members
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case is_anonymous
                        case can_change_info
                        case can_post_messages
                        case can_edit_messages
                        case can_delete_messages
                        case can_invite_users
                        case can_restrict_members
                        case can_pin_messages
                        case can_promote_members
                    }
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_promoteChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_promoteChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_promoteChatMember.Input.Headers = .init(),
                body: Operations.post_sol_promoteChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_promoteChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_promoteChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_promoteChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_promoteChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//promoteChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_promoteChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_promoteChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_promoteChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_promoteChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//promoteChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_promoteChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_promoteChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    public enum post_sol_setChatAdministratorCustomTitle {
        public static let id: Swift.String = "post/setChatAdministratorCustomTitle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatAdministratorCustomTitle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatAdministratorCustomTitle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatAdministratorCustomTitle.Input.Headers
            /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// New custom title for the administrator; 0-16 characters, emoji are not allowed
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/custom_title`.
                    public var custom_title: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - custom_title: New custom title for the administrator; 0-16 characters, emoji are not allowed
                    public init(
                        chat_id: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int,
                        custom_title: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.custom_title = custom_title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case custom_title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/custom_title`.
                    public struct custom_titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `custom_titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case custom_title(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.multipartFormPayload.custom_titlePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// New custom title for the administrator; 0-16 characters, emoji are not allowed
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/custom_title`.
                    public var custom_title: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - user_id: Unique identifier of the target user
                    ///   - custom_title: New custom title for the administrator; 0-16 characters, emoji are not allowed
                    public init(
                        chat_id: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int,
                        custom_title: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                        self.custom_title = custom_title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                        case custom_title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setChatAdministratorCustomTitle.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatAdministratorCustomTitle.Input.Headers = .init(),
                body: Operations.post_sol_setChatAdministratorCustomTitle.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatAdministratorCustomTitle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatAdministratorCustomTitle.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatAdministratorCustomTitle.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatAdministratorCustomTitle.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatAdministratorCustomTitle.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    public enum post_sol_setChatPermissions {
        public static let id: Swift.String = "post/setChatPermissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatPermissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatPermissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatPermissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatPermissions.Input.Headers
            /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setChatPermissions.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - permissions:
                    public init(
                        chat_id: Operations.post_sol_setChatPermissions.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        permissions: Components.Schemas.ChatPermissions
                    ) {
                        self.chat_id = chat_id
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setChatPermissions.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatPermissions.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm/permissions`.
                    public struct permissionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ChatPermissions
                        /// Creates a new `permissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ChatPermissions) {
                            self.body = body
                        }
                    }
                    case permissions(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatPermissions.Input.Body.multipartFormPayload.permissionsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatPermissions.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setChatPermissions.Input.Body.jsonPayload.chat_idPayload
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - permissions:
                    public init(
                        chat_id: Operations.post_sol_setChatPermissions.Input.Body.jsonPayload.chat_idPayload,
                        permissions: Components.Schemas.ChatPermissions
                    ) {
                        self.chat_id = chat_id
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setChatPermissions.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setChatPermissions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatPermissions.Input.Headers = .init(),
                body: Operations.post_sol_setChatPermissions.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatPermissions.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatPermissions.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatPermissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatPermissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPermissions/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatPermissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatPermissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatPermissions.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatPermissions.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPermissions/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatPermissions.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatPermissions.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    public enum post_sol_exportChatInviteLink {
        public static let id: Swift.String = "post/exportChatInviteLink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_exportChatInviteLink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_exportChatInviteLink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_exportChatInviteLink.Input.Headers
            /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_exportChatInviteLink.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_exportChatInviteLink.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_exportChatInviteLink.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_exportChatInviteLink.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_exportChatInviteLink.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_exportChatInviteLink.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_exportChatInviteLink.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_exportChatInviteLink.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_exportChatInviteLink.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_exportChatInviteLink.Input.Headers = .init(),
                body: Operations.post_sol_exportChatInviteLink.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json/result`.
                        public var result: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.String
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_exportChatInviteLink.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_exportChatInviteLink.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_exportChatInviteLink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_exportChatInviteLink.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//exportChatInviteLink/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_exportChatInviteLink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_exportChatInviteLink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_exportChatInviteLink.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_exportChatInviteLink.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//exportChatInviteLink/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_exportChatInviteLink.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_exportChatInviteLink.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    public enum post_sol_setChatPhoto {
        public static let id: Swift.String = "post/setChatPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatPhoto.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm/photo`.
                    public struct photoPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `photoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case photo(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatPhoto.Input.Body.multipartFormPayload.photoPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatPhoto.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_setChatPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatPhoto.Input.Headers = .init(),
                body: Operations.post_sol_setChatPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatPhoto.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatPhoto.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    public enum post_sol_deleteChatPhoto {
        public static let id: Swift.String = "post/deleteChatPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteChatPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatPhoto.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_deleteChatPhoto.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteChatPhoto.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteChatPhoto.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteChatPhoto.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatPhoto.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_deleteChatPhoto.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteChatPhoto.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteChatPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteChatPhoto.Input.Headers = .init(),
                body: Operations.post_sol_deleteChatPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteChatPhoto.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteChatPhoto.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteChatPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteChatPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteChatPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteChatPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    public enum post_sol_setChatTitle {
        public static let id: Swift.String = "post/setChatTitle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatTitle/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatTitle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatTitle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatTitle.Input.Headers
            /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setChatTitle.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// New chat title, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - title: New chat title, 1-255 characters
                    public init(
                        chat_id: Operations.post_sol_setChatTitle.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        title: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setChatTitle.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatTitle.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatTitle.Input.Body.multipartFormPayload.titlePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatTitle.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setChatTitle.Input.Body.jsonPayload.chat_idPayload
                    /// New chat title, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - title: New chat title, 1-255 characters
                    public init(
                        chat_id: Operations.post_sol_setChatTitle.Input.Body.jsonPayload.chat_idPayload,
                        title: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setChatTitle.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setChatTitle.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatTitle.Input.Headers = .init(),
                body: Operations.post_sol_setChatTitle.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatTitle.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatTitle.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatTitle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatTitle.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatTitle/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatTitle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatTitle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatTitle.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatTitle.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatTitle/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatTitle.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatTitle.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    public enum post_sol_setChatDescription {
        public static let id: Swift.String = "post/setChatDescription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatDescription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatDescription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatDescription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatDescription.Input.Headers
            /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setChatDescription.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// New chat description, 0-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - description: New chat description, 0-255 characters
                    public init(
                        chat_id: Operations.post_sol_setChatDescription.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        description: Swift.String? = nil
                    ) {
                        self.chat_id = chat_id
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setChatDescription.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatDescription.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm/description`.
                    public struct descriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `descriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatDescription.Input.Body.multipartFormPayload.descriptionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatDescription.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setChatDescription.Input.Body.jsonPayload.chat_idPayload
                    /// New chat description, 0-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - description: New chat description, 0-255 characters
                    public init(
                        chat_id: Operations.post_sol_setChatDescription.Input.Body.jsonPayload.chat_idPayload,
                        description: Swift.String? = nil
                    ) {
                        self.chat_id = chat_id
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setChatDescription.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setChatDescription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatDescription.Input.Headers = .init(),
                body: Operations.post_sol_setChatDescription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatDescription.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatDescription.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatDescription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatDescription.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatDescription/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatDescription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatDescription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatDescription.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatDescription.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatDescription/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatDescription.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatDescription.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    public enum post_sol_pinChatMessage {
        public static let id: Swift.String = "post/pinChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pinChatMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_pinChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_pinChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_pinChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_pinChatMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Identifier of a message to pin
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of a message to pin
                    ///   - disable_notification: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    public init(
                        chat_id: Operations.post_sol_pinChatMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int,
                        disable_notification: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.disable_notification = disable_notification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case disable_notification
                    }
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_pinChatMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_pinChatMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_pinChatMessage.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_pinChatMessage.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_pinChatMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_pinChatMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Identifier of a message to pin
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of a message to pin
                    ///   - disable_notification: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    public init(
                        chat_id: Operations.post_sol_pinChatMessage.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int,
                        disable_notification: Swift.Bool? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.disable_notification = disable_notification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case disable_notification
                    }
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_pinChatMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_pinChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_pinChatMessage.Input.Headers = .init(),
                body: Operations.post_sol_pinChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_pinChatMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_pinChatMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_pinChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_pinChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//pinChatMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_pinChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_pinChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_pinChatMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_pinChatMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//pinChatMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_pinChatMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_pinChatMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    public enum post_sol_unpinChatMessage {
        public static let id: Swift.String = "post/unpinChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unpinChatMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unpinChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unpinChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_unpinChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_unpinChatMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    public init(
                        chat_id: Operations.post_sol_unpinChatMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_unpinChatMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_unpinChatMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_unpinChatMessage.Input.Body.multipartFormPayload.message_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_unpinChatMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_unpinChatMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    public init(
                        chat_id: Operations.post_sol_unpinChatMessage.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_unpinChatMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_unpinChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_unpinChatMessage.Input.Headers = .init(),
                body: Operations.post_sol_unpinChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_unpinChatMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_unpinChatMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unpinChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unpinChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinChatMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_unpinChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_unpinChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unpinChatMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unpinChatMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinChatMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_unpinChatMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_unpinChatMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    public enum post_sol_unpinAllChatMessages {
        public static let id: Swift.String = "post/unpinAllChatMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unpinAllChatMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_unpinAllChatMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_unpinAllChatMessages.Input.Headers
            /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_unpinAllChatMessages.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_unpinAllChatMessages.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_unpinAllChatMessages.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_unpinAllChatMessages.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_unpinAllChatMessages.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_unpinAllChatMessages.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_unpinAllChatMessages.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_unpinAllChatMessages.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_unpinAllChatMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_unpinAllChatMessages.Input.Headers = .init(),
                body: Operations.post_sol_unpinAllChatMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_unpinAllChatMessages.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_unpinAllChatMessages.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unpinAllChatMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unpinAllChatMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinAllChatMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_unpinAllChatMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_unpinAllChatMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_unpinAllChatMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_unpinAllChatMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinAllChatMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_unpinAllChatMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_unpinAllChatMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    public enum post_sol_leaveChat {
        public static let id: Swift.String = "post/leaveChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/leaveChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_leaveChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_leaveChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_leaveChat.Input.Headers
            /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_leaveChat.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_leaveChat.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_leaveChat.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_leaveChat.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_leaveChat.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_leaveChat.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_leaveChat.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_leaveChat.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_leaveChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_leaveChat.Input.Headers = .init(),
                body: Operations.post_sol_leaveChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_leaveChat.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_leaveChat.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_leaveChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_leaveChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//leaveChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_leaveChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_leaveChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_leaveChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_leaveChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//leaveChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_leaveChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_leaveChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    public enum post_sol_getChat {
        public static let id: Swift.String = "post/getChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChat.Input.Headers
            /// - Remark: Generated from `#/paths/getChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getChat.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChat.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChat.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChat.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChat.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getChat.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChat.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChat.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChat.Input.Headers = .init(),
                body: Operations.post_sol_getChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Chat
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Chat
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChat.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChat.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    public enum post_sol_getChatAdministrators {
        public static let id: Swift.String = "post/getChatAdministrators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatAdministrators/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatAdministrators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatAdministrators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChatAdministrators.Input.Headers
            /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getChatAdministrators.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChatAdministrators.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChatAdministrators.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatAdministrators.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChatAdministrators.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getChatAdministrators.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChatAdministrators.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChatAdministrators.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChatAdministrators.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChatAdministrators.Input.Headers = .init(),
                body: Operations.post_sol_getChatAdministrators.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.ChatMember]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.ChatMember]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChatAdministrators.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChatAdministrators.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatAdministrators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatAdministrators.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatAdministrators/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChatAdministrators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChatAdministrators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatAdministrators.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatAdministrators.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatAdministrators/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChatAdministrators.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChatAdministrators.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    public enum post_sol_getChatMembersCount {
        public static let id: Swift.String = "post/getChatMembersCount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMembersCount/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMembersCount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMembersCount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChatMembersCount.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMembersCount.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChatMembersCount.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChatMembersCount.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMembersCount.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChatMembersCount.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMembersCount.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chat_id: Operations.post_sol_getChatMembersCount.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChatMembersCount.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChatMembersCount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChatMembersCount.Input.Headers = .init(),
                body: Operations.post_sol_getChatMembersCount.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json/result`.
                        public var result: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Int
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChatMembersCount.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChatMembersCount.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMembersCount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMembersCount.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembersCount/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChatMembersCount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChatMembersCount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMembersCount.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMembersCount.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembersCount/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChatMembersCount.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChatMembersCount.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    public enum post_sol_getChatMember {
        public static let id: Swift.String = "post/getChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    public init(
                        chat_id: Operations.post_sol_getChatMember.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        user_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getChatMember.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMember.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getChatMember.Input.Body.multipartFormPayload.user_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getChatMember.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_getChatMember.Input.Body.jsonPayload.chat_idPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - user_id: Unique identifier of the target user
                    public init(
                        chat_id: Operations.post_sol_getChatMember.Input.Body.jsonPayload.chat_idPayload,
                        user_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.user_id = user_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case user_id
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getChatMember.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getChatMember.Input.Headers = .init(),
                body: Operations.post_sol_getChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.ChatMember
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.ChatMember
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getChatMember.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getChatMember.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    public enum post_sol_setChatStickerSet {
        public static let id: Swift.String = "post/setChatStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setChatStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setChatStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_setChatStickerSet.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Name of the sticker set to be set as the group sticker set
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/sticker_set_name`.
                    public var sticker_set_name: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - sticker_set_name: Name of the sticker set to be set as the group sticker set
                    public init(
                        chat_id: Operations.post_sol_setChatStickerSet.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        sticker_set_name: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.sticker_set_name = sticker_set_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case sticker_set_name
                    }
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setChatStickerSet.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatStickerSet.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm/sticker_set_name`.
                    public struct sticker_set_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `sticker_set_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sticker_set_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_setChatStickerSet.Input.Body.multipartFormPayload.sticker_set_namePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setChatStickerSet.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_setChatStickerSet.Input.Body.jsonPayload.chat_idPayload
                    /// Name of the sticker set to be set as the group sticker set
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/sticker_set_name`.
                    public var sticker_set_name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - sticker_set_name: Name of the sticker set to be set as the group sticker set
                    public init(
                        chat_id: Operations.post_sol_setChatStickerSet.Input.Body.jsonPayload.chat_idPayload,
                        sticker_set_name: Swift.String
                    ) {
                        self.chat_id = chat_id
                        self.sticker_set_name = sticker_set_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case sticker_set_name
                    }
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setChatStickerSet.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setChatStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setChatStickerSet.Input.Headers = .init(),
                body: Operations.post_sol_setChatStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setChatStickerSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setChatStickerSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setChatStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setChatStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setChatStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setChatStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setChatStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setChatStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    public enum post_sol_deleteChatStickerSet {
        public static let id: Swift.String = "post/deleteChatStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteChatStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteChatStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatStickerSet.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    public init(chat_id: Operations.post_sol_deleteChatStickerSet.Input.Body.urlEncodedFormPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteChatStickerSet.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteChatStickerSet.Input.Body.multipartFormPayload.chat_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteChatStickerSet.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_deleteChatStickerSet.Input.Body.jsonPayload.chat_idPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    public init(chat_id: Operations.post_sol_deleteChatStickerSet.Input.Body.jsonPayload.chat_idPayload) {
                        self.chat_id = chat_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteChatStickerSet.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteChatStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteChatStickerSet.Input.Headers = .init(),
                body: Operations.post_sol_deleteChatStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteChatStickerSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteChatStickerSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteChatStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteChatStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteChatStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteChatStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteChatStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteChatStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    public enum post_sol_answerCallbackQuery {
        public static let id: Swift.String = "post/answerCallbackQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerCallbackQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerCallbackQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_answerCallbackQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/callback_query_id`.
                    public var callback_query_id: Swift.String
                    /// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String?
                    /// If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/show_alert`.
                    public var show_alert: Swift.Bool?
                    /// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///
                    /// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/url`.
                    public var url: Swift.String?
                    /// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/cache_time`.
                    public var cache_time: Swift.Int?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - callback_query_id: Unique identifier for the query to be answered
                    ///   - text: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///   - show_alert: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///   - url: URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///   - cache_time: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    public init(
                        callback_query_id: Swift.String,
                        text: Swift.String? = nil,
                        show_alert: Swift.Bool? = nil,
                        url: Swift.String? = nil,
                        cache_time: Swift.Int? = nil
                    ) {
                        self.callback_query_id = callback_query_id
                        self.text = text
                        self.show_alert = show_alert
                        self.url = url
                        self.cache_time = cache_time
                    }
                    public enum CodingKeys: String, CodingKey {
                        case callback_query_id
                        case text
                        case show_alert
                        case url
                        case cache_time
                    }
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_answerCallbackQuery.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/callback_query_id`.
                    public struct callback_query_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `callback_query_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case callback_query_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload.callback_query_idPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/text`.
                    public struct textPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `textPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload.textPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/show_alert`.
                    public struct show_alertPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `show_alertPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case show_alert(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload.show_alertPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/url`.
                    public struct urlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `urlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case url(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload.urlPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/cache_time`.
                    public struct cache_timePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `cache_timePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case cache_time(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload.cache_timePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_answerCallbackQuery.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/callback_query_id`.
                    public var callback_query_id: Swift.String
                    /// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/show_alert`.
                    public var show_alert: Swift.Bool?
                    /// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///
                    /// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/url`.
                    public var url: Swift.String?
                    /// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/cache_time`.
                    public var cache_time: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - callback_query_id: Unique identifier for the query to be answered
                    ///   - text: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///   - show_alert: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///   - url: URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///   - cache_time: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    public init(
                        callback_query_id: Swift.String,
                        text: Swift.String? = nil,
                        show_alert: Swift.Bool? = nil,
                        url: Swift.String? = nil,
                        cache_time: Swift.Int? = nil
                    ) {
                        self.callback_query_id = callback_query_id
                        self.text = text
                        self.show_alert = show_alert
                        self.url = url
                        self.cache_time = cache_time
                    }
                    public enum CodingKeys: String, CodingKey {
                        case callback_query_id
                        case text
                        case show_alert
                        case url
                        case cache_time
                    }
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_answerCallbackQuery.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_answerCallbackQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_answerCallbackQuery.Input.Headers = .init(),
                body: Operations.post_sol_answerCallbackQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_answerCallbackQuery.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_answerCallbackQuery.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerCallbackQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerCallbackQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerCallbackQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_answerCallbackQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_answerCallbackQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerCallbackQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerCallbackQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerCallbackQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_answerCallbackQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_answerCallbackQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    public enum post_sol_setMyCommands {
        public static let id: Swift.String = "post/setMyCommands"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setMyCommands/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setMyCommands.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setMyCommands.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setMyCommands.Input.Headers
            /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    ///
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/urlEncodedForm/commands`.
                    public var commands: [Components.Schemas.BotCommand]
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - commands: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    public init(commands: [Components.Schemas.BotCommand]) {
                        self.commands = commands
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commands
                    }
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setMyCommands.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/multipartForm/commands`.
                    public struct commandsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.BotCommand
                        /// Creates a new `commandsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.BotCommand) {
                            self.body = body
                        }
                    }
                    case commands(OpenAPIRuntime.MultipartPart<Operations.post_sol_setMyCommands.Input.Body.multipartFormPayload.commandsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setMyCommands.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    ///
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/json/commands`.
                    public var commands: [Components.Schemas.BotCommand]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commands: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    public init(commands: [Components.Schemas.BotCommand]) {
                        self.commands = commands
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commands
                    }
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setMyCommands.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setMyCommands.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setMyCommands.Input.Headers = .init(),
                body: Operations.post_sol_setMyCommands.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setMyCommands.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setMyCommands.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setMyCommands.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setMyCommands.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setMyCommands/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setMyCommands.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setMyCommands.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setMyCommands.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setMyCommands.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setMyCommands/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setMyCommands.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setMyCommands.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    public enum post_sol_getMyCommands {
        public static let id: Swift.String = "post/getMyCommands"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMyCommands/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMyCommands.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getMyCommands.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getMyCommands.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.post_sol_getMyCommands.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.BotCommand]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.BotCommand]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getMyCommands.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getMyCommands.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMyCommands.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMyCommands.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMyCommands/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getMyCommands.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getMyCommands.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getMyCommands.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getMyCommands.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMyCommands/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getMyCommands.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getMyCommands.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    public enum post_sol_editMessageText {
        public static let id: Swift.String = "post/editMessageText"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageText/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageText.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageText.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageText.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageText.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// New text of the message, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/disable_web_page_preview`.
                    public var disable_web_page_preview: Swift.Bool?
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - text: New text of the message, 1-4096 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disable_web_page_preview: Disables link previews for links in this message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageText.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        text: Swift.String,
                        parse_mode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_web_page_preview: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.text = text
                        self.parse_mode = parse_mode
                        self.entities = entities
                        self.disable_web_page_preview = disable_web_page_preview
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case text
                        case parse_mode
                        case entities
                        case disable_web_page_preview
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_editMessageText.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/text`.
                    public struct textPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `textPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.textPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/entities`.
                    public struct entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.entitiesPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/disable_web_page_preview`.
                    public struct disable_web_page_previewPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_web_page_previewPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_web_page_preview(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.disable_web_page_previewPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageText.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageText.Input.Body.jsonPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// New text of the message, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/disable_web_page_preview`.
                    public var disable_web_page_preview: Swift.Bool?
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - text: New text of the message, 1-4096 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disable_web_page_preview: Disables link previews for links in this message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageText.Input.Body.jsonPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        text: Swift.String,
                        parse_mode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disable_web_page_preview: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.text = text
                        self.parse_mode = parse_mode
                        self.entities = entities
                        self.disable_web_page_preview = disable_web_page_preview
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case text
                        case parse_mode
                        case entities
                        case disable_web_page_preview
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_editMessageText.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_editMessageText.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageText.Input.Headers = .init(),
                body: Operations.post_sol_editMessageText.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_editMessageText.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_editMessageText.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageText.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageText.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageText.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageText.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageText/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageText.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageText.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageText.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageText.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageText/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageText.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageText.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    public enum post_sol_editMessageCaption {
        public static let id: Swift.String = "post/editMessageCaption"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageCaption/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageCaption.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageCaption.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageCaption.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageCaption.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// New caption of the message, 0-1024 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/caption_entities`.
                    public var caption_entities: [Components.Schemas.MessageEntity]?
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - caption: New caption of the message, 0-1024 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - caption_entities: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageCaption.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        caption: Swift.String? = nil,
                        parse_mode: Swift.String? = nil,
                        caption_entities: [Components.Schemas.MessageEntity]? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.caption = caption
                        self.parse_mode = parse_mode
                        self.caption_entities = caption_entities
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case caption
                        case parse_mode
                        case caption_entities
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_editMessageCaption.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/caption`.
                    public struct captionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `captionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.captionPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/parse_mode`.
                    public struct parse_modePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `parse_modePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parse_mode(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.parse_modePayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/caption_entities`.
                    public struct caption_entitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `caption_entitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case caption_entities(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.caption_entitiesPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageCaption.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageCaption.Input.Body.jsonPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// New caption of the message, 0-1024 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/parse_mode`.
                    public var parse_mode: Swift.String?
                    /// List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/caption_entities`.
                    public var caption_entities: [Components.Schemas.MessageEntity]?
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - caption: New caption of the message, 0-1024 characters after entities parsing
                    ///   - parse_mode: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - caption_entities: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageCaption.Input.Body.jsonPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        caption: Swift.String? = nil,
                        parse_mode: Swift.String? = nil,
                        caption_entities: [Components.Schemas.MessageEntity]? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.caption = caption
                        self.parse_mode = parse_mode
                        self.caption_entities = caption_entities
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case caption
                        case parse_mode
                        case caption_entities
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_editMessageCaption.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_editMessageCaption.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageCaption.Input.Headers = .init(),
                body: Operations.post_sol_editMessageCaption.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_editMessageCaption.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_editMessageCaption.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageCaption.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageCaption.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageCaption.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageCaption.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageCaption/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageCaption.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageCaption.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageCaption.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageCaption.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageCaption/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageCaption.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageCaption.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    public enum post_sol_editMessageMedia {
        public static let id: Swift.String = "post/editMessageMedia"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageMedia/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageMedia.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageMedia.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageMedia.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/media`.
                    public struct mediaPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputMedia
                        /// Creates a new `mediaPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputMedia) {
                            self.body = body
                        }
                    }
                    case media(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload.mediaPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageMedia.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_editMessageMedia.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageMedia.Input.Headers = .init(),
                body: Operations.post_sol_editMessageMedia.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_editMessageMedia.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_editMessageMedia.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageMedia.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageMedia.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageMedia.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageMedia.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageMedia/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageMedia.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageMedia.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageMedia.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageMedia.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageMedia/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageMedia.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageMedia.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    public enum post_sol_editMessageReplyMarkup {
        public static let id: Swift.String = "post/editMessageReplyMarkup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageReplyMarkup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_editMessageReplyMarkup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_editMessageReplyMarkup.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageReplyMarkup.Input.Body.urlEncodedFormPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageReplyMarkup.Input.Body.urlEncodedFormPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_editMessageReplyMarkup.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageReplyMarkup.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageReplyMarkup.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageReplyMarkup.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_editMessageReplyMarkup.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_editMessageReplyMarkup.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_editMessageReplyMarkup.Input.Body.jsonPayload.chat_idPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_editMessageReplyMarkup.Input.Body.jsonPayload.chat_idPayload? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case inline_message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_editMessageReplyMarkup.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_editMessageReplyMarkup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_editMessageReplyMarkup.Input.Headers = .init(),
                body: Operations.post_sol_editMessageReplyMarkup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageReplyMarkup.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_editMessageReplyMarkup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_editMessageReplyMarkup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_editMessageReplyMarkup.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_editMessageReplyMarkup.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_editMessageReplyMarkup.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_editMessageReplyMarkup.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    public enum post_sol_stopPoll {
        public static let id: Swift.String = "post/stopPoll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stopPoll/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_stopPoll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_stopPoll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_stopPoll.Input.Headers
            /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_stopPoll.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Identifier of the original message with the poll
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the original message with the poll
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_stopPoll.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_stopPoll.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopPoll.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopPoll.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_stopPoll.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_stopPoll.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_stopPoll.Input.Body.jsonPayload.chat_idPayload
                    /// Identifier of the original message with the poll
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the original message with the poll
                    ///   - reply_markup:
                    public init(
                        chat_id: Operations.post_sol_stopPoll.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_stopPoll.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_stopPoll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_stopPoll.Input.Headers = .init(),
                body: Operations.post_sol_stopPoll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Poll
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Poll
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_stopPoll.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_stopPoll.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_stopPoll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_stopPoll.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopPoll/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_stopPoll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_stopPoll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_stopPoll.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_stopPoll.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopPoll/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_stopPoll.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_stopPoll.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    public enum post_sol_deleteMessage {
        public static let id: Swift.String = "post/deleteMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteMessage.Input.Headers
            /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Operations.post_sol_deleteMessage.Input.Body.urlEncodedFormPayload.chat_idPayload
                    /// Identifier of the message to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the message to delete
                    public init(
                        chat_id: Operations.post_sol_deleteMessage.Input.Body.urlEncodedFormPayload.chat_idPayload,
                        message_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteMessage.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessage.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteMessage.Input.Body.multipartFormPayload.message_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteMessage.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id`.
                    public struct chat_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id`.
                    public var chat_id: Operations.post_sol_deleteMessage.Input.Body.jsonPayload.chat_idPayload
                    /// Identifier of the message to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - message_id: Identifier of the message to delete
                    public init(
                        chat_id: Operations.post_sol_deleteMessage.Input.Body.jsonPayload.chat_idPayload,
                        message_id: Swift.Int
                    ) {
                        self.chat_id = chat_id
                        self.message_id = message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case message_id
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteMessage.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteMessage.Input.Headers = .init(),
                body: Operations.post_sol_deleteMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    public enum post_sol_sendSticker {
        public static let id: Swift.String = "post/sendSticker"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendSticker/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendSticker.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendSticker.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendSticker.Input.Headers
            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker`.
                    public struct stickerPayload: Sendable, Hashable {
                        /// Sticker to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.stickerPayload.bodyPayload
                        /// Creates a new `stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.stickerPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.stickerPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.reply_markupPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.reply_markupPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/send_at`.
                    public struct send_atPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_atPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_at(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload.send_atPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendSticker.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_sendSticker.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendSticker.Input.Headers = .init(),
                body: Operations.post_sol_sendSticker.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendSticker.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendSticker.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendSticker.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendSticker.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendSticker/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendSticker.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendSticker.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendSticker.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendSticker.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendSticker/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendSticker.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendSticker.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    public enum post_sol_getStickerSet {
        public static let id: Swift.String = "post/getStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Name of the sticker set
                    ///
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/urlEncodedForm/name`.
                    public var name: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the sticker set
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getStickerSet.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/multipartForm/name`.
                    public struct namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.post_sol_getStickerSet.Input.Body.multipartFormPayload.namePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getStickerSet.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Name of the sticker set
                    ///
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the sticker set
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getStickerSet.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getStickerSet.Input.Headers = .init(),
                body: Operations.post_sol_getStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.StickerSet
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.StickerSet
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getStickerSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getStickerSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    public enum post_sol_uploadStickerFile {
        public static let id: Swift.String = "post/uploadStickerFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploadStickerFile/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_uploadStickerFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_uploadStickerFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_uploadStickerFile.Input.Headers
            /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_uploadStickerFile.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm/png_sticker`.
                    public struct png_stickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `png_stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case png_sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_uploadStickerFile.Input.Body.multipartFormPayload.png_stickerPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_uploadStickerFile.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_uploadStickerFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_uploadStickerFile.Input.Headers = .init(),
                body: Operations.post_sol_uploadStickerFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.File
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.File
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_uploadStickerFile.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_uploadStickerFile.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_uploadStickerFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_uploadStickerFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//uploadStickerFile/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_uploadStickerFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_uploadStickerFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_uploadStickerFile.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_uploadStickerFile.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//uploadStickerFile/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_uploadStickerFile.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_uploadStickerFile.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    public enum post_sol_createNewStickerSet {
        public static let id: Swift.String = "post/createNewStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_createNewStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_createNewStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_createNewStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/name`.
                    public struct namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.namePayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.titlePayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker`.
                    public struct png_stickerPayload: Sendable, Hashable {
                        /// **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.png_stickerPayload.bodyPayload
                        /// Creates a new `png_stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.png_stickerPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case png_sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.png_stickerPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/tgs_sticker`.
                    public struct tgs_stickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `tgs_stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case tgs_sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.tgs_stickerPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/emojis`.
                    public struct emojisPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `emojisPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emojis(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.emojisPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/contains_masks`.
                    public struct contains_masksPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `contains_masksPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case contains_masks(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.contains_masksPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/mask_position`.
                    public struct mask_positionPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MaskPosition
                        /// Creates a new `mask_positionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MaskPosition) {
                            self.body = body
                        }
                    }
                    case mask_position(OpenAPIRuntime.MultipartPart<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload.mask_positionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_createNewStickerSet.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_createNewStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_createNewStickerSet.Input.Headers = .init(),
                body: Operations.post_sol_createNewStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_createNewStickerSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_createNewStickerSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_createNewStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_createNewStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createNewStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_createNewStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_createNewStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_createNewStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_createNewStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createNewStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_createNewStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_createNewStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    public enum post_sol_addStickerToSet {
        public static let id: Swift.String = "post/addStickerToSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addStickerToSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addStickerToSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_addStickerToSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_addStickerToSet.Input.Headers
            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/name`.
                    public struct namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.namePayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker`.
                    public struct png_stickerPayload: Sendable, Hashable {
                        /// **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.png_stickerPayload.bodyPayload
                        /// Creates a new `png_stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.png_stickerPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case png_sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.png_stickerPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/tgs_sticker`.
                    public struct tgs_stickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `tgs_stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case tgs_sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.tgs_stickerPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/emojis`.
                    public struct emojisPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `emojisPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emojis(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.emojisPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/mask_position`.
                    public struct mask_positionPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MaskPosition
                        /// Creates a new `mask_positionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MaskPosition) {
                            self.body = body
                        }
                    }
                    case mask_position(OpenAPIRuntime.MultipartPart<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload.mask_positionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_addStickerToSet.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_addStickerToSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_addStickerToSet.Input.Headers = .init(),
                body: Operations.post_sol_addStickerToSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_addStickerToSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_addStickerToSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addStickerToSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addStickerToSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addStickerToSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_addStickerToSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_addStickerToSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_addStickerToSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_addStickerToSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addStickerToSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_addStickerToSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_addStickerToSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    public enum post_sol_setStickerPositionInSet {
        public static let id: Swift.String = "post/setStickerPositionInSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setStickerPositionInSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setStickerPositionInSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setStickerPositionInSet.Input.Headers
            /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm/sticker`.
                    public var sticker: Swift.String
                    /// New sticker position in the set, zero-based
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm/position`.
                    public var position: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    ///   - position: New sticker position in the set, zero-based
                    public init(
                        sticker: Swift.String,
                        position: Swift.Int
                    ) {
                        self.sticker = sticker
                        self.position = position
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setStickerPositionInSet.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm/sticker`.
                    public struct stickerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_setStickerPositionInSet.Input.Body.multipartFormPayload.stickerPayload>)
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm/position`.
                    public struct positionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `positionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case position(OpenAPIRuntime.MultipartPart<Operations.post_sol_setStickerPositionInSet.Input.Body.multipartFormPayload.positionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setStickerPositionInSet.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json/sticker`.
                    public var sticker: Swift.String
                    /// New sticker position in the set, zero-based
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json/position`.
                    public var position: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    ///   - position: New sticker position in the set, zero-based
                    public init(
                        sticker: Swift.String,
                        position: Swift.Int
                    ) {
                        self.sticker = sticker
                        self.position = position
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setStickerPositionInSet.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setStickerPositionInSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setStickerPositionInSet.Input.Headers = .init(),
                body: Operations.post_sol_setStickerPositionInSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setStickerPositionInSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setStickerPositionInSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setStickerPositionInSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setStickerPositionInSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerPositionInSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setStickerPositionInSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setStickerPositionInSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setStickerPositionInSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setStickerPositionInSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerPositionInSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setStickerPositionInSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setStickerPositionInSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    public enum post_sol_deleteStickerFromSet {
        public static let id: Swift.String = "post/deleteStickerFromSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteStickerFromSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_deleteStickerFromSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_deleteStickerFromSet.Input.Headers
            /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/urlEncodedForm/sticker`.
                    public var sticker: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    public init(sticker: Swift.String) {
                        self.sticker = sticker
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                    }
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_deleteStickerFromSet.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/multipartForm/sticker`.
                    public struct stickerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `stickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.post_sol_deleteStickerFromSet.Input.Body.multipartFormPayload.stickerPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_deleteStickerFromSet.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/json/sticker`.
                    public var sticker: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    public init(sticker: Swift.String) {
                        self.sticker = sticker
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                    }
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_deleteStickerFromSet.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_deleteStickerFromSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_deleteStickerFromSet.Input.Headers = .init(),
                body: Operations.post_sol_deleteStickerFromSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_deleteStickerFromSet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_deleteStickerFromSet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteStickerFromSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteStickerFromSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteStickerFromSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_deleteStickerFromSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_deleteStickerFromSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_deleteStickerFromSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_deleteStickerFromSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteStickerFromSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_deleteStickerFromSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_deleteStickerFromSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    public enum post_sol_setStickerSetThumb {
        public static let id: Swift.String = "post/setStickerSetThumb"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setStickerSetThumb.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setStickerSetThumb.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setStickerSetThumb.Input.Headers
            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/name`.
                    public struct namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload.namePayload>)
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb`.
                    public struct thumbPayload: Sendable, Hashable {
                        /// A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.
                        ///
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload.thumbPayload.bodyPayload
                        /// Creates a new `thumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload.thumbPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload.thumbPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setStickerSetThumb.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_setStickerSetThumb.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setStickerSetThumb.Input.Headers = .init(),
                body: Operations.post_sol_setStickerSetThumb.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setStickerSetThumb.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setStickerSetThumb.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setStickerSetThumb.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setStickerSetThumb.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerSetThumb/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setStickerSetThumb.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setStickerSetThumb.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setStickerSetThumb.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setStickerSetThumb.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerSetThumb/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setStickerSetThumb.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setStickerSetThumb.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    public enum post_sol_answerInlineQuery {
        public static let id: Swift.String = "post/answerInlineQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerInlineQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerInlineQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerInlineQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_answerInlineQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the answered query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/inline_query_id`.
                    public var inline_query_id: Swift.String
                    /// A JSON-serialized array of results for the inline query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/results`.
                    public var results: [Components.Schemas.InlineQueryResult]
                    /// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/cache_time`.
                    public var cache_time: Swift.Int?
                    /// Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/is_personal`.
                    public var is_personal: Swift.Bool?
                    /// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/next_offset`.
                    public var next_offset: Swift.String?
                    /// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/switch_pm_text`.
                    public var switch_pm_text: Swift.String?
                    /// [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    ///
                    /// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/switch_pm_parameter`.
                    public var switch_pm_parameter: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - inline_query_id: Unique identifier for the answered query
                    ///   - results: A JSON-serialized array of results for the inline query
                    ///   - cache_time: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///   - is_personal: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///   - next_offset: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///   - switch_pm_text: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///   - switch_pm_parameter: [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    public init(
                        inline_query_id: Swift.String,
                        results: [Components.Schemas.InlineQueryResult],
                        cache_time: Swift.Int? = nil,
                        is_personal: Swift.Bool? = nil,
                        next_offset: Swift.String? = nil,
                        switch_pm_text: Swift.String? = nil,
                        switch_pm_parameter: Swift.String? = nil
                    ) {
                        self.inline_query_id = inline_query_id
                        self.results = results
                        self.cache_time = cache_time
                        self.is_personal = is_personal
                        self.next_offset = next_offset
                        self.switch_pm_text = switch_pm_text
                        self.switch_pm_parameter = switch_pm_parameter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inline_query_id
                        case results
                        case cache_time
                        case is_personal
                        case next_offset
                        case switch_pm_text
                        case switch_pm_parameter
                    }
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_answerInlineQuery.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/inline_query_id`.
                    public struct inline_query_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_query_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_query_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.inline_query_idPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/results`.
                    public struct resultsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineQueryResult
                        /// Creates a new `resultsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineQueryResult) {
                            self.body = body
                        }
                    }
                    case results(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.resultsPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/cache_time`.
                    public struct cache_timePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `cache_timePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case cache_time(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.cache_timePayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/is_personal`.
                    public struct is_personalPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `is_personalPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case is_personal(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.is_personalPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/next_offset`.
                    public struct next_offsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `next_offsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case next_offset(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.next_offsetPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/switch_pm_text`.
                    public struct switch_pm_textPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `switch_pm_textPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case switch_pm_text(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.switch_pm_textPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/switch_pm_parameter`.
                    public struct switch_pm_parameterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `switch_pm_parameterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case switch_pm_parameter(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload.switch_pm_parameterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_answerInlineQuery.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the answered query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/inline_query_id`.
                    public var inline_query_id: Swift.String
                    /// A JSON-serialized array of results for the inline query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/results`.
                    public var results: [Components.Schemas.InlineQueryResult]
                    /// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/cache_time`.
                    public var cache_time: Swift.Int?
                    /// Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/is_personal`.
                    public var is_personal: Swift.Bool?
                    /// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/next_offset`.
                    public var next_offset: Swift.String?
                    /// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/switch_pm_text`.
                    public var switch_pm_text: Swift.String?
                    /// [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    ///
                    /// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/switch_pm_parameter`.
                    public var switch_pm_parameter: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inline_query_id: Unique identifier for the answered query
                    ///   - results: A JSON-serialized array of results for the inline query
                    ///   - cache_time: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///   - is_personal: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///   - next_offset: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///   - switch_pm_text: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///   - switch_pm_parameter: [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    public init(
                        inline_query_id: Swift.String,
                        results: [Components.Schemas.InlineQueryResult],
                        cache_time: Swift.Int? = nil,
                        is_personal: Swift.Bool? = nil,
                        next_offset: Swift.String? = nil,
                        switch_pm_text: Swift.String? = nil,
                        switch_pm_parameter: Swift.String? = nil
                    ) {
                        self.inline_query_id = inline_query_id
                        self.results = results
                        self.cache_time = cache_time
                        self.is_personal = is_personal
                        self.next_offset = next_offset
                        self.switch_pm_text = switch_pm_text
                        self.switch_pm_parameter = switch_pm_parameter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inline_query_id
                        case results
                        case cache_time
                        case is_personal
                        case next_offset
                        case switch_pm_text
                        case switch_pm_parameter
                    }
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_answerInlineQuery.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_answerInlineQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_answerInlineQuery.Input.Headers = .init(),
                body: Operations.post_sol_answerInlineQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_answerInlineQuery.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_answerInlineQuery.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerInlineQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerInlineQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerInlineQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_answerInlineQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_answerInlineQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerInlineQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerInlineQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerInlineQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_answerInlineQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_answerInlineQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    public enum post_sol_sendInvoice {
        public static let id: Swift.String = "post/sendInvoice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendInvoice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendInvoice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendInvoice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendInvoice.Input.Headers
            /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target private chat
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Swift.Int
                    /// Product name, 1-32 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Product description, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String
                    /// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/payload`.
                    public var payload: Swift.String
                    /// Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/provider_token`.
                    public var provider_token: Swift.String
                    /// Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/start_parameter`.
                    public var start_parameter: Swift.String
                    /// Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/currency`.
                    public var currency: Swift.String
                    /// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/prices`.
                    public var prices: [Components.Schemas.LabeledPrice]
                    /// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/provider_data`.
                    public var provider_data: Swift.String?
                    /// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_url`.
                    public var photo_url: Swift.String?
                    /// Photo size
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_size`.
                    public var photo_size: Swift.Int?
                    /// Photo width
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_width`.
                    public var photo_width: Swift.Int?
                    /// Photo height
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_height`.
                    public var photo_height: Swift.Int?
                    /// Pass *True*, if you require the user's full name to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_name`.
                    public var need_name: Swift.Bool?
                    /// Pass *True*, if you require the user's phone number to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_phone_number`.
                    public var need_phone_number: Swift.Bool?
                    /// Pass *True*, if you require the user's email address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_email`.
                    public var need_email: Swift.Bool?
                    /// Pass *True*, if you require the user's shipping address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_shipping_address`.
                    public var need_shipping_address: Swift.Bool?
                    /// Pass *True*, if user's phone number should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/send_phone_number_to_provider`.
                    public var send_phone_number_to_provider: Swift.Bool?
                    /// Pass *True*, if user's email address should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/send_email_to_provider`.
                    public var send_email_to_provider: Swift.Bool?
                    /// Pass *True*, if the final price depends on the shipping method
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/is_flexible`.
                    public var is_flexible: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target private chat
                    ///   - title: Product name, 1-32 characters
                    ///   - description: Product description, 1-255 characters
                    ///   - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///   - provider_token: Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///   - start_parameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///   - currency: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///   - prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///   - provider_data: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///   - photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///   - photo_size: Photo size
                    ///   - photo_width: Photo width
                    ///   - photo_height: Photo height
                    ///   - need_name: Pass *True*, if you require the user's full name to complete the order
                    ///   - need_phone_number: Pass *True*, if you require the user's phone number to complete the order
                    ///   - need_email: Pass *True*, if you require the user's email address to complete the order
                    ///   - need_shipping_address: Pass *True*, if you require the user's shipping address to complete the order
                    ///   - send_phone_number_to_provider: Pass *True*, if user's phone number should be sent to provider
                    ///   - send_email_to_provider: Pass *True*, if user's email address should be sent to provider
                    ///   - is_flexible: Pass *True*, if the final price depends on the shipping method
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup:
                    public init(
                        chat_id: Swift.Int,
                        title: Swift.String,
                        description: Swift.String,
                        payload: Swift.String,
                        provider_token: Swift.String,
                        start_parameter: Swift.String,
                        currency: Swift.String,
                        prices: [Components.Schemas.LabeledPrice],
                        provider_data: Swift.String? = nil,
                        photo_url: Swift.String? = nil,
                        photo_size: Swift.Int? = nil,
                        photo_width: Swift.Int? = nil,
                        photo_height: Swift.Int? = nil,
                        need_name: Swift.Bool? = nil,
                        need_phone_number: Swift.Bool? = nil,
                        need_email: Swift.Bool? = nil,
                        need_shipping_address: Swift.Bool? = nil,
                        send_phone_number_to_provider: Swift.Bool? = nil,
                        send_email_to_provider: Swift.Bool? = nil,
                        is_flexible: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.title = title
                        self.description = description
                        self.payload = payload
                        self.provider_token = provider_token
                        self.start_parameter = start_parameter
                        self.currency = currency
                        self.prices = prices
                        self.provider_data = provider_data
                        self.photo_url = photo_url
                        self.photo_size = photo_size
                        self.photo_width = photo_width
                        self.photo_height = photo_height
                        self.need_name = need_name
                        self.need_phone_number = need_phone_number
                        self.need_email = need_email
                        self.need_shipping_address = need_shipping_address
                        self.send_phone_number_to_provider = send_phone_number_to_provider
                        self.send_email_to_provider = send_email_to_provider
                        self.is_flexible = is_flexible
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case title
                        case description
                        case payload
                        case provider_token
                        case start_parameter
                        case currency
                        case prices
                        case provider_data
                        case photo_url
                        case photo_size
                        case photo_width
                        case photo_height
                        case need_name
                        case need_phone_number
                        case need_email
                        case need_shipping_address
                        case send_phone_number_to_provider
                        case send_email_to_provider
                        case is_flexible
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendInvoice.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/title`.
                    public struct titlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `titlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.titlePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/description`.
                    public struct descriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `descriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.descriptionPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/payload`.
                    public struct payloadPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `payloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case payload(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.payloadPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/provider_token`.
                    public struct provider_tokenPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `provider_tokenPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case provider_token(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.provider_tokenPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/start_parameter`.
                    public struct start_parameterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `start_parameterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case start_parameter(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.start_parameterPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/currency`.
                    public struct currencyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `currencyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case currency(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.currencyPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/prices`.
                    public struct pricesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.LabeledPrice
                        /// Creates a new `pricesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.LabeledPrice) {
                            self.body = body
                        }
                    }
                    case prices(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.pricesPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/provider_data`.
                    public struct provider_dataPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `provider_dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case provider_data(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.provider_dataPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_url`.
                    public struct photo_urlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `photo_urlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photo_url(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.photo_urlPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_size`.
                    public struct photo_sizePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `photo_sizePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photo_size(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.photo_sizePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_width`.
                    public struct photo_widthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `photo_widthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photo_width(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.photo_widthPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_height`.
                    public struct photo_heightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `photo_heightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photo_height(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.photo_heightPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_name`.
                    public struct need_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `need_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case need_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.need_namePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_phone_number`.
                    public struct need_phone_numberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `need_phone_numberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case need_phone_number(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.need_phone_numberPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_email`.
                    public struct need_emailPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `need_emailPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case need_email(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.need_emailPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_shipping_address`.
                    public struct need_shipping_addressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `need_shipping_addressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case need_shipping_address(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.need_shipping_addressPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/send_phone_number_to_provider`.
                    public struct send_phone_number_to_providerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_phone_number_to_providerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_phone_number_to_provider(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.send_phone_number_to_providerPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/send_email_to_provider`.
                    public struct send_email_to_providerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `send_email_to_providerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case send_email_to_provider(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.send_email_to_providerPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/is_flexible`.
                    public struct is_flexiblePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `is_flexiblePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case is_flexible(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.is_flexiblePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendInvoice.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target private chat
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/chat_id`.
                    public var chat_id: Swift.Int
                    /// Product name, 1-32 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Product description, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/description`.
                    public var description: Swift.String
                    /// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/payload`.
                    public var payload: Swift.String
                    /// Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/provider_token`.
                    public var provider_token: Swift.String
                    /// Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/start_parameter`.
                    public var start_parameter: Swift.String
                    /// Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/currency`.
                    public var currency: Swift.String
                    /// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/prices`.
                    public var prices: [Components.Schemas.LabeledPrice]
                    /// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/provider_data`.
                    public var provider_data: Swift.String?
                    /// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_url`.
                    public var photo_url: Swift.String?
                    /// Photo size
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_size`.
                    public var photo_size: Swift.Int?
                    /// Photo width
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_width`.
                    public var photo_width: Swift.Int?
                    /// Photo height
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_height`.
                    public var photo_height: Swift.Int?
                    /// Pass *True*, if you require the user's full name to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_name`.
                    public var need_name: Swift.Bool?
                    /// Pass *True*, if you require the user's phone number to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_phone_number`.
                    public var need_phone_number: Swift.Bool?
                    /// Pass *True*, if you require the user's email address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_email`.
                    public var need_email: Swift.Bool?
                    /// Pass *True*, if you require the user's shipping address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_shipping_address`.
                    public var need_shipping_address: Swift.Bool?
                    /// Pass *True*, if user's phone number should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/send_phone_number_to_provider`.
                    public var send_phone_number_to_provider: Swift.Bool?
                    /// Pass *True*, if user's email address should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/send_email_to_provider`.
                    public var send_email_to_provider: Swift.Bool?
                    /// Pass *True*, if the final price depends on the shipping method
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/is_flexible`.
                    public var is_flexible: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target private chat
                    ///   - title: Product name, 1-32 characters
                    ///   - description: Product description, 1-255 characters
                    ///   - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///   - provider_token: Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///   - start_parameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///   - currency: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///   - prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///   - provider_data: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///   - photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///   - photo_size: Photo size
                    ///   - photo_width: Photo width
                    ///   - photo_height: Photo height
                    ///   - need_name: Pass *True*, if you require the user's full name to complete the order
                    ///   - need_phone_number: Pass *True*, if you require the user's phone number to complete the order
                    ///   - need_email: Pass *True*, if you require the user's email address to complete the order
                    ///   - need_shipping_address: Pass *True*, if you require the user's shipping address to complete the order
                    ///   - send_phone_number_to_provider: Pass *True*, if user's phone number should be sent to provider
                    ///   - send_email_to_provider: Pass *True*, if user's email address should be sent to provider
                    ///   - is_flexible: Pass *True*, if the final price depends on the shipping method
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup:
                    public init(
                        chat_id: Swift.Int,
                        title: Swift.String,
                        description: Swift.String,
                        payload: Swift.String,
                        provider_token: Swift.String,
                        start_parameter: Swift.String,
                        currency: Swift.String,
                        prices: [Components.Schemas.LabeledPrice],
                        provider_data: Swift.String? = nil,
                        photo_url: Swift.String? = nil,
                        photo_size: Swift.Int? = nil,
                        photo_width: Swift.Int? = nil,
                        photo_height: Swift.Int? = nil,
                        need_name: Swift.Bool? = nil,
                        need_phone_number: Swift.Bool? = nil,
                        need_email: Swift.Bool? = nil,
                        need_shipping_address: Swift.Bool? = nil,
                        send_phone_number_to_provider: Swift.Bool? = nil,
                        send_email_to_provider: Swift.Bool? = nil,
                        is_flexible: Swift.Bool? = nil,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.title = title
                        self.description = description
                        self.payload = payload
                        self.provider_token = provider_token
                        self.start_parameter = start_parameter
                        self.currency = currency
                        self.prices = prices
                        self.provider_data = provider_data
                        self.photo_url = photo_url
                        self.photo_size = photo_size
                        self.photo_width = photo_width
                        self.photo_height = photo_height
                        self.need_name = need_name
                        self.need_phone_number = need_phone_number
                        self.need_email = need_email
                        self.need_shipping_address = need_shipping_address
                        self.send_phone_number_to_provider = send_phone_number_to_provider
                        self.send_email_to_provider = send_email_to_provider
                        self.is_flexible = is_flexible
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case title
                        case description
                        case payload
                        case provider_token
                        case start_parameter
                        case currency
                        case prices
                        case provider_data
                        case photo_url
                        case photo_size
                        case photo_width
                        case photo_height
                        case need_name
                        case need_phone_number
                        case need_email
                        case need_shipping_address
                        case send_phone_number_to_provider
                        case send_email_to_provider
                        case is_flexible
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendInvoice.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendInvoice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendInvoice.Input.Headers = .init(),
                body: Operations.post_sol_sendInvoice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendInvoice.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendInvoice.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendInvoice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendInvoice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendInvoice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendInvoice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendInvoice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendInvoice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendInvoice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendInvoice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendInvoice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendInvoice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    public enum post_sol_answerShippingQuery {
        public static let id: Swift.String = "post/answerShippingQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerShippingQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerShippingQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerShippingQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_answerShippingQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/shipping_query_id`.
                    public var shipping_query_id: Swift.String
                    /// Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/shipping_options`.
                    public var shipping_options: [Components.Schemas.ShippingOption]?
                    /// Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/error_message`.
                    public var error_message: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - shipping_query_id: Unique identifier for the query to be answered
                    ///   - ok: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///   - shipping_options: Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///   - error_message: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    public init(
                        shipping_query_id: Swift.String,
                        ok: Swift.Bool,
                        shipping_options: [Components.Schemas.ShippingOption]? = nil,
                        error_message: Swift.String? = nil
                    ) {
                        self.shipping_query_id = shipping_query_id
                        self.ok = ok
                        self.shipping_options = shipping_options
                        self.error_message = error_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case shipping_query_id
                        case ok
                        case shipping_options
                        case error_message
                    }
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_answerShippingQuery.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/shipping_query_id`.
                    public struct shipping_query_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `shipping_query_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case shipping_query_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerShippingQuery.Input.Body.multipartFormPayload.shipping_query_idPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/ok`.
                    public struct okPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `okPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ok(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerShippingQuery.Input.Body.multipartFormPayload.okPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/shipping_options`.
                    public struct shipping_optionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ShippingOption
                        /// Creates a new `shipping_optionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ShippingOption) {
                            self.body = body
                        }
                    }
                    case shipping_options(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerShippingQuery.Input.Body.multipartFormPayload.shipping_optionsPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/error_message`.
                    public struct error_messagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `error_messagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case error_message(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerShippingQuery.Input.Body.multipartFormPayload.error_messagePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_answerShippingQuery.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/shipping_query_id`.
                    public var shipping_query_id: Swift.String
                    /// Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/shipping_options`.
                    public var shipping_options: [Components.Schemas.ShippingOption]?
                    /// Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/error_message`.
                    public var error_message: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - shipping_query_id: Unique identifier for the query to be answered
                    ///   - ok: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///   - shipping_options: Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///   - error_message: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    public init(
                        shipping_query_id: Swift.String,
                        ok: Swift.Bool,
                        shipping_options: [Components.Schemas.ShippingOption]? = nil,
                        error_message: Swift.String? = nil
                    ) {
                        self.shipping_query_id = shipping_query_id
                        self.ok = ok
                        self.shipping_options = shipping_options
                        self.error_message = error_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case shipping_query_id
                        case ok
                        case shipping_options
                        case error_message
                    }
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_answerShippingQuery.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_answerShippingQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_answerShippingQuery.Input.Headers = .init(),
                body: Operations.post_sol_answerShippingQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_answerShippingQuery.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_answerShippingQuery.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerShippingQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerShippingQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerShippingQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_answerShippingQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_answerShippingQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerShippingQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerShippingQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerShippingQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_answerShippingQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_answerShippingQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    public enum post_sol_answerPreCheckoutQuery {
        public static let id: Swift.String = "post/answerPreCheckoutQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerPreCheckoutQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_answerPreCheckoutQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_answerPreCheckoutQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/pre_checkout_query_id`.
                    public var pre_checkout_query_id: Swift.String
                    /// Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/error_message`.
                    public var error_message: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - pre_checkout_query_id: Unique identifier for the query to be answered
                    ///   - ok: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///   - error_message: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    public init(
                        pre_checkout_query_id: Swift.String,
                        ok: Swift.Bool,
                        error_message: Swift.String? = nil
                    ) {
                        self.pre_checkout_query_id = pre_checkout_query_id
                        self.ok = ok
                        self.error_message = error_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case pre_checkout_query_id
                        case ok
                        case error_message
                    }
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_answerPreCheckoutQuery.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/pre_checkout_query_id`.
                    public struct pre_checkout_query_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `pre_checkout_query_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case pre_checkout_query_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerPreCheckoutQuery.Input.Body.multipartFormPayload.pre_checkout_query_idPayload>)
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/ok`.
                    public struct okPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `okPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ok(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerPreCheckoutQuery.Input.Body.multipartFormPayload.okPayload>)
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/error_message`.
                    public struct error_messagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `error_messagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case error_message(OpenAPIRuntime.MultipartPart<Operations.post_sol_answerPreCheckoutQuery.Input.Body.multipartFormPayload.error_messagePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_answerPreCheckoutQuery.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/pre_checkout_query_id`.
                    public var pre_checkout_query_id: Swift.String
                    /// Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/error_message`.
                    public var error_message: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - pre_checkout_query_id: Unique identifier for the query to be answered
                    ///   - ok: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///   - error_message: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    public init(
                        pre_checkout_query_id: Swift.String,
                        ok: Swift.Bool,
                        error_message: Swift.String? = nil
                    ) {
                        self.pre_checkout_query_id = pre_checkout_query_id
                        self.ok = ok
                        self.error_message = error_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case pre_checkout_query_id
                        case ok
                        case error_message
                    }
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_answerPreCheckoutQuery.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_answerPreCheckoutQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_answerPreCheckoutQuery.Input.Headers = .init(),
                body: Operations.post_sol_answerPreCheckoutQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_answerPreCheckoutQuery.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_answerPreCheckoutQuery.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerPreCheckoutQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerPreCheckoutQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_answerPreCheckoutQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_answerPreCheckoutQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_answerPreCheckoutQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_answerPreCheckoutQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_answerPreCheckoutQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_answerPreCheckoutQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    public enum post_sol_setPassportDataErrors {
        public static let id: Swift.String = "post/setPassportDataErrors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setPassportDataErrors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setPassportDataErrors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setPassportDataErrors.Input.Headers
            /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// A JSON-serialized array describing the errors
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm/errors`.
                    public var errors: [Components.Schemas.PassportElementError]
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: User identifier
                    ///   - errors: A JSON-serialized array describing the errors
                    public init(
                        user_id: Swift.Int,
                        errors: [Components.Schemas.PassportElementError]
                    ) {
                        self.user_id = user_id
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case errors
                    }
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setPassportDataErrors.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setPassportDataErrors.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm/errors`.
                    public struct errorsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.PassportElementError
                        /// Creates a new `errorsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.PassportElementError) {
                            self.body = body
                        }
                    }
                    case errors(OpenAPIRuntime.MultipartPart<Operations.post_sol_setPassportDataErrors.Input.Body.multipartFormPayload.errorsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setPassportDataErrors.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// A JSON-serialized array describing the errors
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json/errors`.
                    public var errors: [Components.Schemas.PassportElementError]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: User identifier
                    ///   - errors: A JSON-serialized array describing the errors
                    public init(
                        user_id: Swift.Int,
                        errors: [Components.Schemas.PassportElementError]
                    ) {
                        self.user_id = user_id
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case errors
                    }
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setPassportDataErrors.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setPassportDataErrors.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setPassportDataErrors.Input.Headers = .init(),
                body: Operations.post_sol_setPassportDataErrors.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setPassportDataErrors.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setPassportDataErrors.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setPassportDataErrors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setPassportDataErrors.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPassportDataErrors/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setPassportDataErrors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setPassportDataErrors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setPassportDataErrors.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setPassportDataErrors.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPassportDataErrors/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setPassportDataErrors.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setPassportDataErrors.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    public enum post_sol_sendGame {
        public static let id: Swift.String = "post/sendGame"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendGame/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendGame.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_sendGame.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_sendGame.Input.Headers
            /// - Remark: Generated from `#/paths/sendGame/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Swift.Int
                    /// Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/game_short_name`.
                    public var game_short_name: Swift.String
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat
                    ///   - game_short_name: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup:
                    public init(
                        chat_id: Swift.Int,
                        game_short_name: Swift.String,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.game_short_name = game_short_name
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case game_short_name
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_sendGame.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/game_short_name`.
                    public struct game_short_namePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `game_short_namePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case game_short_name(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.game_short_namePayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/disable_notification`.
                    public struct disable_notificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_notificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_notification(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.disable_notificationPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct reply_to_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `reply_to_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reply_to_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.reply_to_message_idPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct allow_sending_without_replyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `allow_sending_without_replyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allow_sending_without_reply(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.allow_sending_without_replyPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/reply_markup`.
                    public struct reply_markupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `reply_markupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case reply_markup(OpenAPIRuntime.MultipartPart<Operations.post_sol_sendGame.Input.Body.multipartFormPayload.reply_markupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_sendGame.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/chat_id`.
                    public var chat_id: Swift.Int
                    /// Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/game_short_name`.
                    public var game_short_name: Swift.String
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/disable_notification`.
                    public var disable_notification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/reply_to_message_id`.
                    public var reply_to_message_id: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/allow_sending_without_reply`.
                    public var allow_sending_without_reply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/reply_markup`.
                    public var reply_markup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chat_id: Unique identifier for the target chat
                    ///   - game_short_name: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///   - disable_notification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - reply_to_message_id: If the message is a reply, ID of the original message
                    ///   - allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - reply_markup:
                    public init(
                        chat_id: Swift.Int,
                        game_short_name: Swift.String,
                        disable_notification: Swift.Bool? = nil,
                        reply_to_message_id: Swift.Int? = nil,
                        allow_sending_without_reply: Swift.Bool? = nil,
                        reply_markup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chat_id = chat_id
                        self.game_short_name = game_short_name
                        self.disable_notification = disable_notification
                        self.reply_to_message_id = reply_to_message_id
                        self.allow_sending_without_reply = allow_sending_without_reply
                        self.reply_markup = reply_markup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chat_id
                        case game_short_name
                        case disable_notification
                        case reply_to_message_id
                        case allow_sending_without_reply
                        case reply_markup
                    }
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_sendGame.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_sendGame.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_sendGame.Input.Headers = .init(),
                body: Operations.post_sol_sendGame.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_sendGame.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_sendGame.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendGame.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendGame.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendGame/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_sendGame.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_sendGame.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_sendGame.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_sendGame.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendGame/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_sendGame.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_sendGame.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    public enum post_sol_setGameScore {
        public static let id: Swift.String = "post/setGameScore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setGameScore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setGameScore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_setGameScore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_setGameScore.Input.Headers
            /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// New score, must be non-negative
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/score`.
                    public var score: Swift.Int
                    /// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/force`.
                    public var force: Swift.Bool?
                    /// Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/disable_edit_message`.
                    public var disable_edit_message: Swift.Bool?
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: User identifier
                    ///   - score: New score, must be non-negative
                    ///   - force: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///   - disable_edit_message: Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        user_id: Swift.Int,
                        score: Swift.Int,
                        force: Swift.Bool? = nil,
                        disable_edit_message: Swift.Bool? = nil,
                        chat_id: Swift.Int? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil
                    ) {
                        self.user_id = user_id
                        self.score = score
                        self.force = force
                        self.disable_edit_message = disable_edit_message
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case score
                        case force
                        case disable_edit_message
                        case chat_id
                        case message_id
                        case inline_message_id
                    }
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_setGameScore.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/score`.
                    public struct scorePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `scorePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case score(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.scorePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/force`.
                    public struct forcePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `forcePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case force(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.forcePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/disable_edit_message`.
                    public struct disable_edit_messagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `disable_edit_messagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disable_edit_message(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.disable_edit_messagePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_setGameScore.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// New score, must be non-negative
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/score`.
                    public var score: Swift.Int
                    /// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/force`.
                    public var force: Swift.Bool?
                    /// Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/disable_edit_message`.
                    public var disable_edit_message: Swift.Bool?
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/chat_id`.
                    public var chat_id: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: User identifier
                    ///   - score: New score, must be non-negative
                    ///   - force: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///   - disable_edit_message: Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        user_id: Swift.Int,
                        score: Swift.Int,
                        force: Swift.Bool? = nil,
                        disable_edit_message: Swift.Bool? = nil,
                        chat_id: Swift.Int? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil
                    ) {
                        self.user_id = user_id
                        self.score = score
                        self.force = force
                        self.disable_edit_message = disable_edit_message
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case score
                        case force
                        case disable_edit_message
                        case chat_id
                        case message_id
                        case inline_message_id
                    }
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_setGameScore.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_setGameScore.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_setGameScore.Input.Headers = .init(),
                body: Operations.post_sol_setGameScore.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result`.
                        public struct resultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `resultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result`.
                        public var result: Operations.post_sol_setGameScore.Output.Ok.Body.jsonPayload.resultPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.post_sol_setGameScore.Output.Ok.Body.jsonPayload.resultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_setGameScore.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_setGameScore.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setGameScore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setGameScore.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setGameScore/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_setGameScore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_setGameScore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_setGameScore.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_setGameScore.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setGameScore/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_setGameScore.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_setGameScore.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    public enum post_sol_getGameHighScores {
        public static let id: Swift.String = "post/getGameHighScores"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getGameHighScores/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getGameHighScores.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_getGameHighScores.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_getGameHighScores.Input.Headers
            /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm`.
                public struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Target user id
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/user_id`.
                    public var user_id: Swift.Int
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chat_id: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Target user id
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        user_id: Swift.Int,
                        chat_id: Swift.Int? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil
                    ) {
                        self.user_id = user_id
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case chat_id
                        case message_id
                        case inline_message_id
                    }
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.post_sol_getGameHighScores.Input.Body.urlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/user_id`.
                    public struct user_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `user_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case user_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getGameHighScores.Input.Body.multipartFormPayload.user_idPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/chat_id`.
                    public struct chat_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `chat_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chat_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getGameHighScores.Input.Body.multipartFormPayload.chat_idPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/message_id`.
                    public struct message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getGameHighScores.Input.Body.multipartFormPayload.message_idPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/inline_message_id`.
                    public struct inline_message_idPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `inline_message_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inline_message_id(OpenAPIRuntime.MultipartPart<Operations.post_sol_getGameHighScores.Input.Body.multipartFormPayload.inline_message_idPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_getGameHighScores.Input.Body.multipartFormPayload>)
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Target user id
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/user_id`.
                    public var user_id: Swift.Int
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/chat_id`.
                    public var chat_id: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/message_id`.
                    public var message_id: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/inline_message_id`.
                    public var inline_message_id: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_id: Target user id
                    ///   - chat_id: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - message_id: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inline_message_id: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        user_id: Swift.Int,
                        chat_id: Swift.Int? = nil,
                        message_id: Swift.Int? = nil,
                        inline_message_id: Swift.String? = nil
                    ) {
                        self.user_id = user_id
                        self.chat_id = chat_id
                        self.message_id = message_id
                        self.inline_message_id = inline_message_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_id
                        case chat_id
                        case message_id
                        case inline_message_id
                    }
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_getGameHighScores.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_getGameHighScores.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_getGameHighScores.Input.Headers = .init(),
                body: Operations.post_sol_getGameHighScores.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.GameHighScore]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.GameHighScore]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/application\/json`.
                    case json(Operations.post_sol_getGameHighScores.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.post_sol_getGameHighScores.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getGameHighScores.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getGameHighScores.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getGameHighScores/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_getGameHighScores.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_getGameHighScores.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_getGameHighScores.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_getGameHighScores.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getGameHighScores/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.post_sol_getGameHighScores.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.post_sol_getGameHighScores.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
