// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    func postUserLogin(_ input: Operations.PostUserLogin.Input) async throws -> Operations.PostUserLogin.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    func postAuthCode(_ input: Operations.PostAuthCode.Input) async throws -> Operations.PostAuthCode.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    func postAuthPassword(_ input: Operations.PostAuthPassword.Input) async throws -> Operations.PostAuthPassword.Output
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    func postRegisterUser(_ input: Operations.PostRegisterUser.Input) async throws -> Operations.PostRegisterUser.Output
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    func postOptimizeMemory(_ input: Operations.PostOptimizeMemory.Input) async throws -> Operations.PostOptimizeMemory.Output
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    func postGetMessageInfo(_ input: Operations.PostGetMessageInfo.Input) async throws -> Operations.PostGetMessageInfo.Output
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    func postGetChatMembers(_ input: Operations.PostGetChatMembers.Input) async throws -> Operations.PostGetChatMembers.Output
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    func postDeleteMessages(_ input: Operations.PostDeleteMessages.Input) async throws -> Operations.PostDeleteMessages.Output
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    func postPing(_ input: Operations.PostPing.Input) async throws -> Operations.PostPing.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    func postGetChats(_ input: Operations.PostGetChats.Input) async throws -> Operations.PostGetChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    func postGetCommonChats(_ input: Operations.PostGetCommonChats.Input) async throws -> Operations.PostGetCommonChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    func postGetInactiveChats(_ input: Operations.PostGetInactiveChats.Input) async throws -> Operations.PostGetInactiveChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    func postSearchPublicChats(_ input: Operations.PostSearchPublicChats.Input) async throws -> Operations.PostSearchPublicChats.Output
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    func postSetPollAnswer(_ input: Operations.PostSetPollAnswer.Input) async throws -> Operations.PostSetPollAnswer.Output
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    func postJoinChat(_ input: Operations.PostJoinChat.Input) async throws -> Operations.PostJoinChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    func postAddChatMember(_ input: Operations.PostAddChatMember.Input) async throws -> Operations.PostAddChatMember.Output
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    func postReportChat(_ input: Operations.PostReportChat.Input) async throws -> Operations.PostReportChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    func postCreateChat(_ input: Operations.PostCreateChat.Input) async throws -> Operations.PostCreateChat.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    func postSearchMessages(_ input: Operations.PostSearchMessages.Input) async throws -> Operations.PostSearchMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    func postSearchChatMessages(_ input: Operations.PostSearchChatMessages.Input) async throws -> Operations.PostSearchChatMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    func postGetCallbackQueryAnswer(_ input: Operations.PostGetCallbackQueryAnswer.Input) async throws -> Operations.PostGetCallbackQueryAnswer.Output
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    func postDeleteChatHistory(_ input: Operations.PostDeleteChatHistory.Input) async throws -> Operations.PostDeleteChatHistory.Output
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    func postGetScheduledMessages(_ input: Operations.PostGetScheduledMessages.Input) async throws -> Operations.PostGetScheduledMessages.Output
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    func postEditMessageScheduling(_ input: Operations.PostEditMessageScheduling.Input) async throws -> Operations.PostEditMessageScheduling.Output
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    func postGetProxies(_ input: Operations.PostGetProxies.Input) async throws -> Operations.PostGetProxies.Output
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    func postAddProxy(_ input: Operations.PostAddProxy.Input) async throws -> Operations.PostAddProxy.Output
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    func postDeleteProxy(_ input: Operations.PostDeleteProxy.Input) async throws -> Operations.PostDeleteProxy.Output
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    func postEnableProxy(_ input: Operations.PostEnableProxy.Input) async throws -> Operations.PostEnableProxy.Output
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    func postDisableProxy(_ input: Operations.PostDisableProxy.Input) async throws -> Operations.PostDisableProxy.Output
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    func postGetUpdates(_ input: Operations.PostGetUpdates.Input) async throws -> Operations.PostGetUpdates.Output
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    func postSetWebhook(_ input: Operations.PostSetWebhook.Input) async throws -> Operations.PostSetWebhook.Output
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    func postDeleteWebhook(_ input: Operations.PostDeleteWebhook.Input) async throws -> Operations.PostDeleteWebhook.Output
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    func postGetWebhookInfo(_ input: Operations.PostGetWebhookInfo.Input) async throws -> Operations.PostGetWebhookInfo.Output
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    func postGetMe(_ input: Operations.PostGetMe.Input) async throws -> Operations.PostGetMe.Output
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    func postLogOut(_ input: Operations.PostLogOut.Input) async throws -> Operations.PostLogOut.Output
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    func postClose(_ input: Operations.PostClose.Input) async throws -> Operations.PostClose.Output
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    func postSendMessage(_ input: Operations.PostSendMessage.Input) async throws -> Operations.PostSendMessage.Output
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    func postForwardMessage(_ input: Operations.PostForwardMessage.Input) async throws -> Operations.PostForwardMessage.Output
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    func postCopyMessage(_ input: Operations.PostCopyMessage.Input) async throws -> Operations.PostCopyMessage.Output
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    func postSendPhoto(_ input: Operations.PostSendPhoto.Input) async throws -> Operations.PostSendPhoto.Output
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    func postSendAudio(_ input: Operations.PostSendAudio.Input) async throws -> Operations.PostSendAudio.Output
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    func postSendDocument(_ input: Operations.PostSendDocument.Input) async throws -> Operations.PostSendDocument.Output
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    func postSendVideo(_ input: Operations.PostSendVideo.Input) async throws -> Operations.PostSendVideo.Output
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    func postSendAnimation(_ input: Operations.PostSendAnimation.Input) async throws -> Operations.PostSendAnimation.Output
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    func postSendVoice(_ input: Operations.PostSendVoice.Input) async throws -> Operations.PostSendVoice.Output
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    func postSendVideoNote(_ input: Operations.PostSendVideoNote.Input) async throws -> Operations.PostSendVideoNote.Output
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    func postSendMediaGroup(_ input: Operations.PostSendMediaGroup.Input) async throws -> Operations.PostSendMediaGroup.Output
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    func postSendLocation(_ input: Operations.PostSendLocation.Input) async throws -> Operations.PostSendLocation.Output
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    func postEditMessageLiveLocation(_ input: Operations.PostEditMessageLiveLocation.Input) async throws -> Operations.PostEditMessageLiveLocation.Output
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    func postStopMessageLiveLocation(_ input: Operations.PostStopMessageLiveLocation.Input) async throws -> Operations.PostStopMessageLiveLocation.Output
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    func postSendVenue(_ input: Operations.PostSendVenue.Input) async throws -> Operations.PostSendVenue.Output
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    func postSendContact(_ input: Operations.PostSendContact.Input) async throws -> Operations.PostSendContact.Output
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    func postSendPoll(_ input: Operations.PostSendPoll.Input) async throws -> Operations.PostSendPoll.Output
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    func postSendDice(_ input: Operations.PostSendDice.Input) async throws -> Operations.PostSendDice.Output
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    func postSendChatAction(_ input: Operations.PostSendChatAction.Input) async throws -> Operations.PostSendChatAction.Output
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    func postGetUserProfilePhotos(_ input: Operations.PostGetUserProfilePhotos.Input) async throws -> Operations.PostGetUserProfilePhotos.Output
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    func postGetFile(_ input: Operations.PostGetFile.Input) async throws -> Operations.PostGetFile.Output
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    func postKickChatMember(_ input: Operations.PostKickChatMember.Input) async throws -> Operations.PostKickChatMember.Output
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    func postUnbanChatMember(_ input: Operations.PostUnbanChatMember.Input) async throws -> Operations.PostUnbanChatMember.Output
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    func postRestrictChatMember(_ input: Operations.PostRestrictChatMember.Input) async throws -> Operations.PostRestrictChatMember.Output
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    func postPromoteChatMember(_ input: Operations.PostPromoteChatMember.Input) async throws -> Operations.PostPromoteChatMember.Output
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    func postSetChatAdministratorCustomTitle(_ input: Operations.PostSetChatAdministratorCustomTitle.Input) async throws -> Operations.PostSetChatAdministratorCustomTitle.Output
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    func postSetChatPermissions(_ input: Operations.PostSetChatPermissions.Input) async throws -> Operations.PostSetChatPermissions.Output
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    func postExportChatInviteLink(_ input: Operations.PostExportChatInviteLink.Input) async throws -> Operations.PostExportChatInviteLink.Output
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    func postSetChatPhoto(_ input: Operations.PostSetChatPhoto.Input) async throws -> Operations.PostSetChatPhoto.Output
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    func postDeleteChatPhoto(_ input: Operations.PostDeleteChatPhoto.Input) async throws -> Operations.PostDeleteChatPhoto.Output
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    func postSetChatTitle(_ input: Operations.PostSetChatTitle.Input) async throws -> Operations.PostSetChatTitle.Output
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    func postSetChatDescription(_ input: Operations.PostSetChatDescription.Input) async throws -> Operations.PostSetChatDescription.Output
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    func postPinChatMessage(_ input: Operations.PostPinChatMessage.Input) async throws -> Operations.PostPinChatMessage.Output
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    func postUnpinChatMessage(_ input: Operations.PostUnpinChatMessage.Input) async throws -> Operations.PostUnpinChatMessage.Output
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    func postUnpinAllChatMessages(_ input: Operations.PostUnpinAllChatMessages.Input) async throws -> Operations.PostUnpinAllChatMessages.Output
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    func postLeaveChat(_ input: Operations.PostLeaveChat.Input) async throws -> Operations.PostLeaveChat.Output
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    func postGetChat(_ input: Operations.PostGetChat.Input) async throws -> Operations.PostGetChat.Output
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    func postGetChatAdministrators(_ input: Operations.PostGetChatAdministrators.Input) async throws -> Operations.PostGetChatAdministrators.Output
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    func postGetChatMembersCount(_ input: Operations.PostGetChatMembersCount.Input) async throws -> Operations.PostGetChatMembersCount.Output
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    func postGetChatMember(_ input: Operations.PostGetChatMember.Input) async throws -> Operations.PostGetChatMember.Output
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    func postSetChatStickerSet(_ input: Operations.PostSetChatStickerSet.Input) async throws -> Operations.PostSetChatStickerSet.Output
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    func postDeleteChatStickerSet(_ input: Operations.PostDeleteChatStickerSet.Input) async throws -> Operations.PostDeleteChatStickerSet.Output
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    func postAnswerCallbackQuery(_ input: Operations.PostAnswerCallbackQuery.Input) async throws -> Operations.PostAnswerCallbackQuery.Output
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    func postSetMyCommands(_ input: Operations.PostSetMyCommands.Input) async throws -> Operations.PostSetMyCommands.Output
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    func postGetMyCommands(_ input: Operations.PostGetMyCommands.Input) async throws -> Operations.PostGetMyCommands.Output
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    func postEditMessageText(_ input: Operations.PostEditMessageText.Input) async throws -> Operations.PostEditMessageText.Output
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    func postEditMessageCaption(_ input: Operations.PostEditMessageCaption.Input) async throws -> Operations.PostEditMessageCaption.Output
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    func postEditMessageMedia(_ input: Operations.PostEditMessageMedia.Input) async throws -> Operations.PostEditMessageMedia.Output
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    func postEditMessageReplyMarkup(_ input: Operations.PostEditMessageReplyMarkup.Input) async throws -> Operations.PostEditMessageReplyMarkup.Output
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    func postStopPoll(_ input: Operations.PostStopPoll.Input) async throws -> Operations.PostStopPoll.Output
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    func postDeleteMessage(_ input: Operations.PostDeleteMessage.Input) async throws -> Operations.PostDeleteMessage.Output
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    func postSendSticker(_ input: Operations.PostSendSticker.Input) async throws -> Operations.PostSendSticker.Output
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    func postGetStickerSet(_ input: Operations.PostGetStickerSet.Input) async throws -> Operations.PostGetStickerSet.Output
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    func postUploadStickerFile(_ input: Operations.PostUploadStickerFile.Input) async throws -> Operations.PostUploadStickerFile.Output
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    func postCreateNewStickerSet(_ input: Operations.PostCreateNewStickerSet.Input) async throws -> Operations.PostCreateNewStickerSet.Output
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    func postAddStickerToSet(_ input: Operations.PostAddStickerToSet.Input) async throws -> Operations.PostAddStickerToSet.Output
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    func postSetStickerPositionInSet(_ input: Operations.PostSetStickerPositionInSet.Input) async throws -> Operations.PostSetStickerPositionInSet.Output
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    func postDeleteStickerFromSet(_ input: Operations.PostDeleteStickerFromSet.Input) async throws -> Operations.PostDeleteStickerFromSet.Output
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    func postSetStickerSetThumb(_ input: Operations.PostSetStickerSetThumb.Input) async throws -> Operations.PostSetStickerSetThumb.Output
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    func postAnswerInlineQuery(_ input: Operations.PostAnswerInlineQuery.Input) async throws -> Operations.PostAnswerInlineQuery.Output
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    func postSendInvoice(_ input: Operations.PostSendInvoice.Input) async throws -> Operations.PostSendInvoice.Output
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    func postAnswerShippingQuery(_ input: Operations.PostAnswerShippingQuery.Input) async throws -> Operations.PostAnswerShippingQuery.Output
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    func postAnswerPreCheckoutQuery(_ input: Operations.PostAnswerPreCheckoutQuery.Input) async throws -> Operations.PostAnswerPreCheckoutQuery.Output
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    func postSetPassportDataErrors(_ input: Operations.PostSetPassportDataErrors.Input) async throws -> Operations.PostSetPassportDataErrors.Output
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    func postSendGame(_ input: Operations.PostSendGame.Input) async throws -> Operations.PostSendGame.Output
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    func postSetGameScore(_ input: Operations.PostSetGameScore.Input) async throws -> Operations.PostSetGameScore.Output
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    func postGetGameHighScores(_ input: Operations.PostGetGameHighScores.Input) async throws -> Operations.PostGetGameHighScores.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    public func postUserLogin(
        headers: Operations.PostUserLogin.Input.Headers = .init(),
        body: Operations.PostUserLogin.Input.Body
    ) async throws -> Operations.PostUserLogin.Output {
        try await postUserLogin(Operations.PostUserLogin.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    public func postAuthCode(
        headers: Operations.PostAuthCode.Input.Headers = .init(),
        body: Operations.PostAuthCode.Input.Body
    ) async throws -> Operations.PostAuthCode.Output {
        try await postAuthCode(Operations.PostAuthCode.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    public func postAuthPassword(
        headers: Operations.PostAuthPassword.Input.Headers = .init(),
        body: Operations.PostAuthPassword.Input.Body
    ) async throws -> Operations.PostAuthPassword.Output {
        try await postAuthPassword(Operations.PostAuthPassword.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    public func postRegisterUser(
        headers: Operations.PostRegisterUser.Input.Headers = .init(),
        body: Operations.PostRegisterUser.Input.Body
    ) async throws -> Operations.PostRegisterUser.Output {
        try await postRegisterUser(Operations.PostRegisterUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    public func postOptimizeMemory(headers: Operations.PostOptimizeMemory.Input.Headers = .init()) async throws -> Operations.PostOptimizeMemory.Output {
        try await postOptimizeMemory(Operations.PostOptimizeMemory.Input(headers: headers))
    }
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    public func postGetMessageInfo(
        headers: Operations.PostGetMessageInfo.Input.Headers = .init(),
        body: Operations.PostGetMessageInfo.Input.Body
    ) async throws -> Operations.PostGetMessageInfo.Output {
        try await postGetMessageInfo(Operations.PostGetMessageInfo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    public func postGetChatMembers(
        headers: Operations.PostGetChatMembers.Input.Headers = .init(),
        body: Operations.PostGetChatMembers.Input.Body
    ) async throws -> Operations.PostGetChatMembers.Output {
        try await postGetChatMembers(Operations.PostGetChatMembers.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    public func postDeleteMessages(
        headers: Operations.PostDeleteMessages.Input.Headers = .init(),
        body: Operations.PostDeleteMessages.Input.Body
    ) async throws -> Operations.PostDeleteMessages.Output {
        try await postDeleteMessages(Operations.PostDeleteMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    public func postPing(headers: Operations.PostPing.Input.Headers = .init()) async throws -> Operations.PostPing.Output {
        try await postPing(Operations.PostPing.Input(headers: headers))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    public func postGetChats(
        headers: Operations.PostGetChats.Input.Headers = .init(),
        body: Operations.PostGetChats.Input.Body
    ) async throws -> Operations.PostGetChats.Output {
        try await postGetChats(Operations.PostGetChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    public func postGetCommonChats(
        headers: Operations.PostGetCommonChats.Input.Headers = .init(),
        body: Operations.PostGetCommonChats.Input.Body
    ) async throws -> Operations.PostGetCommonChats.Output {
        try await postGetCommonChats(Operations.PostGetCommonChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    public func postGetInactiveChats(headers: Operations.PostGetInactiveChats.Input.Headers = .init()) async throws -> Operations.PostGetInactiveChats.Output {
        try await postGetInactiveChats(Operations.PostGetInactiveChats.Input(headers: headers))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    public func postSearchPublicChats(
        headers: Operations.PostSearchPublicChats.Input.Headers = .init(),
        body: Operations.PostSearchPublicChats.Input.Body
    ) async throws -> Operations.PostSearchPublicChats.Output {
        try await postSearchPublicChats(Operations.PostSearchPublicChats.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    public func postSetPollAnswer(
        headers: Operations.PostSetPollAnswer.Input.Headers = .init(),
        body: Operations.PostSetPollAnswer.Input.Body
    ) async throws -> Operations.PostSetPollAnswer.Output {
        try await postSetPollAnswer(Operations.PostSetPollAnswer.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    public func postJoinChat(
        headers: Operations.PostJoinChat.Input.Headers = .init(),
        body: Operations.PostJoinChat.Input.Body
    ) async throws -> Operations.PostJoinChat.Output {
        try await postJoinChat(Operations.PostJoinChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    public func postAddChatMember(
        headers: Operations.PostAddChatMember.Input.Headers = .init(),
        body: Operations.PostAddChatMember.Input.Body
    ) async throws -> Operations.PostAddChatMember.Output {
        try await postAddChatMember(Operations.PostAddChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    public func postReportChat(
        headers: Operations.PostReportChat.Input.Headers = .init(),
        body: Operations.PostReportChat.Input.Body
    ) async throws -> Operations.PostReportChat.Output {
        try await postReportChat(Operations.PostReportChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    public func postCreateChat(
        headers: Operations.PostCreateChat.Input.Headers = .init(),
        body: Operations.PostCreateChat.Input.Body
    ) async throws -> Operations.PostCreateChat.Output {
        try await postCreateChat(Operations.PostCreateChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    public func postSearchMessages(
        headers: Operations.PostSearchMessages.Input.Headers = .init(),
        body: Operations.PostSearchMessages.Input.Body
    ) async throws -> Operations.PostSearchMessages.Output {
        try await postSearchMessages(Operations.PostSearchMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    public func postSearchChatMessages(
        headers: Operations.PostSearchChatMessages.Input.Headers = .init(),
        body: Operations.PostSearchChatMessages.Input.Body
    ) async throws -> Operations.PostSearchChatMessages.Output {
        try await postSearchChatMessages(Operations.PostSearchChatMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    public func postGetCallbackQueryAnswer(
        headers: Operations.PostGetCallbackQueryAnswer.Input.Headers = .init(),
        body: Operations.PostGetCallbackQueryAnswer.Input.Body
    ) async throws -> Operations.PostGetCallbackQueryAnswer.Output {
        try await postGetCallbackQueryAnswer(Operations.PostGetCallbackQueryAnswer.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    public func postDeleteChatHistory(
        headers: Operations.PostDeleteChatHistory.Input.Headers = .init(),
        body: Operations.PostDeleteChatHistory.Input.Body
    ) async throws -> Operations.PostDeleteChatHistory.Output {
        try await postDeleteChatHistory(Operations.PostDeleteChatHistory.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    public func postGetScheduledMessages(
        headers: Operations.PostGetScheduledMessages.Input.Headers = .init(),
        body: Operations.PostGetScheduledMessages.Input.Body
    ) async throws -> Operations.PostGetScheduledMessages.Output {
        try await postGetScheduledMessages(Operations.PostGetScheduledMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    public func postEditMessageScheduling(
        headers: Operations.PostEditMessageScheduling.Input.Headers = .init(),
        body: Operations.PostEditMessageScheduling.Input.Body
    ) async throws -> Operations.PostEditMessageScheduling.Output {
        try await postEditMessageScheduling(Operations.PostEditMessageScheduling.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    public func postGetProxies(headers: Operations.PostGetProxies.Input.Headers = .init()) async throws -> Operations.PostGetProxies.Output {
        try await postGetProxies(Operations.PostGetProxies.Input(headers: headers))
    }
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    public func postAddProxy(
        headers: Operations.PostAddProxy.Input.Headers = .init(),
        body: Operations.PostAddProxy.Input.Body
    ) async throws -> Operations.PostAddProxy.Output {
        try await postAddProxy(Operations.PostAddProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    public func postDeleteProxy(
        headers: Operations.PostDeleteProxy.Input.Headers = .init(),
        body: Operations.PostDeleteProxy.Input.Body
    ) async throws -> Operations.PostDeleteProxy.Output {
        try await postDeleteProxy(Operations.PostDeleteProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    public func postEnableProxy(
        headers: Operations.PostEnableProxy.Input.Headers = .init(),
        body: Operations.PostEnableProxy.Input.Body
    ) async throws -> Operations.PostEnableProxy.Output {
        try await postEnableProxy(Operations.PostEnableProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    public func postDisableProxy(
        headers: Operations.PostDisableProxy.Input.Headers = .init(),
        body: Operations.PostDisableProxy.Input.Body
    ) async throws -> Operations.PostDisableProxy.Output {
        try await postDisableProxy(Operations.PostDisableProxy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    public func postGetUpdates(
        headers: Operations.PostGetUpdates.Input.Headers = .init(),
        body: Operations.PostGetUpdates.Input.Body
    ) async throws -> Operations.PostGetUpdates.Output {
        try await postGetUpdates(Operations.PostGetUpdates.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    public func postSetWebhook(
        headers: Operations.PostSetWebhook.Input.Headers = .init(),
        body: Operations.PostSetWebhook.Input.Body
    ) async throws -> Operations.PostSetWebhook.Output {
        try await postSetWebhook(Operations.PostSetWebhook.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    public func postDeleteWebhook(
        headers: Operations.PostDeleteWebhook.Input.Headers = .init(),
        body: Operations.PostDeleteWebhook.Input.Body
    ) async throws -> Operations.PostDeleteWebhook.Output {
        try await postDeleteWebhook(Operations.PostDeleteWebhook.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    public func postGetWebhookInfo(headers: Operations.PostGetWebhookInfo.Input.Headers = .init()) async throws -> Operations.PostGetWebhookInfo.Output {
        try await postGetWebhookInfo(Operations.PostGetWebhookInfo.Input(headers: headers))
    }
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    public func postGetMe(headers: Operations.PostGetMe.Input.Headers = .init()) async throws -> Operations.PostGetMe.Output {
        try await postGetMe(Operations.PostGetMe.Input(headers: headers))
    }
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    public func postLogOut(headers: Operations.PostLogOut.Input.Headers = .init()) async throws -> Operations.PostLogOut.Output {
        try await postLogOut(Operations.PostLogOut.Input(headers: headers))
    }
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    public func postClose(headers: Operations.PostClose.Input.Headers = .init()) async throws -> Operations.PostClose.Output {
        try await postClose(Operations.PostClose.Input(headers: headers))
    }
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    public func postSendMessage(
        headers: Operations.PostSendMessage.Input.Headers = .init(),
        body: Operations.PostSendMessage.Input.Body
    ) async throws -> Operations.PostSendMessage.Output {
        try await postSendMessage(Operations.PostSendMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    public func postForwardMessage(
        headers: Operations.PostForwardMessage.Input.Headers = .init(),
        body: Operations.PostForwardMessage.Input.Body
    ) async throws -> Operations.PostForwardMessage.Output {
        try await postForwardMessage(Operations.PostForwardMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    public func postCopyMessage(
        headers: Operations.PostCopyMessage.Input.Headers = .init(),
        body: Operations.PostCopyMessage.Input.Body
    ) async throws -> Operations.PostCopyMessage.Output {
        try await postCopyMessage(Operations.PostCopyMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    public func postSendPhoto(
        headers: Operations.PostSendPhoto.Input.Headers = .init(),
        body: Operations.PostSendPhoto.Input.Body
    ) async throws -> Operations.PostSendPhoto.Output {
        try await postSendPhoto(Operations.PostSendPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    public func postSendAudio(
        headers: Operations.PostSendAudio.Input.Headers = .init(),
        body: Operations.PostSendAudio.Input.Body
    ) async throws -> Operations.PostSendAudio.Output {
        try await postSendAudio(Operations.PostSendAudio.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    public func postSendDocument(
        headers: Operations.PostSendDocument.Input.Headers = .init(),
        body: Operations.PostSendDocument.Input.Body
    ) async throws -> Operations.PostSendDocument.Output {
        try await postSendDocument(Operations.PostSendDocument.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    public func postSendVideo(
        headers: Operations.PostSendVideo.Input.Headers = .init(),
        body: Operations.PostSendVideo.Input.Body
    ) async throws -> Operations.PostSendVideo.Output {
        try await postSendVideo(Operations.PostSendVideo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    public func postSendAnimation(
        headers: Operations.PostSendAnimation.Input.Headers = .init(),
        body: Operations.PostSendAnimation.Input.Body
    ) async throws -> Operations.PostSendAnimation.Output {
        try await postSendAnimation(Operations.PostSendAnimation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    public func postSendVoice(
        headers: Operations.PostSendVoice.Input.Headers = .init(),
        body: Operations.PostSendVoice.Input.Body
    ) async throws -> Operations.PostSendVoice.Output {
        try await postSendVoice(Operations.PostSendVoice.Input(
            headers: headers,
            body: body
        ))
    }
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    public func postSendVideoNote(
        headers: Operations.PostSendVideoNote.Input.Headers = .init(),
        body: Operations.PostSendVideoNote.Input.Body
    ) async throws -> Operations.PostSendVideoNote.Output {
        try await postSendVideoNote(Operations.PostSendVideoNote.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    public func postSendMediaGroup(
        headers: Operations.PostSendMediaGroup.Input.Headers = .init(),
        body: Operations.PostSendMediaGroup.Input.Body
    ) async throws -> Operations.PostSendMediaGroup.Output {
        try await postSendMediaGroup(Operations.PostSendMediaGroup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    public func postSendLocation(
        headers: Operations.PostSendLocation.Input.Headers = .init(),
        body: Operations.PostSendLocation.Input.Body
    ) async throws -> Operations.PostSendLocation.Output {
        try await postSendLocation(Operations.PostSendLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    public func postEditMessageLiveLocation(
        headers: Operations.PostEditMessageLiveLocation.Input.Headers = .init(),
        body: Operations.PostEditMessageLiveLocation.Input.Body
    ) async throws -> Operations.PostEditMessageLiveLocation.Output {
        try await postEditMessageLiveLocation(Operations.PostEditMessageLiveLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    public func postStopMessageLiveLocation(
        headers: Operations.PostStopMessageLiveLocation.Input.Headers = .init(),
        body: Operations.PostStopMessageLiveLocation.Input.Body
    ) async throws -> Operations.PostStopMessageLiveLocation.Output {
        try await postStopMessageLiveLocation(Operations.PostStopMessageLiveLocation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    public func postSendVenue(
        headers: Operations.PostSendVenue.Input.Headers = .init(),
        body: Operations.PostSendVenue.Input.Body
    ) async throws -> Operations.PostSendVenue.Output {
        try await postSendVenue(Operations.PostSendVenue.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    public func postSendContact(
        headers: Operations.PostSendContact.Input.Headers = .init(),
        body: Operations.PostSendContact.Input.Body
    ) async throws -> Operations.PostSendContact.Output {
        try await postSendContact(Operations.PostSendContact.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    public func postSendPoll(
        headers: Operations.PostSendPoll.Input.Headers = .init(),
        body: Operations.PostSendPoll.Input.Body
    ) async throws -> Operations.PostSendPoll.Output {
        try await postSendPoll(Operations.PostSendPoll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    public func postSendDice(
        headers: Operations.PostSendDice.Input.Headers = .init(),
        body: Operations.PostSendDice.Input.Body
    ) async throws -> Operations.PostSendDice.Output {
        try await postSendDice(Operations.PostSendDice.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    public func postSendChatAction(
        headers: Operations.PostSendChatAction.Input.Headers = .init(),
        body: Operations.PostSendChatAction.Input.Body
    ) async throws -> Operations.PostSendChatAction.Output {
        try await postSendChatAction(Operations.PostSendChatAction.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    public func postGetUserProfilePhotos(
        headers: Operations.PostGetUserProfilePhotos.Input.Headers = .init(),
        body: Operations.PostGetUserProfilePhotos.Input.Body
    ) async throws -> Operations.PostGetUserProfilePhotos.Output {
        try await postGetUserProfilePhotos(Operations.PostGetUserProfilePhotos.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    public func postGetFile(
        headers: Operations.PostGetFile.Input.Headers = .init(),
        body: Operations.PostGetFile.Input.Body
    ) async throws -> Operations.PostGetFile.Output {
        try await postGetFile(Operations.PostGetFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    public func postKickChatMember(
        headers: Operations.PostKickChatMember.Input.Headers = .init(),
        body: Operations.PostKickChatMember.Input.Body
    ) async throws -> Operations.PostKickChatMember.Output {
        try await postKickChatMember(Operations.PostKickChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    public func postUnbanChatMember(
        headers: Operations.PostUnbanChatMember.Input.Headers = .init(),
        body: Operations.PostUnbanChatMember.Input.Body
    ) async throws -> Operations.PostUnbanChatMember.Output {
        try await postUnbanChatMember(Operations.PostUnbanChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    public func postRestrictChatMember(
        headers: Operations.PostRestrictChatMember.Input.Headers = .init(),
        body: Operations.PostRestrictChatMember.Input.Body
    ) async throws -> Operations.PostRestrictChatMember.Output {
        try await postRestrictChatMember(Operations.PostRestrictChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    public func postPromoteChatMember(
        headers: Operations.PostPromoteChatMember.Input.Headers = .init(),
        body: Operations.PostPromoteChatMember.Input.Body
    ) async throws -> Operations.PostPromoteChatMember.Output {
        try await postPromoteChatMember(Operations.PostPromoteChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    public func postSetChatAdministratorCustomTitle(
        headers: Operations.PostSetChatAdministratorCustomTitle.Input.Headers = .init(),
        body: Operations.PostSetChatAdministratorCustomTitle.Input.Body
    ) async throws -> Operations.PostSetChatAdministratorCustomTitle.Output {
        try await postSetChatAdministratorCustomTitle(Operations.PostSetChatAdministratorCustomTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    public func postSetChatPermissions(
        headers: Operations.PostSetChatPermissions.Input.Headers = .init(),
        body: Operations.PostSetChatPermissions.Input.Body
    ) async throws -> Operations.PostSetChatPermissions.Output {
        try await postSetChatPermissions(Operations.PostSetChatPermissions.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    public func postExportChatInviteLink(
        headers: Operations.PostExportChatInviteLink.Input.Headers = .init(),
        body: Operations.PostExportChatInviteLink.Input.Body
    ) async throws -> Operations.PostExportChatInviteLink.Output {
        try await postExportChatInviteLink(Operations.PostExportChatInviteLink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    public func postSetChatPhoto(
        headers: Operations.PostSetChatPhoto.Input.Headers = .init(),
        body: Operations.PostSetChatPhoto.Input.Body
    ) async throws -> Operations.PostSetChatPhoto.Output {
        try await postSetChatPhoto(Operations.PostSetChatPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    public func postDeleteChatPhoto(
        headers: Operations.PostDeleteChatPhoto.Input.Headers = .init(),
        body: Operations.PostDeleteChatPhoto.Input.Body
    ) async throws -> Operations.PostDeleteChatPhoto.Output {
        try await postDeleteChatPhoto(Operations.PostDeleteChatPhoto.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    public func postSetChatTitle(
        headers: Operations.PostSetChatTitle.Input.Headers = .init(),
        body: Operations.PostSetChatTitle.Input.Body
    ) async throws -> Operations.PostSetChatTitle.Output {
        try await postSetChatTitle(Operations.PostSetChatTitle.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    public func postSetChatDescription(
        headers: Operations.PostSetChatDescription.Input.Headers = .init(),
        body: Operations.PostSetChatDescription.Input.Body
    ) async throws -> Operations.PostSetChatDescription.Output {
        try await postSetChatDescription(Operations.PostSetChatDescription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    public func postPinChatMessage(
        headers: Operations.PostPinChatMessage.Input.Headers = .init(),
        body: Operations.PostPinChatMessage.Input.Body
    ) async throws -> Operations.PostPinChatMessage.Output {
        try await postPinChatMessage(Operations.PostPinChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    public func postUnpinChatMessage(
        headers: Operations.PostUnpinChatMessage.Input.Headers = .init(),
        body: Operations.PostUnpinChatMessage.Input.Body
    ) async throws -> Operations.PostUnpinChatMessage.Output {
        try await postUnpinChatMessage(Operations.PostUnpinChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    public func postUnpinAllChatMessages(
        headers: Operations.PostUnpinAllChatMessages.Input.Headers = .init(),
        body: Operations.PostUnpinAllChatMessages.Input.Body
    ) async throws -> Operations.PostUnpinAllChatMessages.Output {
        try await postUnpinAllChatMessages(Operations.PostUnpinAllChatMessages.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    public func postLeaveChat(
        headers: Operations.PostLeaveChat.Input.Headers = .init(),
        body: Operations.PostLeaveChat.Input.Body
    ) async throws -> Operations.PostLeaveChat.Output {
        try await postLeaveChat(Operations.PostLeaveChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    public func postGetChat(
        headers: Operations.PostGetChat.Input.Headers = .init(),
        body: Operations.PostGetChat.Input.Body
    ) async throws -> Operations.PostGetChat.Output {
        try await postGetChat(Operations.PostGetChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    public func postGetChatAdministrators(
        headers: Operations.PostGetChatAdministrators.Input.Headers = .init(),
        body: Operations.PostGetChatAdministrators.Input.Body
    ) async throws -> Operations.PostGetChatAdministrators.Output {
        try await postGetChatAdministrators(Operations.PostGetChatAdministrators.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    public func postGetChatMembersCount(
        headers: Operations.PostGetChatMembersCount.Input.Headers = .init(),
        body: Operations.PostGetChatMembersCount.Input.Body
    ) async throws -> Operations.PostGetChatMembersCount.Output {
        try await postGetChatMembersCount(Operations.PostGetChatMembersCount.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    public func postGetChatMember(
        headers: Operations.PostGetChatMember.Input.Headers = .init(),
        body: Operations.PostGetChatMember.Input.Body
    ) async throws -> Operations.PostGetChatMember.Output {
        try await postGetChatMember(Operations.PostGetChatMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    public func postSetChatStickerSet(
        headers: Operations.PostSetChatStickerSet.Input.Headers = .init(),
        body: Operations.PostSetChatStickerSet.Input.Body
    ) async throws -> Operations.PostSetChatStickerSet.Output {
        try await postSetChatStickerSet(Operations.PostSetChatStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    public func postDeleteChatStickerSet(
        headers: Operations.PostDeleteChatStickerSet.Input.Headers = .init(),
        body: Operations.PostDeleteChatStickerSet.Input.Body
    ) async throws -> Operations.PostDeleteChatStickerSet.Output {
        try await postDeleteChatStickerSet(Operations.PostDeleteChatStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    public func postAnswerCallbackQuery(
        headers: Operations.PostAnswerCallbackQuery.Input.Headers = .init(),
        body: Operations.PostAnswerCallbackQuery.Input.Body
    ) async throws -> Operations.PostAnswerCallbackQuery.Output {
        try await postAnswerCallbackQuery(Operations.PostAnswerCallbackQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    public func postSetMyCommands(
        headers: Operations.PostSetMyCommands.Input.Headers = .init(),
        body: Operations.PostSetMyCommands.Input.Body
    ) async throws -> Operations.PostSetMyCommands.Output {
        try await postSetMyCommands(Operations.PostSetMyCommands.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    public func postGetMyCommands(headers: Operations.PostGetMyCommands.Input.Headers = .init()) async throws -> Operations.PostGetMyCommands.Output {
        try await postGetMyCommands(Operations.PostGetMyCommands.Input(headers: headers))
    }
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    public func postEditMessageText(
        headers: Operations.PostEditMessageText.Input.Headers = .init(),
        body: Operations.PostEditMessageText.Input.Body
    ) async throws -> Operations.PostEditMessageText.Output {
        try await postEditMessageText(Operations.PostEditMessageText.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    public func postEditMessageCaption(
        headers: Operations.PostEditMessageCaption.Input.Headers = .init(),
        body: Operations.PostEditMessageCaption.Input.Body
    ) async throws -> Operations.PostEditMessageCaption.Output {
        try await postEditMessageCaption(Operations.PostEditMessageCaption.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    public func postEditMessageMedia(
        headers: Operations.PostEditMessageMedia.Input.Headers = .init(),
        body: Operations.PostEditMessageMedia.Input.Body
    ) async throws -> Operations.PostEditMessageMedia.Output {
        try await postEditMessageMedia(Operations.PostEditMessageMedia.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    public func postEditMessageReplyMarkup(
        headers: Operations.PostEditMessageReplyMarkup.Input.Headers = .init(),
        body: Operations.PostEditMessageReplyMarkup.Input.Body
    ) async throws -> Operations.PostEditMessageReplyMarkup.Output {
        try await postEditMessageReplyMarkup(Operations.PostEditMessageReplyMarkup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    public func postStopPoll(
        headers: Operations.PostStopPoll.Input.Headers = .init(),
        body: Operations.PostStopPoll.Input.Body
    ) async throws -> Operations.PostStopPoll.Output {
        try await postStopPoll(Operations.PostStopPoll.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    public func postDeleteMessage(
        headers: Operations.PostDeleteMessage.Input.Headers = .init(),
        body: Operations.PostDeleteMessage.Input.Body
    ) async throws -> Operations.PostDeleteMessage.Output {
        try await postDeleteMessage(Operations.PostDeleteMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    public func postSendSticker(
        headers: Operations.PostSendSticker.Input.Headers = .init(),
        body: Operations.PostSendSticker.Input.Body
    ) async throws -> Operations.PostSendSticker.Output {
        try await postSendSticker(Operations.PostSendSticker.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    public func postGetStickerSet(
        headers: Operations.PostGetStickerSet.Input.Headers = .init(),
        body: Operations.PostGetStickerSet.Input.Body
    ) async throws -> Operations.PostGetStickerSet.Output {
        try await postGetStickerSet(Operations.PostGetStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    public func postUploadStickerFile(
        headers: Operations.PostUploadStickerFile.Input.Headers = .init(),
        body: Operations.PostUploadStickerFile.Input.Body
    ) async throws -> Operations.PostUploadStickerFile.Output {
        try await postUploadStickerFile(Operations.PostUploadStickerFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    public func postCreateNewStickerSet(
        headers: Operations.PostCreateNewStickerSet.Input.Headers = .init(),
        body: Operations.PostCreateNewStickerSet.Input.Body
    ) async throws -> Operations.PostCreateNewStickerSet.Output {
        try await postCreateNewStickerSet(Operations.PostCreateNewStickerSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    public func postAddStickerToSet(
        headers: Operations.PostAddStickerToSet.Input.Headers = .init(),
        body: Operations.PostAddStickerToSet.Input.Body
    ) async throws -> Operations.PostAddStickerToSet.Output {
        try await postAddStickerToSet(Operations.PostAddStickerToSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    public func postSetStickerPositionInSet(
        headers: Operations.PostSetStickerPositionInSet.Input.Headers = .init(),
        body: Operations.PostSetStickerPositionInSet.Input.Body
    ) async throws -> Operations.PostSetStickerPositionInSet.Output {
        try await postSetStickerPositionInSet(Operations.PostSetStickerPositionInSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    public func postDeleteStickerFromSet(
        headers: Operations.PostDeleteStickerFromSet.Input.Headers = .init(),
        body: Operations.PostDeleteStickerFromSet.Input.Body
    ) async throws -> Operations.PostDeleteStickerFromSet.Output {
        try await postDeleteStickerFromSet(Operations.PostDeleteStickerFromSet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    public func postSetStickerSetThumb(
        headers: Operations.PostSetStickerSetThumb.Input.Headers = .init(),
        body: Operations.PostSetStickerSetThumb.Input.Body
    ) async throws -> Operations.PostSetStickerSetThumb.Output {
        try await postSetStickerSetThumb(Operations.PostSetStickerSetThumb.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    public func postAnswerInlineQuery(
        headers: Operations.PostAnswerInlineQuery.Input.Headers = .init(),
        body: Operations.PostAnswerInlineQuery.Input.Body
    ) async throws -> Operations.PostAnswerInlineQuery.Output {
        try await postAnswerInlineQuery(Operations.PostAnswerInlineQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    public func postSendInvoice(
        headers: Operations.PostSendInvoice.Input.Headers = .init(),
        body: Operations.PostSendInvoice.Input.Body
    ) async throws -> Operations.PostSendInvoice.Output {
        try await postSendInvoice(Operations.PostSendInvoice.Input(
            headers: headers,
            body: body
        ))
    }
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    public func postAnswerShippingQuery(
        headers: Operations.PostAnswerShippingQuery.Input.Headers = .init(),
        body: Operations.PostAnswerShippingQuery.Input.Body
    ) async throws -> Operations.PostAnswerShippingQuery.Output {
        try await postAnswerShippingQuery(Operations.PostAnswerShippingQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    public func postAnswerPreCheckoutQuery(
        headers: Operations.PostAnswerPreCheckoutQuery.Input.Headers = .init(),
        body: Operations.PostAnswerPreCheckoutQuery.Input.Body
    ) async throws -> Operations.PostAnswerPreCheckoutQuery.Output {
        try await postAnswerPreCheckoutQuery(Operations.PostAnswerPreCheckoutQuery.Input(
            headers: headers,
            body: body
        ))
    }
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    public func postSetPassportDataErrors(
        headers: Operations.PostSetPassportDataErrors.Input.Headers = .init(),
        body: Operations.PostSetPassportDataErrors.Input.Body
    ) async throws -> Operations.PostSetPassportDataErrors.Output {
        try await postSetPassportDataErrors(Operations.PostSetPassportDataErrors.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    public func postSendGame(
        headers: Operations.PostSendGame.Input.Headers = .init(),
        body: Operations.PostSendGame.Input.Body
    ) async throws -> Operations.PostSendGame.Output {
        try await postSendGame(Operations.PostSendGame.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    public func postSetGameScore(
        headers: Operations.PostSetGameScore.Input.Headers = .init(),
        body: Operations.PostSetGameScore.Input.Body
    ) async throws -> Operations.PostSetGameScore.Output {
        try await postSetGameScore(Operations.PostSetGameScore.Input(
            headers: headers,
            body: body
        ))
    }
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    public func postGetGameHighScores(
        headers: Operations.PostGetGameHighScores.Input.Headers = .init(),
        body: Operations.PostGetGameHighScores.Input.Body
    ) async throws -> Operations.PostGetGameHighScores.Output {
        try await postGetGameHighScores(Operations.PostGetGameHighScores.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://botapi.giuseppem99.xyz/{type}{token}",
                variables: [
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1(
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://botapi.giuseppem99.xyz/{type}{token}",
            variables: [
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
    public enum Server2 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://telegram.rest/{type}{token}",
                variables: [
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2(
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://telegram.rest/{type}{token}",
            variables: [
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
    public enum Server3 {
        /// The "type" variable defined in the OpenAPI document. The default value is "bot".
        @frozen public enum _Type: Swift.String, Sendable {
            case bot
            case user
        }
        ///
        /// - Parameters:
        ///   - baseUrl: Base url of the tdlight bot api server
        ///   - _type:
        ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
        public static func url(
            baseUrl: Swift.String = "https://botapi.giuseppem99.xyz",
            _type: _Type = .bot,
            token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        ) throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "{base_url}/{type}{token}",
                variables: [
                    .init(
                        name: "base_url",
                        value: baseUrl
                    ),
                    .init(
                        name: "type",
                        value: _type.rawValue
                    ),
                    .init(
                        name: "token",
                        value: token
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - baseUrl: Base url of the tdlight bot api server
    ///   - _type:
    ///   - token: Each bot is given a unique authentication token when it is created and each user is given a unique authentication token when logging in.
    @available(*, deprecated, renamed: "Servers.Server3.url")
    public static func server3(
        baseUrl: Swift.String = "https://botapi.giuseppem99.xyz",
        _type: Swift.String = "bot",
        token: Swift.String = "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "{base_url}/{type}{token}",
            variables: [
                .init(
                    name: "base_url",
                    value: baseUrl
                ),
                .init(
                    name: "type",
                    value: _type,
                    allowedValues: [
                        "bot",
                        "user"
                    ]
                ),
                .init(
                    name: "token",
                    value: token
                )
            ]
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/ok`.
            public var ok: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Error/error_code`.
            public var errorCode: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Error/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Error/parameters`.
            public var parameters: Components.Schemas.ResponseParameters?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - ok:
            ///   - errorCode:
            ///   - description:
            ///   - parameters:
            public init(
                ok: Swift.Bool,
                errorCode: Swift.Int,
                description: Swift.String,
                parameters: Components.Schemas.ResponseParameters? = nil
            ) {
                self.ok = ok
                self.errorCode = errorCode
                self.description = description
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case ok
                case errorCode = "error_code"
                case description
                case parameters
            }
        }
        /// This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.  
        /// At most **one** of the optional parameters can be present in any given update.
        ///
        /// - Remark: Generated from `#/components/schemas/Update`.
        public struct Update: Codable, Hashable, Sendable {
            /// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            ///
            /// - Remark: Generated from `#/components/schemas/Update/update_id`.
            public var updateId: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Update/message`.
            public var message: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/edited_message`.
            public var editedMessage: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/channel_post`.
            public var channelPost: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/edited_channel_post`.
            public var editedChannelPost: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Update/inline_query`.
            public var inlineQuery: Components.Schemas.InlineQuery?
            /// - Remark: Generated from `#/components/schemas/Update/chosen_inline_result`.
            public var chosenInlineResult: Components.Schemas.ChosenInlineResult?
            /// - Remark: Generated from `#/components/schemas/Update/callback_query`.
            public var callbackQuery: Components.Schemas.CallbackQuery?
            /// - Remark: Generated from `#/components/schemas/Update/shipping_query`.
            public var shippingQuery: Components.Schemas.ShippingQuery?
            /// - Remark: Generated from `#/components/schemas/Update/pre_checkout_query`.
            public var preCheckoutQuery: Components.Schemas.PreCheckoutQuery?
            /// - Remark: Generated from `#/components/schemas/Update/poll`.
            public var poll: Components.Schemas.Poll?
            /// - Remark: Generated from `#/components/schemas/Update/poll_answer`.
            public var pollAnswer: Components.Schemas.PollAnswer?
            /// Creates a new `Update`.
            ///
            /// - Parameters:
            ///   - updateId: The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            ///   - message:
            ///   - editedMessage:
            ///   - channelPost:
            ///   - editedChannelPost:
            ///   - inlineQuery:
            ///   - chosenInlineResult:
            ///   - callbackQuery:
            ///   - shippingQuery:
            ///   - preCheckoutQuery:
            ///   - poll:
            ///   - pollAnswer:
            public init(
                updateId: Swift.Int,
                message: Components.Schemas.Message? = nil,
                editedMessage: Components.Schemas.Message? = nil,
                channelPost: Components.Schemas.Message? = nil,
                editedChannelPost: Components.Schemas.Message? = nil,
                inlineQuery: Components.Schemas.InlineQuery? = nil,
                chosenInlineResult: Components.Schemas.ChosenInlineResult? = nil,
                callbackQuery: Components.Schemas.CallbackQuery? = nil,
                shippingQuery: Components.Schemas.ShippingQuery? = nil,
                preCheckoutQuery: Components.Schemas.PreCheckoutQuery? = nil,
                poll: Components.Schemas.Poll? = nil,
                pollAnswer: Components.Schemas.PollAnswer? = nil
            ) {
                self.updateId = updateId
                self.message = message
                self.editedMessage = editedMessage
                self.channelPost = channelPost
                self.editedChannelPost = editedChannelPost
                self.inlineQuery = inlineQuery
                self.chosenInlineResult = chosenInlineResult
                self.callbackQuery = callbackQuery
                self.shippingQuery = shippingQuery
                self.preCheckoutQuery = preCheckoutQuery
                self.poll = poll
                self.pollAnswer = pollAnswer
            }
            public enum CodingKeys: String, CodingKey {
                case updateId = "update_id"
                case message
                case editedMessage = "edited_message"
                case channelPost = "channel_post"
                case editedChannelPost = "edited_channel_post"
                case inlineQuery = "inline_query"
                case chosenInlineResult = "chosen_inline_result"
                case callbackQuery = "callback_query"
                case shippingQuery = "shipping_query"
                case preCheckoutQuery = "pre_checkout_query"
                case poll
                case pollAnswer = "poll_answer"
            }
        }
        /// Contains information about the current status of a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookInfo`.
        public struct WebhookInfo: Codable, Hashable, Sendable {
            /// Webhook URL, may be empty if webhook is not set up
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/url`.
            public var url: Swift.String
            /// True, if a custom certificate was provided for webhook certificate checks
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/has_custom_certificate`.
            public var hasCustomCertificate: Swift.Bool
            /// Number of updates awaiting delivery
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/pending_update_count`.
            public var pendingUpdateCount: Swift.Int
            /// *Optional*. Currently used webhook IP address
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/ip_address`.
            public var ipAddress: Swift.String?
            /// *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/last_error_date`.
            public var lastErrorDate: Swift.Int?
            /// *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/last_error_message`.
            public var lastErrorMessage: Swift.String?
            /// *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/max_connections`.
            public var maxConnections: Swift.Int?
            /// *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookInfo/allowed_updates`.
            public var allowedUpdates: [Swift.String]?
            /// Creates a new `WebhookInfo`.
            ///
            /// - Parameters:
            ///   - url: Webhook URL, may be empty if webhook is not set up
            ///   - hasCustomCertificate: True, if a custom certificate was provided for webhook certificate checks
            ///   - pendingUpdateCount: Number of updates awaiting delivery
            ///   - ipAddress: *Optional*. Currently used webhook IP address
            ///   - lastErrorDate: *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
            ///   - lastErrorMessage: *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
            ///   - maxConnections: *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            ///   - allowedUpdates: *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
            public init(
                url: Swift.String,
                hasCustomCertificate: Swift.Bool,
                pendingUpdateCount: Swift.Int,
                ipAddress: Swift.String? = nil,
                lastErrorDate: Swift.Int? = nil,
                lastErrorMessage: Swift.String? = nil,
                maxConnections: Swift.Int? = nil,
                allowedUpdates: [Swift.String]? = nil
            ) {
                self.url = url
                self.hasCustomCertificate = hasCustomCertificate
                self.pendingUpdateCount = pendingUpdateCount
                self.ipAddress = ipAddress
                self.lastErrorDate = lastErrorDate
                self.lastErrorMessage = lastErrorMessage
                self.maxConnections = maxConnections
                self.allowedUpdates = allowedUpdates
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case hasCustomCertificate = "has_custom_certificate"
                case pendingUpdateCount = "pending_update_count"
                case ipAddress = "ip_address"
                case lastErrorDate = "last_error_date"
                case lastErrorMessage = "last_error_message"
                case maxConnections = "max_connections"
                case allowedUpdates = "allowed_updates"
            }
        }
        /// This object represents a Telegram user or bot.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// Unique identifier for this user or bot
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.Int
            /// True, if this user is a bot
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_bot`.
            public var isBot: Swift.Bool
            /// User's or bot's first name
            ///
            /// - Remark: Generated from `#/components/schemas/User/first_name`.
            public var firstName: Swift.String
            /// *Optional*. User's or bot's last name
            ///
            /// - Remark: Generated from `#/components/schemas/User/last_name`.
            public var lastName: Swift.String?
            /// *Optional*. User's or bot's username
            ///
            /// - Remark: Generated from `#/components/schemas/User/username`.
            public var username: Swift.String?
            /// *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
            ///
            /// - Remark: Generated from `#/components/schemas/User/language_code`.
            public var languageCode: Swift.String?
            /// *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/can_join_groups`.
            public var canJoinGroups: Swift.Bool?
            /// *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/can_read_all_group_messages`.
            public var canReadAllGroupMessages: Swift.Bool?
            /// *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///
            /// - Remark: Generated from `#/components/schemas/User/supports_inline_queries`.
            public var supportsInlineQueries: Swift.Bool?
            /// *Optional*. Is the user verified by Telegram, clients show a verified batch.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_verified`.
            public var isVerified: Swift.Bool?
            /// *Optional*. Is the user reported for scam, clients show a warning to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_scam`.
            public var isScam: Swift.Bool?
            /// *Optional*. Is the user marked as fake by Telegram.
            ///
            /// - Remark: Generated from `#/components/schemas/User/is_fake`.
            public var isFake: Swift.Bool?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this user or bot
            ///   - isBot: True, if this user is a bot
            ///   - firstName: User's or bot's first name
            ///   - lastName: *Optional*. User's or bot's last name
            ///   - username: *Optional*. User's or bot's username
            ///   - languageCode: *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
            ///   - canJoinGroups: *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - canReadAllGroupMessages: *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - supportsInlineQueries: *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
            ///   - isVerified: *Optional*. Is the user verified by Telegram, clients show a verified batch.
            ///   - isScam: *Optional*. Is the user reported for scam, clients show a warning to the user.
            ///   - isFake: *Optional*. Is the user marked as fake by Telegram.
            public init(
                id: Swift.Int,
                isBot: Swift.Bool,
                firstName: Swift.String,
                lastName: Swift.String? = nil,
                username: Swift.String? = nil,
                languageCode: Swift.String? = nil,
                canJoinGroups: Swift.Bool? = nil,
                canReadAllGroupMessages: Swift.Bool? = nil,
                supportsInlineQueries: Swift.Bool? = nil,
                isVerified: Swift.Bool? = nil,
                isScam: Swift.Bool? = nil,
                isFake: Swift.Bool? = nil
            ) {
                self.id = id
                self.isBot = isBot
                self.firstName = firstName
                self.lastName = lastName
                self.username = username
                self.languageCode = languageCode
                self.canJoinGroups = canJoinGroups
                self.canReadAllGroupMessages = canReadAllGroupMessages
                self.supportsInlineQueries = supportsInlineQueries
                self.isVerified = isVerified
                self.isScam = isScam
                self.isFake = isFake
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case isBot = "is_bot"
                case firstName = "first_name"
                case lastName = "last_name"
                case username
                case languageCode = "language_code"
                case canJoinGroups = "can_join_groups"
                case canReadAllGroupMessages = "can_read_all_group_messages"
                case supportsInlineQueries = "supports_inline_queries"
                case isVerified = "is_verified"
                case isScam = "is_scam"
                case isFake = "is_fake"
            }
        }
        /// This object represents a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/Chat`.
        public struct Chat: Codable, Hashable, Sendable {
            /// Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/id`.
            public var id: Swift.Int
            /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _private = "private"
                case group = "group"
                case supergroup = "supergroup"
                case channel = "channel"
            }
            /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/type`.
            public var _type: Components.Schemas.Chat._TypePayload
            /// *Optional*. Title, for supergroups, channels and group chats
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/title`.
            public var title: Swift.String?
            /// *Optional*. Username, for private chats, supergroups and channels if available
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/username`.
            public var username: Swift.String?
            /// *Optional*. First name of the other party in a private chat
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/first_name`.
            public var firstName: Swift.String?
            /// *Optional*. Last name of the other party in a private chat
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/last_name`.
            public var lastName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Chat/photo`.
            public var photo: Components.Schemas.ChatPhoto?
            /// *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/bio`.
            public var bio: Swift.String?
            /// *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/description`.
            public var description: Swift.String?
            /// *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/invite_link`.
            public var inviteLink: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Chat/pinned_message`.
            public var pinnedMessage: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Chat/permissions`.
            public var permissions: Components.Schemas.ChatPermissions?
            /// *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/slow_mode_delay`.
            public var slowModeDelay: Swift.Int?
            /// *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/sticker_set_name`.
            public var stickerSetName: Swift.String?
            /// *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/can_set_sticker_set`.
            public var canSetStickerSet: Swift.Bool?
            /// *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/linked_chat_id`.
            public var linkedChatId: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Chat/location`.
            public var location: Components.Schemas.ChatLocation?
            /// *Optional*. Is the chat verified by Telegram, clients show a verified batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_verified`.
            public var isVerified: Swift.Bool?
            /// *Optional*. Is the chat reported for scam, clients show a warning to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_scam`.
            public var isScam: Swift.Bool?
            /// *Optional*. Is the chat marked as fake by Telegram.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/is_fake`.
            public var isFake: Swift.Bool?
            /// *Optional*. Distance to the chat location in meters. Returned only in `getChatsNearby`.
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/distance`.
            public var distance: Swift.Int?
            /// Creates a new `Chat`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - _type: Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            ///   - title: *Optional*. Title, for supergroups, channels and group chats
            ///   - username: *Optional*. Username, for private chats, supergroups and channels if available
            ///   - firstName: *Optional*. First name of the other party in a private chat
            ///   - lastName: *Optional*. Last name of the other party in a private chat
            ///   - photo:
            ///   - bio: *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - description: *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - inviteLink: *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - pinnedMessage:
            ///   - permissions:
            ///   - slowModeDelay: *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - stickerSetName: *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - canSetStickerSet: *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - linkedChatId: *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
            ///   - location:
            ///   - isVerified: *Optional*. Is the chat verified by Telegram, clients show a verified batch.
            ///   - isScam: *Optional*. Is the chat reported for scam, clients show a warning to the user.
            ///   - isFake: *Optional*. Is the chat marked as fake by Telegram.
            ///   - distance: *Optional*. Distance to the chat location in meters. Returned only in `getChatsNearby`.
            public init(
                id: Swift.Int,
                _type: Components.Schemas.Chat._TypePayload,
                title: Swift.String? = nil,
                username: Swift.String? = nil,
                firstName: Swift.String? = nil,
                lastName: Swift.String? = nil,
                photo: Components.Schemas.ChatPhoto? = nil,
                bio: Swift.String? = nil,
                description: Swift.String? = nil,
                inviteLink: Swift.String? = nil,
                pinnedMessage: Components.Schemas.Message? = nil,
                permissions: Components.Schemas.ChatPermissions? = nil,
                slowModeDelay: Swift.Int? = nil,
                stickerSetName: Swift.String? = nil,
                canSetStickerSet: Swift.Bool? = nil,
                linkedChatId: Swift.Int? = nil,
                location: Components.Schemas.ChatLocation? = nil,
                isVerified: Swift.Bool? = nil,
                isScam: Swift.Bool? = nil,
                isFake: Swift.Bool? = nil,
                distance: Swift.Int? = nil
            ) {
                self.id = id
                self._type = _type
                self.title = title
                self.username = username
                self.firstName = firstName
                self.lastName = lastName
                self.photo = photo
                self.bio = bio
                self.description = description
                self.inviteLink = inviteLink
                self.pinnedMessage = pinnedMessage
                self.permissions = permissions
                self.slowModeDelay = slowModeDelay
                self.stickerSetName = stickerSetName
                self.canSetStickerSet = canSetStickerSet
                self.linkedChatId = linkedChatId
                self.location = location
                self.isVerified = isVerified
                self.isScam = isScam
                self.isFake = isFake
                self.distance = distance
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case title
                case username
                case firstName = "first_name"
                case lastName = "last_name"
                case photo
                case bio
                case description
                case inviteLink = "invite_link"
                case pinnedMessage = "pinned_message"
                case permissions
                case slowModeDelay = "slow_mode_delay"
                case stickerSetName = "sticker_set_name"
                case canSetStickerSet = "can_set_sticker_set"
                case linkedChatId = "linked_chat_id"
                case location
                case isVerified = "is_verified"
                case isScam = "is_scam"
                case isFake = "is_fake"
                case distance
            }
        }
        /// This object represents a message.
        ///
        /// - Remark: Generated from `#/components/schemas/Message`.
        public struct Message: Codable, Hashable, Sendable {
            /// Unique message identifier inside this chat
            ///
            /// - Remark: Generated from `#/components/schemas/Message/message_id`.
            public var messageId: Swift.Int {
                get  {
                    self.storage.value.messageId
                }
                _modify {
                    yield &self.storage.value.messageId
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/from`.
            public var from: Components.Schemas.User? {
                get  {
                    self.storage.value.from
                }
                _modify {
                    yield &self.storage.value.from
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/sender_chat`.
            public var senderChat: Components.Schemas.Chat? {
                get  {
                    self.storage.value.senderChat
                }
                _modify {
                    yield &self.storage.value.senderChat
                }
            }
            /// Date the message was sent in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/date`.
            public var date: Swift.Int {
                get  {
                    self.storage.value.date
                }
                _modify {
                    yield &self.storage.value.date
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/chat`.
            public var chat: Components.Schemas.Chat {
                get  {
                    self.storage.value.chat
                }
                _modify {
                    yield &self.storage.value.chat
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/forward_from`.
            public var forwardFrom: Components.Schemas.User? {
                get  {
                    self.storage.value.forwardFrom
                }
                _modify {
                    yield &self.storage.value.forwardFrom
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/forward_from_chat`.
            public var forwardFromChat: Components.Schemas.Chat? {
                get  {
                    self.storage.value.forwardFromChat
                }
                _modify {
                    yield &self.storage.value.forwardFromChat
                }
            }
            /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_from_message_id`.
            public var forwardFromMessageId: Swift.Int? {
                get  {
                    self.storage.value.forwardFromMessageId
                }
                _modify {
                    yield &self.storage.value.forwardFromMessageId
                }
            }
            /// *Optional*. For messages forwarded from channels, signature of the post author if present
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_signature`.
            public var forwardSignature: Swift.String? {
                get  {
                    self.storage.value.forwardSignature
                }
                _modify {
                    yield &self.storage.value.forwardSignature
                }
            }
            /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_sender_name`.
            public var forwardSenderName: Swift.String? {
                get  {
                    self.storage.value.forwardSenderName
                }
                _modify {
                    yield &self.storage.value.forwardSenderName
                }
            }
            /// *Optional*. For forwarded messages, date the original message was sent in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forward_date`.
            public var forwardDate: Swift.Int? {
                get  {
                    self.storage.value.forwardDate
                }
                _modify {
                    yield &self.storage.value.forwardDate
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/reply_to_message`.
            public var replyToMessage: Components.Schemas.Message? {
                get  {
                    self.storage.value.replyToMessage
                }
                _modify {
                    yield &self.storage.value.replyToMessage
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/via_bot`.
            public var viaBot: Components.Schemas.User? {
                get  {
                    self.storage.value.viaBot
                }
                _modify {
                    yield &self.storage.value.viaBot
                }
            }
            /// *Optional*. Date the message was last edited in Unix time
            ///
            /// - Remark: Generated from `#/components/schemas/Message/edit_date`.
            public var editDate: Swift.Int? {
                get  {
                    self.storage.value.editDate
                }
                _modify {
                    yield &self.storage.value.editDate
                }
            }
            /// *Optional*. The unique identifier of a media message group this message belongs to
            ///
            /// - Remark: Generated from `#/components/schemas/Message/media_group_id`.
            public var mediaGroupId: Swift.String? {
                get  {
                    self.storage.value.mediaGroupId
                }
                _modify {
                    yield &self.storage.value.mediaGroupId
                }
            }
            /// *Optional*. The unique identifier of a thread this message belongs to
            ///
            /// - Remark: Generated from `#/components/schemas/Message/message_thread_id`.
            public var messageThreadId: Swift.String? {
                get  {
                    self.storage.value.messageThreadId
                }
                _modify {
                    yield &self.storage.value.messageThreadId
                }
            }
            /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
            ///
            /// - Remark: Generated from `#/components/schemas/Message/author_signature`.
            public var authorSignature: Swift.String? {
                get  {
                    self.storage.value.authorSignature
                }
                _modify {
                    yield &self.storage.value.authorSignature
                }
            }
            /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Message/text`.
            public var text: Swift.String? {
                get  {
                    self.storage.value.text
                }
                _modify {
                    yield &self.storage.value.text
                }
            }
            /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
            ///
            /// - Remark: Generated from `#/components/schemas/Message/entities`.
            public var entities: [Components.Schemas.MessageEntity]? {
                get  {
                    self.storage.value.entities
                }
                _modify {
                    yield &self.storage.value.entities
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/animation`.
            public var animation: Components.Schemas.Animation? {
                get  {
                    self.storage.value.animation
                }
                _modify {
                    yield &self.storage.value.animation
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/audio`.
            public var audio: Components.Schemas.Audio? {
                get  {
                    self.storage.value.audio
                }
                _modify {
                    yield &self.storage.value.audio
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/document`.
            public var document: Components.Schemas.Document? {
                get  {
                    self.storage.value.document
                }
                _modify {
                    yield &self.storage.value.document
                }
            }
            /// *Optional*. Message is a photo, available sizes of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/Message/photo`.
            public var photo: [Components.Schemas.PhotoSize]? {
                get  {
                    self.storage.value.photo
                }
                _modify {
                    yield &self.storage.value.photo
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/sticker`.
            public var sticker: Components.Schemas.Sticker? {
                get  {
                    self.storage.value.sticker
                }
                _modify {
                    yield &self.storage.value.sticker
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/video`.
            public var video: Components.Schemas.Video? {
                get  {
                    self.storage.value.video
                }
                _modify {
                    yield &self.storage.value.video
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/video_note`.
            public var videoNote: Components.Schemas.VideoNote? {
                get  {
                    self.storage.value.videoNote
                }
                _modify {
                    yield &self.storage.value.videoNote
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/voice`.
            public var voice: Components.Schemas.Voice? {
                get  {
                    self.storage.value.voice
                }
                _modify {
                    yield &self.storage.value.voice
                }
            }
            /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Message/caption`.
            public var caption: Swift.String? {
                get  {
                    self.storage.value.caption
                }
                _modify {
                    yield &self.storage.value.caption
                }
            }
            /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
            ///
            /// - Remark: Generated from `#/components/schemas/Message/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]? {
                get  {
                    self.storage.value.captionEntities
                }
                _modify {
                    yield &self.storage.value.captionEntities
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/contact`.
            public var contact: Components.Schemas.Contact? {
                get  {
                    self.storage.value.contact
                }
                _modify {
                    yield &self.storage.value.contact
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/dice`.
            public var dice: Components.Schemas.Dice? {
                get  {
                    self.storage.value.dice
                }
                _modify {
                    yield &self.storage.value.dice
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/game`.
            public var game: Components.Schemas.Game? {
                get  {
                    self.storage.value.game
                }
                _modify {
                    yield &self.storage.value.game
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/poll`.
            public var poll: Components.Schemas.Poll? {
                get  {
                    self.storage.value.poll
                }
                _modify {
                    yield &self.storage.value.poll
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/venue`.
            public var venue: Components.Schemas.Venue? {
                get  {
                    self.storage.value.venue
                }
                _modify {
                    yield &self.storage.value.venue
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/location`.
            public var location: Components.Schemas.Location? {
                get  {
                    self.storage.value.location
                }
                _modify {
                    yield &self.storage.value.location
                }
            }
            /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_members`.
            public var newChatMembers: [Components.Schemas.User]? {
                get  {
                    self.storage.value.newChatMembers
                }
                _modify {
                    yield &self.storage.value.newChatMembers
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/left_chat_member`.
            public var leftChatMember: Components.Schemas.User? {
                get  {
                    self.storage.value.leftChatMember
                }
                _modify {
                    yield &self.storage.value.leftChatMember
                }
            }
            /// *Optional*. A chat title was changed to this value
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_title`.
            public var newChatTitle: Swift.String? {
                get  {
                    self.storage.value.newChatTitle
                }
                _modify {
                    yield &self.storage.value.newChatTitle
                }
            }
            /// *Optional*. A chat photo was change to this value
            ///
            /// - Remark: Generated from `#/components/schemas/Message/new_chat_photo`.
            public var newChatPhoto: [Components.Schemas.PhotoSize]? {
                get  {
                    self.storage.value.newChatPhoto
                }
                _modify {
                    yield &self.storage.value.newChatPhoto
                }
            }
            /// *Optional*. Service message: the chat photo was deleted
            ///
            /// - Remark: Generated from `#/components/schemas/Message/delete_chat_photo`.
            public var deleteChatPhoto: Swift.Bool? {
                get  {
                    self.storage.value.deleteChatPhoto
                }
                _modify {
                    yield &self.storage.value.deleteChatPhoto
                }
            }
            /// *Optional*. Service message: the group has been created
            ///
            /// - Remark: Generated from `#/components/schemas/Message/group_chat_created`.
            public var groupChatCreated: Swift.Bool? {
                get  {
                    self.storage.value.groupChatCreated
                }
                _modify {
                    yield &self.storage.value.groupChatCreated
                }
            }
            /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/supergroup_chat_created`.
            public var supergroupChatCreated: Swift.Bool? {
                get  {
                    self.storage.value.supergroupChatCreated
                }
                _modify {
                    yield &self.storage.value.supergroupChatCreated
                }
            }
            /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/channel_chat_created`.
            public var channelChatCreated: Swift.Bool? {
                get  {
                    self.storage.value.channelChatCreated
                }
                _modify {
                    yield &self.storage.value.channelChatCreated
                }
            }
            /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/migrate_to_chat_id`.
            public var migrateToChatId: Swift.Int? {
                get  {
                    self.storage.value.migrateToChatId
                }
                _modify {
                    yield &self.storage.value.migrateToChatId
                }
            }
            /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/migrate_from_chat_id`.
            public var migrateFromChatId: Swift.Int? {
                get  {
                    self.storage.value.migrateFromChatId
                }
                _modify {
                    yield &self.storage.value.migrateFromChatId
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/pinned_message`.
            public var pinnedMessage: Components.Schemas.Message? {
                get  {
                    self.storage.value.pinnedMessage
                }
                _modify {
                    yield &self.storage.value.pinnedMessage
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/invoice`.
            public var invoice: Components.Schemas.Invoice? {
                get  {
                    self.storage.value.invoice
                }
                _modify {
                    yield &self.storage.value.invoice
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/successful_payment`.
            public var successfulPayment: Components.Schemas.SuccessfulPayment? {
                get  {
                    self.storage.value.successfulPayment
                }
                _modify {
                    yield &self.storage.value.successfulPayment
                }
            }
            /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
            ///
            /// - Remark: Generated from `#/components/schemas/Message/connected_website`.
            public var connectedWebsite: Swift.String? {
                get  {
                    self.storage.value.connectedWebsite
                }
                _modify {
                    yield &self.storage.value.connectedWebsite
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/passport_data`.
            public var passportData: Components.Schemas.PassportData? {
                get  {
                    self.storage.value.passportData
                }
                _modify {
                    yield &self.storage.value.passportData
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/proximity_alert_triggered`.
            public var proximityAlertTriggered: Components.Schemas.ProximityAlertTriggered? {
                get  {
                    self.storage.value.proximityAlertTriggered
                }
                _modify {
                    yield &self.storage.value.proximityAlertTriggered
                }
            }
            /// - Remark: Generated from `#/components/schemas/Message/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup? {
                get  {
                    self.storage.value.replyMarkup
                }
                _modify {
                    yield &self.storage.value.replyMarkup
                }
            }
            /// *Optional*. Amount of views. Only for channel messages.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/views`.
            public var views: Swift.Int? {
                get  {
                    self.storage.value.views
                }
                _modify {
                    yield &self.storage.value.views
                }
            }
            /// *Optional*. How many times the message has been forwarded
            ///
            /// - Remark: Generated from `#/components/schemas/Message/forwards`.
            public var forwards: Swift.Int? {
                get  {
                    self.storage.value.forwards
                }
                _modify {
                    yield &self.storage.value.forwards
                }
            }
            /// *Optional*. Is the message scheduled.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/is_scheduled`.
            public var isScheduled: Swift.Bool? {
                get  {
                    self.storage.value.isScheduled
                }
                _modify {
                    yield &self.storage.value.isScheduled
                }
            }
            /// *Optional*. Time the message will be sent.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/scheduled_at`.
            public var scheduledAt: OpenAPIRuntime.OpenAPIValueContainer? {
                get  {
                    self.storage.value.scheduledAt
                }
                _modify {
                    yield &self.storage.value.scheduledAt
                }
            }
            /// Creates a new `Message`.
            ///
            /// - Parameters:
            ///   - messageId: Unique message identifier inside this chat
            ///   - from:
            ///   - senderChat:
            ///   - date: Date the message was sent in Unix time
            ///   - chat:
            ///   - forwardFrom:
            ///   - forwardFromChat:
            ///   - forwardFromMessageId: *Optional*. For messages forwarded from channels, identifier of the original message in the channel
            ///   - forwardSignature: *Optional*. For messages forwarded from channels, signature of the post author if present
            ///   - forwardSenderName: *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
            ///   - forwardDate: *Optional*. For forwarded messages, date the original message was sent in Unix time
            ///   - replyToMessage:
            ///   - viaBot:
            ///   - editDate: *Optional*. Date the message was last edited in Unix time
            ///   - mediaGroupId: *Optional*. The unique identifier of a media message group this message belongs to
            ///   - messageThreadId: *Optional*. The unique identifier of a thread this message belongs to
            ///   - authorSignature: *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
            ///   - text: *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
            ///   - entities: *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
            ///   - animation:
            ///   - audio:
            ///   - document:
            ///   - photo: *Optional*. Message is a photo, available sizes of the photo
            ///   - sticker:
            ///   - video:
            ///   - videoNote:
            ///   - voice:
            ///   - caption: *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            ///   - captionEntities: *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
            ///   - contact:
            ///   - dice:
            ///   - game:
            ///   - poll:
            ///   - venue:
            ///   - location:
            ///   - newChatMembers: *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
            ///   - leftChatMember:
            ///   - newChatTitle: *Optional*. A chat title was changed to this value
            ///   - newChatPhoto: *Optional*. A chat photo was change to this value
            ///   - deleteChatPhoto: *Optional*. Service message: the chat photo was deleted
            ///   - groupChatCreated: *Optional*. Service message: the group has been created
            ///   - supergroupChatCreated: *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
            ///   - channelChatCreated: *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
            ///   - migrateToChatId: *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - migrateFromChatId: *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - pinnedMessage:
            ///   - invoice:
            ///   - successfulPayment:
            ///   - connectedWebsite: *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
            ///   - passportData:
            ///   - proximityAlertTriggered:
            ///   - replyMarkup:
            ///   - views: *Optional*. Amount of views. Only for channel messages.
            ///   - forwards: *Optional*. How many times the message has been forwarded
            ///   - isScheduled: *Optional*. Is the message scheduled.
            ///   - scheduledAt: *Optional*. Time the message will be sent.
            public init(
                messageId: Swift.Int,
                from: Components.Schemas.User? = nil,
                senderChat: Components.Schemas.Chat? = nil,
                date: Swift.Int,
                chat: Components.Schemas.Chat,
                forwardFrom: Components.Schemas.User? = nil,
                forwardFromChat: Components.Schemas.Chat? = nil,
                forwardFromMessageId: Swift.Int? = nil,
                forwardSignature: Swift.String? = nil,
                forwardSenderName: Swift.String? = nil,
                forwardDate: Swift.Int? = nil,
                replyToMessage: Components.Schemas.Message? = nil,
                viaBot: Components.Schemas.User? = nil,
                editDate: Swift.Int? = nil,
                mediaGroupId: Swift.String? = nil,
                messageThreadId: Swift.String? = nil,
                authorSignature: Swift.String? = nil,
                text: Swift.String? = nil,
                entities: [Components.Schemas.MessageEntity]? = nil,
                animation: Components.Schemas.Animation? = nil,
                audio: Components.Schemas.Audio? = nil,
                document: Components.Schemas.Document? = nil,
                photo: [Components.Schemas.PhotoSize]? = nil,
                sticker: Components.Schemas.Sticker? = nil,
                video: Components.Schemas.Video? = nil,
                videoNote: Components.Schemas.VideoNote? = nil,
                voice: Components.Schemas.Voice? = nil,
                caption: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                contact: Components.Schemas.Contact? = nil,
                dice: Components.Schemas.Dice? = nil,
                game: Components.Schemas.Game? = nil,
                poll: Components.Schemas.Poll? = nil,
                venue: Components.Schemas.Venue? = nil,
                location: Components.Schemas.Location? = nil,
                newChatMembers: [Components.Schemas.User]? = nil,
                leftChatMember: Components.Schemas.User? = nil,
                newChatTitle: Swift.String? = nil,
                newChatPhoto: [Components.Schemas.PhotoSize]? = nil,
                deleteChatPhoto: Swift.Bool? = nil,
                groupChatCreated: Swift.Bool? = nil,
                supergroupChatCreated: Swift.Bool? = nil,
                channelChatCreated: Swift.Bool? = nil,
                migrateToChatId: Swift.Int? = nil,
                migrateFromChatId: Swift.Int? = nil,
                pinnedMessage: Components.Schemas.Message? = nil,
                invoice: Components.Schemas.Invoice? = nil,
                successfulPayment: Components.Schemas.SuccessfulPayment? = nil,
                connectedWebsite: Swift.String? = nil,
                passportData: Components.Schemas.PassportData? = nil,
                proximityAlertTriggered: Components.Schemas.ProximityAlertTriggered? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                views: Swift.Int? = nil,
                forwards: Swift.Int? = nil,
                isScheduled: Swift.Bool? = nil,
                scheduledAt: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.storage = .init(value: .init(
                    messageId: messageId,
                    from: from,
                    senderChat: senderChat,
                    date: date,
                    chat: chat,
                    forwardFrom: forwardFrom,
                    forwardFromChat: forwardFromChat,
                    forwardFromMessageId: forwardFromMessageId,
                    forwardSignature: forwardSignature,
                    forwardSenderName: forwardSenderName,
                    forwardDate: forwardDate,
                    replyToMessage: replyToMessage,
                    viaBot: viaBot,
                    editDate: editDate,
                    mediaGroupId: mediaGroupId,
                    messageThreadId: messageThreadId,
                    authorSignature: authorSignature,
                    text: text,
                    entities: entities,
                    animation: animation,
                    audio: audio,
                    document: document,
                    photo: photo,
                    sticker: sticker,
                    video: video,
                    videoNote: videoNote,
                    voice: voice,
                    caption: caption,
                    captionEntities: captionEntities,
                    contact: contact,
                    dice: dice,
                    game: game,
                    poll: poll,
                    venue: venue,
                    location: location,
                    newChatMembers: newChatMembers,
                    leftChatMember: leftChatMember,
                    newChatTitle: newChatTitle,
                    newChatPhoto: newChatPhoto,
                    deleteChatPhoto: deleteChatPhoto,
                    groupChatCreated: groupChatCreated,
                    supergroupChatCreated: supergroupChatCreated,
                    channelChatCreated: channelChatCreated,
                    migrateToChatId: migrateToChatId,
                    migrateFromChatId: migrateFromChatId,
                    pinnedMessage: pinnedMessage,
                    invoice: invoice,
                    successfulPayment: successfulPayment,
                    connectedWebsite: connectedWebsite,
                    passportData: passportData,
                    proximityAlertTriggered: proximityAlertTriggered,
                    replyMarkup: replyMarkup,
                    views: views,
                    forwards: forwards,
                    isScheduled: isScheduled,
                    scheduledAt: scheduledAt
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case messageId = "message_id"
                case from
                case senderChat = "sender_chat"
                case date
                case chat
                case forwardFrom = "forward_from"
                case forwardFromChat = "forward_from_chat"
                case forwardFromMessageId = "forward_from_message_id"
                case forwardSignature = "forward_signature"
                case forwardSenderName = "forward_sender_name"
                case forwardDate = "forward_date"
                case replyToMessage = "reply_to_message"
                case viaBot = "via_bot"
                case editDate = "edit_date"
                case mediaGroupId = "media_group_id"
                case messageThreadId = "message_thread_id"
                case authorSignature = "author_signature"
                case text
                case entities
                case animation
                case audio
                case document
                case photo
                case sticker
                case video
                case videoNote = "video_note"
                case voice
                case caption
                case captionEntities = "caption_entities"
                case contact
                case dice
                case game
                case poll
                case venue
                case location
                case newChatMembers = "new_chat_members"
                case leftChatMember = "left_chat_member"
                case newChatTitle = "new_chat_title"
                case newChatPhoto = "new_chat_photo"
                case deleteChatPhoto = "delete_chat_photo"
                case groupChatCreated = "group_chat_created"
                case supergroupChatCreated = "supergroup_chat_created"
                case channelChatCreated = "channel_chat_created"
                case migrateToChatId = "migrate_to_chat_id"
                case migrateFromChatId = "migrate_from_chat_id"
                case pinnedMessage = "pinned_message"
                case invoice
                case successfulPayment = "successful_payment"
                case connectedWebsite = "connected_website"
                case passportData = "passport_data"
                case proximityAlertTriggered = "proximity_alert_triggered"
                case replyMarkup = "reply_markup"
                case views
                case forwards
                case isScheduled = "is_scheduled"
                case scheduledAt = "scheduled_at"
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// Unique message identifier inside this chat
                ///
                /// - Remark: Generated from `#/components/schemas/Message/message_id`.
                var messageId: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Message/from`.
                var from: Components.Schemas.User?
                /// - Remark: Generated from `#/components/schemas/Message/sender_chat`.
                var senderChat: Components.Schemas.Chat?
                /// Date the message was sent in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/date`.
                var date: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Message/chat`.
                var chat: Components.Schemas.Chat
                /// - Remark: Generated from `#/components/schemas/Message/forward_from`.
                var forwardFrom: Components.Schemas.User?
                /// - Remark: Generated from `#/components/schemas/Message/forward_from_chat`.
                var forwardFromChat: Components.Schemas.Chat?
                /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_from_message_id`.
                var forwardFromMessageId: Swift.Int?
                /// *Optional*. For messages forwarded from channels, signature of the post author if present
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_signature`.
                var forwardSignature: Swift.String?
                /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_sender_name`.
                var forwardSenderName: Swift.String?
                /// *Optional*. For forwarded messages, date the original message was sent in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forward_date`.
                var forwardDate: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/Message/reply_to_message`.
                var replyToMessage: Components.Schemas.Message?
                /// - Remark: Generated from `#/components/schemas/Message/via_bot`.
                var viaBot: Components.Schemas.User?
                /// *Optional*. Date the message was last edited in Unix time
                ///
                /// - Remark: Generated from `#/components/schemas/Message/edit_date`.
                var editDate: Swift.Int?
                /// *Optional*. The unique identifier of a media message group this message belongs to
                ///
                /// - Remark: Generated from `#/components/schemas/Message/media_group_id`.
                var mediaGroupId: Swift.String?
                /// *Optional*. The unique identifier of a thread this message belongs to
                ///
                /// - Remark: Generated from `#/components/schemas/Message/message_thread_id`.
                var messageThreadId: Swift.String?
                /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
                ///
                /// - Remark: Generated from `#/components/schemas/Message/author_signature`.
                var authorSignature: Swift.String?
                /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
                ///
                /// - Remark: Generated from `#/components/schemas/Message/text`.
                var text: Swift.String?
                /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
                ///
                /// - Remark: Generated from `#/components/schemas/Message/entities`.
                var entities: [Components.Schemas.MessageEntity]?
                /// - Remark: Generated from `#/components/schemas/Message/animation`.
                var animation: Components.Schemas.Animation?
                /// - Remark: Generated from `#/components/schemas/Message/audio`.
                var audio: Components.Schemas.Audio?
                /// - Remark: Generated from `#/components/schemas/Message/document`.
                var document: Components.Schemas.Document?
                /// *Optional*. Message is a photo, available sizes of the photo
                ///
                /// - Remark: Generated from `#/components/schemas/Message/photo`.
                var photo: [Components.Schemas.PhotoSize]?
                /// - Remark: Generated from `#/components/schemas/Message/sticker`.
                var sticker: Components.Schemas.Sticker?
                /// - Remark: Generated from `#/components/schemas/Message/video`.
                var video: Components.Schemas.Video?
                /// - Remark: Generated from `#/components/schemas/Message/video_note`.
                var videoNote: Components.Schemas.VideoNote?
                /// - Remark: Generated from `#/components/schemas/Message/voice`.
                var voice: Components.Schemas.Voice?
                /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
                ///
                /// - Remark: Generated from `#/components/schemas/Message/caption`.
                var caption: Swift.String?
                /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
                ///
                /// - Remark: Generated from `#/components/schemas/Message/caption_entities`.
                var captionEntities: [Components.Schemas.MessageEntity]?
                /// - Remark: Generated from `#/components/schemas/Message/contact`.
                var contact: Components.Schemas.Contact?
                /// - Remark: Generated from `#/components/schemas/Message/dice`.
                var dice: Components.Schemas.Dice?
                /// - Remark: Generated from `#/components/schemas/Message/game`.
                var game: Components.Schemas.Game?
                /// - Remark: Generated from `#/components/schemas/Message/poll`.
                var poll: Components.Schemas.Poll?
                /// - Remark: Generated from `#/components/schemas/Message/venue`.
                var venue: Components.Schemas.Venue?
                /// - Remark: Generated from `#/components/schemas/Message/location`.
                var location: Components.Schemas.Location?
                /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_members`.
                var newChatMembers: [Components.Schemas.User]?
                /// - Remark: Generated from `#/components/schemas/Message/left_chat_member`.
                var leftChatMember: Components.Schemas.User?
                /// *Optional*. A chat title was changed to this value
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_title`.
                var newChatTitle: Swift.String?
                /// *Optional*. A chat photo was change to this value
                ///
                /// - Remark: Generated from `#/components/schemas/Message/new_chat_photo`.
                var newChatPhoto: [Components.Schemas.PhotoSize]?
                /// *Optional*. Service message: the chat photo was deleted
                ///
                /// - Remark: Generated from `#/components/schemas/Message/delete_chat_photo`.
                var deleteChatPhoto: Swift.Bool?
                /// *Optional*. Service message: the group has been created
                ///
                /// - Remark: Generated from `#/components/schemas/Message/group_chat_created`.
                var groupChatCreated: Swift.Bool?
                /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/supergroup_chat_created`.
                var supergroupChatCreated: Swift.Bool?
                /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/channel_chat_created`.
                var channelChatCreated: Swift.Bool?
                /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/migrate_to_chat_id`.
                var migrateToChatId: Swift.Int?
                /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/migrate_from_chat_id`.
                var migrateFromChatId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/Message/pinned_message`.
                var pinnedMessage: Components.Schemas.Message?
                /// - Remark: Generated from `#/components/schemas/Message/invoice`.
                var invoice: Components.Schemas.Invoice?
                /// - Remark: Generated from `#/components/schemas/Message/successful_payment`.
                var successfulPayment: Components.Schemas.SuccessfulPayment?
                /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
                ///
                /// - Remark: Generated from `#/components/schemas/Message/connected_website`.
                var connectedWebsite: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Message/passport_data`.
                var passportData: Components.Schemas.PassportData?
                /// - Remark: Generated from `#/components/schemas/Message/proximity_alert_triggered`.
                var proximityAlertTriggered: Components.Schemas.ProximityAlertTriggered?
                /// - Remark: Generated from `#/components/schemas/Message/reply_markup`.
                var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                /// *Optional*. Amount of views. Only for channel messages.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/views`.
                var views: Swift.Int?
                /// *Optional*. How many times the message has been forwarded
                ///
                /// - Remark: Generated from `#/components/schemas/Message/forwards`.
                var forwards: Swift.Int?
                /// *Optional*. Is the message scheduled.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/is_scheduled`.
                var isScheduled: Swift.Bool?
                /// *Optional*. Time the message will be sent.
                ///
                /// - Remark: Generated from `#/components/schemas/Message/scheduled_at`.
                var scheduledAt: OpenAPIRuntime.OpenAPIValueContainer?
                init(
                    messageId: Swift.Int,
                    from: Components.Schemas.User? = nil,
                    senderChat: Components.Schemas.Chat? = nil,
                    date: Swift.Int,
                    chat: Components.Schemas.Chat,
                    forwardFrom: Components.Schemas.User? = nil,
                    forwardFromChat: Components.Schemas.Chat? = nil,
                    forwardFromMessageId: Swift.Int? = nil,
                    forwardSignature: Swift.String? = nil,
                    forwardSenderName: Swift.String? = nil,
                    forwardDate: Swift.Int? = nil,
                    replyToMessage: Components.Schemas.Message? = nil,
                    viaBot: Components.Schemas.User? = nil,
                    editDate: Swift.Int? = nil,
                    mediaGroupId: Swift.String? = nil,
                    messageThreadId: Swift.String? = nil,
                    authorSignature: Swift.String? = nil,
                    text: Swift.String? = nil,
                    entities: [Components.Schemas.MessageEntity]? = nil,
                    animation: Components.Schemas.Animation? = nil,
                    audio: Components.Schemas.Audio? = nil,
                    document: Components.Schemas.Document? = nil,
                    photo: [Components.Schemas.PhotoSize]? = nil,
                    sticker: Components.Schemas.Sticker? = nil,
                    video: Components.Schemas.Video? = nil,
                    videoNote: Components.Schemas.VideoNote? = nil,
                    voice: Components.Schemas.Voice? = nil,
                    caption: Swift.String? = nil,
                    captionEntities: [Components.Schemas.MessageEntity]? = nil,
                    contact: Components.Schemas.Contact? = nil,
                    dice: Components.Schemas.Dice? = nil,
                    game: Components.Schemas.Game? = nil,
                    poll: Components.Schemas.Poll? = nil,
                    venue: Components.Schemas.Venue? = nil,
                    location: Components.Schemas.Location? = nil,
                    newChatMembers: [Components.Schemas.User]? = nil,
                    leftChatMember: Components.Schemas.User? = nil,
                    newChatTitle: Swift.String? = nil,
                    newChatPhoto: [Components.Schemas.PhotoSize]? = nil,
                    deleteChatPhoto: Swift.Bool? = nil,
                    groupChatCreated: Swift.Bool? = nil,
                    supergroupChatCreated: Swift.Bool? = nil,
                    channelChatCreated: Swift.Bool? = nil,
                    migrateToChatId: Swift.Int? = nil,
                    migrateFromChatId: Swift.Int? = nil,
                    pinnedMessage: Components.Schemas.Message? = nil,
                    invoice: Components.Schemas.Invoice? = nil,
                    successfulPayment: Components.Schemas.SuccessfulPayment? = nil,
                    connectedWebsite: Swift.String? = nil,
                    passportData: Components.Schemas.PassportData? = nil,
                    proximityAlertTriggered: Components.Schemas.ProximityAlertTriggered? = nil,
                    replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                    views: Swift.Int? = nil,
                    forwards: Swift.Int? = nil,
                    isScheduled: Swift.Bool? = nil,
                    scheduledAt: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.messageId = messageId
                    self.from = from
                    self.senderChat = senderChat
                    self.date = date
                    self.chat = chat
                    self.forwardFrom = forwardFrom
                    self.forwardFromChat = forwardFromChat
                    self.forwardFromMessageId = forwardFromMessageId
                    self.forwardSignature = forwardSignature
                    self.forwardSenderName = forwardSenderName
                    self.forwardDate = forwardDate
                    self.replyToMessage = replyToMessage
                    self.viaBot = viaBot
                    self.editDate = editDate
                    self.mediaGroupId = mediaGroupId
                    self.messageThreadId = messageThreadId
                    self.authorSignature = authorSignature
                    self.text = text
                    self.entities = entities
                    self.animation = animation
                    self.audio = audio
                    self.document = document
                    self.photo = photo
                    self.sticker = sticker
                    self.video = video
                    self.videoNote = videoNote
                    self.voice = voice
                    self.caption = caption
                    self.captionEntities = captionEntities
                    self.contact = contact
                    self.dice = dice
                    self.game = game
                    self.poll = poll
                    self.venue = venue
                    self.location = location
                    self.newChatMembers = newChatMembers
                    self.leftChatMember = leftChatMember
                    self.newChatTitle = newChatTitle
                    self.newChatPhoto = newChatPhoto
                    self.deleteChatPhoto = deleteChatPhoto
                    self.groupChatCreated = groupChatCreated
                    self.supergroupChatCreated = supergroupChatCreated
                    self.channelChatCreated = channelChatCreated
                    self.migrateToChatId = migrateToChatId
                    self.migrateFromChatId = migrateFromChatId
                    self.pinnedMessage = pinnedMessage
                    self.invoice = invoice
                    self.successfulPayment = successfulPayment
                    self.connectedWebsite = connectedWebsite
                    self.passportData = passportData
                    self.proximityAlertTriggered = proximityAlertTriggered
                    self.replyMarkup = replyMarkup
                    self.views = views
                    self.forwards = forwards
                    self.isScheduled = isScheduled
                    self.scheduledAt = scheduledAt
                }
                typealias CodingKeys = Components.Schemas.Message.CodingKeys
            }
        }
        /// This object represents a unique message identifier.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageId`.
        public struct MessageId: Codable, Hashable, Sendable {
            /// Unique message identifier
            ///
            /// - Remark: Generated from `#/components/schemas/MessageId/message_id`.
            public var messageId: Swift.Int
            /// Creates a new `MessageId`.
            ///
            /// - Parameters:
            ///   - messageId: Unique message identifier
            public init(messageId: Swift.Int) {
                self.messageId = messageId
            }
            public enum CodingKeys: String, CodingKey {
                case messageId = "message_id"
            }
        }
        /// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageEntity`.
        public struct MessageEntity: Codable, Hashable, Sendable {
            /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mention = "mention"
                case hashtag = "hashtag"
                case cashtag = "cashtag"
                case botCommand = "bot_command"
                case url = "url"
                case email = "email"
                case phoneNumber = "phone_number"
                case bold = "bold"
                case italic = "italic"
                case underline = "underline"
                case strikethrough = "strikethrough"
                case code = "code"
                case pre = "pre"
                case textLink = "text_link"
                case textMention = "text_mention"
            }
            /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/type`.
            public var _type: Components.Schemas.MessageEntity._TypePayload
            /// Offset in UTF-16 code units to the start of the entity
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/offset`.
            public var offset: Swift.Int
            /// Length of the entity in UTF-16 code units
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/length`.
            public var length: Swift.Int
            /// *Optional*. For “text\_link” only, url that will be opened after user taps on the text
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageEntity/user`.
            public var user: Components.Schemas.User?
            /// *Optional*. For “pre” only, the programming language of the entity text
            ///
            /// - Remark: Generated from `#/components/schemas/MessageEntity/language`.
            public var language: Swift.String?
            /// Creates a new `MessageEntity`.
            ///
            /// - Parameters:
            ///   - _type: Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
            ///   - offset: Offset in UTF-16 code units to the start of the entity
            ///   - length: Length of the entity in UTF-16 code units
            ///   - url: *Optional*. For “text\_link” only, url that will be opened after user taps on the text
            ///   - user:
            ///   - language: *Optional*. For “pre” only, the programming language of the entity text
            public init(
                _type: Components.Schemas.MessageEntity._TypePayload,
                offset: Swift.Int,
                length: Swift.Int,
                url: Swift.String? = nil,
                user: Components.Schemas.User? = nil,
                language: Swift.String? = nil
            ) {
                self._type = _type
                self.offset = offset
                self.length = length
                self.url = url
                self.user = user
                self.language = language
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case offset
                case length
                case url
                case user
                case language
            }
        }
        /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
        ///
        /// - Remark: Generated from `#/components/schemas/PhotoSize`.
        public struct PhotoSize: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Photo width
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/width`.
            public var width: Swift.Int
            /// Photo height
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/height`.
            public var height: Swift.Int
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/PhotoSize/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `PhotoSize`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Photo width
            ///   - height: Photo height
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.width = width
                self.height = height
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case width
                case height
                case fileSize = "file_size"
            }
        }
        /// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
        ///
        /// - Remark: Generated from `#/components/schemas/Animation`.
        public struct Animation: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Video width as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/width`.
            public var width: Swift.Int
            /// Video height as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/height`.
            public var height: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Animation/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original animation filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_name`.
            public var fileName: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/mime_type`.
            public var mimeType: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Animation/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `Animation`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Video width as defined by sender
            ///   - height: Video height as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - fileName: *Optional*. Original animation filename as defined by sender
            ///   - mimeType: *Optional*. MIME type of the file as defined by sender
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                fileName: Swift.String? = nil,
                mimeType: Swift.String? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.width = width
                self.height = height
                self.duration = duration
                self.thumb = thumb
                self.fileName = fileName
                self.mimeType = mimeType
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case width
                case height
                case duration
                case thumb
                case fileName = "file_name"
                case mimeType = "mime_type"
                case fileSize = "file_size"
            }
        }
        /// This object represents an audio file to be treated as music by the Telegram clients.
        ///
        /// - Remark: Generated from `#/components/schemas/Audio`.
        public struct Audio: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Duration of the audio in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/duration`.
            public var duration: Swift.Int
            /// *Optional*. Performer of the audio as defined by sender or by audio tags
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Title of the audio as defined by sender or by audio tags
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/title`.
            public var title: Swift.String?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_name`.
            public var fileName: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/mime_type`.
            public var mimeType: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Audio/file_size`.
            public var fileSize: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Audio/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// Creates a new `Audio`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - duration: Duration of the audio in seconds as defined by sender
            ///   - performer: *Optional*. Performer of the audio as defined by sender or by audio tags
            ///   - title: *Optional*. Title of the audio as defined by sender or by audio tags
            ///   - fileName: *Optional*. Original filename as defined by sender
            ///   - mimeType: *Optional*. MIME type of the file as defined by sender
            ///   - fileSize: *Optional*. File size
            ///   - thumb:
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                duration: Swift.Int,
                performer: Swift.String? = nil,
                title: Swift.String? = nil,
                fileName: Swift.String? = nil,
                mimeType: Swift.String? = nil,
                fileSize: Swift.Int? = nil,
                thumb: Components.Schemas.PhotoSize? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.duration = duration
                self.performer = performer
                self.title = title
                self.fileName = fileName
                self.mimeType = mimeType
                self.fileSize = fileSize
                self.thumb = thumb
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case duration
                case performer
                case title
                case fileName = "file_name"
                case mimeType = "mime_type"
                case fileSize = "file_size"
                case thumb
            }
        }
        /// This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
        ///
        /// - Remark: Generated from `#/components/schemas/Document`.
        public struct Document: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Document/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_name`.
            public var fileName: Swift.String?
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Document/mime_type`.
            public var mimeType: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Document/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `Document`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - thumb:
            ///   - fileName: *Optional*. Original filename as defined by sender
            ///   - mimeType: *Optional*. MIME type of the file as defined by sender
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                thumb: Components.Schemas.PhotoSize? = nil,
                fileName: Swift.String? = nil,
                mimeType: Swift.String? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.thumb = thumb
                self.fileName = fileName
                self.mimeType = mimeType
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case thumb
                case fileName = "file_name"
                case mimeType = "mime_type"
                case fileSize = "file_size"
            }
        }
        /// This object represents a video file.
        ///
        /// - Remark: Generated from `#/components/schemas/Video`.
        public struct Video: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Video width as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/width`.
            public var width: Swift.Int
            /// Video height as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/height`.
            public var height: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Video/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Original filename as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_name`.
            public var fileName: Swift.String?
            /// *Optional*. Mime type of a file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Video/mime_type`.
            public var mimeType: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Video/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `Video`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Video width as defined by sender
            ///   - height: Video height as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - fileName: *Optional*. Original filename as defined by sender
            ///   - mimeType: *Optional*. Mime type of a file as defined by sender
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                fileName: Swift.String? = nil,
                mimeType: Swift.String? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.width = width
                self.height = height
                self.duration = duration
                self.thumb = thumb
                self.fileName = fileName
                self.mimeType = mimeType
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case width
                case height
                case duration
                case thumb
                case fileName = "file_name"
                case mimeType = "mime_type"
                case fileSize = "file_size"
            }
        }
        /// This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
        ///
        /// - Remark: Generated from `#/components/schemas/VideoNote`.
        public struct VideoNote: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Video width and height (diameter of the video message) as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/length`.
            public var length: Swift.Int
            /// Duration of the video in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/VideoNote/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/VideoNote/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `VideoNote`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - length: Video width and height (diameter of the video message) as defined by sender
            ///   - duration: Duration of the video in seconds as defined by sender
            ///   - thumb:
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                length: Swift.Int,
                duration: Swift.Int,
                thumb: Components.Schemas.PhotoSize? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.length = length
                self.duration = duration
                self.thumb = thumb
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case length
                case duration
                case thumb
                case fileSize = "file_size"
            }
        }
        /// This object represents a voice note.
        ///
        /// - Remark: Generated from `#/components/schemas/Voice`.
        public struct Voice: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Duration of the audio in seconds as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/duration`.
            public var duration: Swift.Int
            /// *Optional*. MIME type of the file as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/mime_type`.
            public var mimeType: Swift.String?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Voice/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `Voice`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - duration: Duration of the audio in seconds as defined by sender
            ///   - mimeType: *Optional*. MIME type of the file as defined by sender
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                duration: Swift.Int,
                mimeType: Swift.String? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.duration = duration
                self.mimeType = mimeType
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case duration
                case mimeType = "mime_type"
                case fileSize = "file_size"
            }
        }
        /// This object represents a phone contact.
        ///
        /// - Remark: Generated from `#/components/schemas/Contact`.
        public struct Contact: Codable, Hashable, Sendable {
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/phone_number`.
            public var phoneNumber: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/first_name`.
            public var firstName: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/last_name`.
            public var lastName: Swift.String?
            /// *Optional*. Contact's user identifier in Telegram
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/user_id`.
            public var userId: Swift.Int?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
            ///
            /// - Remark: Generated from `#/components/schemas/Contact/vcard`.
            public var vcard: Swift.String?
            /// Creates a new `Contact`.
            ///
            /// - Parameters:
            ///   - phoneNumber: Contact's phone number
            ///   - firstName: Contact's first name
            ///   - lastName: *Optional*. Contact's last name
            ///   - userId: *Optional*. Contact's user identifier in Telegram
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
            public init(
                phoneNumber: Swift.String,
                firstName: Swift.String,
                lastName: Swift.String? = nil,
                userId: Swift.Int? = nil,
                vcard: Swift.String? = nil
            ) {
                self.phoneNumber = phoneNumber
                self.firstName = firstName
                self.lastName = lastName
                self.userId = userId
                self.vcard = vcard
            }
            public enum CodingKeys: String, CodingKey {
                case phoneNumber = "phone_number"
                case firstName = "first_name"
                case lastName = "last_name"
                case userId = "user_id"
                case vcard
            }
        }
        /// This object represents an animated emoji that displays a random value.
        ///
        /// - Remark: Generated from `#/components/schemas/Dice`.
        public struct Dice: Codable, Hashable, Sendable {
            /// Emoji on which the dice throw animation is based
            ///
            /// - Remark: Generated from `#/components/schemas/Dice/emoji`.
            public var emoji: Swift.String
            /// Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
            ///
            /// - Remark: Generated from `#/components/schemas/Dice/value`.
            public var value: Swift.Int
            /// Creates a new `Dice`.
            ///
            /// - Parameters:
            ///   - emoji: Emoji on which the dice throw animation is based
            ///   - value: Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
            public init(
                emoji: Swift.String,
                value: Swift.Int
            ) {
                self.emoji = emoji
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case emoji
                case value
            }
        }
        /// This object contains information about one answer option in a poll.
        ///
        /// - Remark: Generated from `#/components/schemas/PollOption`.
        public struct PollOption: Codable, Hashable, Sendable {
            /// Option text, 1-100 characters
            ///
            /// - Remark: Generated from `#/components/schemas/PollOption/text`.
            public var text: Swift.String
            /// Number of users that voted for this option
            ///
            /// - Remark: Generated from `#/components/schemas/PollOption/voter_count`.
            public var voterCount: Swift.Int
            /// Creates a new `PollOption`.
            ///
            /// - Parameters:
            ///   - text: Option text, 1-100 characters
            ///   - voterCount: Number of users that voted for this option
            public init(
                text: Swift.String,
                voterCount: Swift.Int
            ) {
                self.text = text
                self.voterCount = voterCount
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case voterCount = "voter_count"
            }
        }
        /// This object represents an answer of a user in a non-anonymous poll.
        ///
        /// - Remark: Generated from `#/components/schemas/PollAnswer`.
        public struct PollAnswer: Codable, Hashable, Sendable {
            /// Unique poll identifier
            ///
            /// - Remark: Generated from `#/components/schemas/PollAnswer/poll_id`.
            public var pollId: Swift.String
            /// - Remark: Generated from `#/components/schemas/PollAnswer/user`.
            public var user: Components.Schemas.User
            /// 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            ///
            /// - Remark: Generated from `#/components/schemas/PollAnswer/option_ids`.
            public var optionIds: [Swift.Int]
            /// Creates a new `PollAnswer`.
            ///
            /// - Parameters:
            ///   - pollId: Unique poll identifier
            ///   - user:
            ///   - optionIds: 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            public init(
                pollId: Swift.String,
                user: Components.Schemas.User,
                optionIds: [Swift.Int]
            ) {
                self.pollId = pollId
                self.user = user
                self.optionIds = optionIds
            }
            public enum CodingKeys: String, CodingKey {
                case pollId = "poll_id"
                case user
                case optionIds = "option_ids"
            }
        }
        /// This object contains information about a poll.
        ///
        /// - Remark: Generated from `#/components/schemas/Poll`.
        public struct Poll: Codable, Hashable, Sendable {
            /// Unique poll identifier
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/id`.
            public var id: Swift.String
            /// Poll question, 1-255 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/question`.
            public var question: Swift.String
            /// List of poll options
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/options`.
            public var options: [Components.Schemas.PollOption]
            /// Total number of users that voted in the poll
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/total_voter_count`.
            public var totalVoterCount: Swift.Int
            /// True, if the poll is closed
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/is_closed`.
            public var isClosed: Swift.Bool
            /// True, if the poll is anonymous
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/is_anonymous`.
            public var isAnonymous: Swift.Bool
            /// Poll type, currently can be “regular” or “quiz”
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/type`.
            public var _type: Swift.String
            /// True, if the poll allows multiple answers
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/allows_multiple_answers`.
            public var allowsMultipleAnswers: Swift.Bool
            /// *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/correct_option_id`.
            public var correctOptionId: Swift.Int?
            /// *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/explanation`.
            public var explanation: Swift.String?
            /// *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/explanation_entities`.
            public var explanationEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Amount of time in seconds the poll will be active after creation
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/open_period`.
            public var openPeriod: Swift.Int?
            /// *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
            ///
            /// - Remark: Generated from `#/components/schemas/Poll/close_date`.
            public var closeDate: Swift.Int?
            /// Creates a new `Poll`.
            ///
            /// - Parameters:
            ///   - id: Unique poll identifier
            ///   - question: Poll question, 1-255 characters
            ///   - options: List of poll options
            ///   - totalVoterCount: Total number of users that voted in the poll
            ///   - isClosed: True, if the poll is closed
            ///   - isAnonymous: True, if the poll is anonymous
            ///   - _type: Poll type, currently can be “regular” or “quiz”
            ///   - allowsMultipleAnswers: True, if the poll allows multiple answers
            ///   - correctOptionId: *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            ///   - explanation: *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
            ///   - explanationEntities: *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
            ///   - openPeriod: *Optional*. Amount of time in seconds the poll will be active after creation
            ///   - closeDate: *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
            public init(
                id: Swift.String,
                question: Swift.String,
                options: [Components.Schemas.PollOption],
                totalVoterCount: Swift.Int,
                isClosed: Swift.Bool,
                isAnonymous: Swift.Bool,
                _type: Swift.String,
                allowsMultipleAnswers: Swift.Bool,
                correctOptionId: Swift.Int? = nil,
                explanation: Swift.String? = nil,
                explanationEntities: [Components.Schemas.MessageEntity]? = nil,
                openPeriod: Swift.Int? = nil,
                closeDate: Swift.Int? = nil
            ) {
                self.id = id
                self.question = question
                self.options = options
                self.totalVoterCount = totalVoterCount
                self.isClosed = isClosed
                self.isAnonymous = isAnonymous
                self._type = _type
                self.allowsMultipleAnswers = allowsMultipleAnswers
                self.correctOptionId = correctOptionId
                self.explanation = explanation
                self.explanationEntities = explanationEntities
                self.openPeriod = openPeriod
                self.closeDate = closeDate
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case question
                case options
                case totalVoterCount = "total_voter_count"
                case isClosed = "is_closed"
                case isAnonymous = "is_anonymous"
                case _type = "type"
                case allowsMultipleAnswers = "allows_multiple_answers"
                case correctOptionId = "correct_option_id"
                case explanation
                case explanationEntities = "explanation_entities"
                case openPeriod = "open_period"
                case closeDate = "close_date"
            }
        }
        /// This object represents a point on the map.
        ///
        /// - Remark: Generated from `#/components/schemas/Location`.
        public struct Location: Codable, Hashable, Sendable {
            /// Longitude as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Location/longitude`.
            public var longitude: Swift.Double
            /// Latitude as defined by sender
            ///
            /// - Remark: Generated from `#/components/schemas/Location/latitude`.
            public var latitude: Swift.Double
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/Location/horizontal_accuracy`.
            public var horizontalAccuracy: Swift.Double?
            /// *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/live_period`.
            public var livePeriod: Swift.Int?
            /// *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/heading`.
            public var heading: Swift.Int?
            /// *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/proximity_alert_radius`.
            public var proximityAlertRadius: Swift.Int?
            /// Creates a new `Location`.
            ///
            /// - Parameters:
            ///   - longitude: Longitude as defined by sender
            ///   - latitude: Latitude as defined by sender
            ///   - horizontalAccuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - livePeriod: *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            ///   - heading: *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            ///   - proximityAlertRadius: *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            public init(
                longitude: Swift.Double,
                latitude: Swift.Double,
                horizontalAccuracy: Swift.Double? = nil,
                livePeriod: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximityAlertRadius: Swift.Int? = nil
            ) {
                self.longitude = longitude
                self.latitude = latitude
                self.horizontalAccuracy = horizontalAccuracy
                self.livePeriod = livePeriod
                self.heading = heading
                self.proximityAlertRadius = proximityAlertRadius
            }
            public enum CodingKeys: String, CodingKey {
                case longitude
                case latitude
                case horizontalAccuracy = "horizontal_accuracy"
                case livePeriod = "live_period"
                case heading
                case proximityAlertRadius = "proximity_alert_radius"
            }
        }
        /// This object represents a venue.
        ///
        /// - Remark: Generated from `#/components/schemas/Venue`.
        public struct Venue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Venue/location`.
            public var location: Components.Schemas.Location
            /// Name of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/foursquare_id`.
            public var foursquareId: Swift.String?
            /// *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/foursquare_type`.
            public var foursquareType: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/google_place_id`.
            public var googlePlaceId: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/Venue/google_place_type`.
            public var googlePlaceType: Swift.String?
            /// Creates a new `Venue`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - title: Name of the venue
            ///   - address: Address of the venue
            ///   - foursquareId: *Optional*. Foursquare identifier of the venue
            ///   - foursquareType: *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - googlePlaceId: *Optional*. Google Places identifier of the venue
            ///   - googlePlaceType: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            public init(
                location: Components.Schemas.Location,
                title: Swift.String,
                address: Swift.String,
                foursquareId: Swift.String? = nil,
                foursquareType: Swift.String? = nil,
                googlePlaceId: Swift.String? = nil,
                googlePlaceType: Swift.String? = nil
            ) {
                self.location = location
                self.title = title
                self.address = address
                self.foursquareId = foursquareId
                self.foursquareType = foursquareType
                self.googlePlaceId = googlePlaceId
                self.googlePlaceType = googlePlaceType
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case title
                case address
                case foursquareId = "foursquare_id"
                case foursquareType = "foursquare_type"
                case googlePlaceId = "google_place_id"
                case googlePlaceType = "google_place_type"
            }
        }
        /// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
        ///
        /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered`.
        public struct ProximityAlertTriggered: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/traveler`.
            public var traveler: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/watcher`.
            public var watcher: Components.Schemas.User
            /// The distance between the users
            ///
            /// - Remark: Generated from `#/components/schemas/ProximityAlertTriggered/distance`.
            public var distance: Swift.Int
            /// Creates a new `ProximityAlertTriggered`.
            ///
            /// - Parameters:
            ///   - traveler:
            ///   - watcher:
            ///   - distance: The distance between the users
            public init(
                traveler: Components.Schemas.User,
                watcher: Components.Schemas.User,
                distance: Swift.Int
            ) {
                self.traveler = traveler
                self.watcher = watcher
                self.distance = distance
            }
            public enum CodingKeys: String, CodingKey {
                case traveler
                case watcher
                case distance
            }
        }
        /// This object represent a user's profile pictures.
        ///
        /// - Remark: Generated from `#/components/schemas/UserProfilePhotos`.
        public struct UserProfilePhotos: Codable, Hashable, Sendable {
            /// Total number of profile pictures the target user has
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfilePhotos/total_count`.
            public var totalCount: Swift.Int
            /// Requested profile pictures (in up to 4 sizes each)
            ///
            /// - Remark: Generated from `#/components/schemas/UserProfilePhotos/photos`.
            public var photos: [[Components.Schemas.PhotoSize]]
            /// Creates a new `UserProfilePhotos`.
            ///
            /// - Parameters:
            ///   - totalCount: Total number of profile pictures the target user has
            ///   - photos: Requested profile pictures (in up to 4 sizes each)
            public init(
                totalCount: Swift.Int,
                photos: [[Components.Schemas.PhotoSize]]
            ) {
                self.totalCount = totalCount
                self.photos = photos
            }
            public enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case photos
            }
        }
        /// This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
        ///
        /// Maximum file size to download is 20 MB
        ///
        /// - Remark: Generated from `#/components/schemas/File`.
        public struct File: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// *Optional*. File size, if known
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_size`.
            public var fileSize: Swift.Int?
            /// *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
            ///
            /// - Remark: Generated from `#/components/schemas/File/file_path`.
            public var filePath: Swift.String?
            /// Creates a new `File`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - fileSize: *Optional*. File size, if known
            ///   - filePath: *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                fileSize: Swift.Int? = nil,
                filePath: Swift.String? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.fileSize = fileSize
                self.filePath = filePath
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case fileSize = "file_size"
                case filePath = "file_path"
            }
        }
        /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
        ///
        /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup`.
        public struct ReplyKeyboardMarkup: Codable, Hashable, Sendable {
            /// Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/keyboard`.
            public var keyboard: [[Components.Schemas.KeyboardButton]]
            /// *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/resize_keyboard`.
            public var resizeKeyboard: Swift.Bool?
            /// *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/one_time_keyboard`.
            public var oneTimeKeyboard: Swift.Bool?
            /// *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            ///
            /// *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardMarkup/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ReplyKeyboardMarkup`.
            ///
            /// - Parameters:
            ///   - keyboard: Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
            ///   - resizeKeyboard: *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            ///   - oneTimeKeyboard: *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
            ///   - selective: *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            public init(
                keyboard: [[Components.Schemas.KeyboardButton]],
                resizeKeyboard: Swift.Bool? = nil,
                oneTimeKeyboard: Swift.Bool? = nil,
                selective: Swift.Bool? = nil
            ) {
                self.keyboard = keyboard
                self.resizeKeyboard = resizeKeyboard
                self.oneTimeKeyboard = oneTimeKeyboard
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case keyboard
                case resizeKeyboard = "resize_keyboard"
                case oneTimeKeyboard = "one_time_keyboard"
                case selective
            }
        }
        /// This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
        ///
        /// - Remark: Generated from `#/components/schemas/KeyboardButton`.
        public struct KeyboardButton: Codable, Hashable, Sendable {
            /// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/text`.
            public var text: Swift.String
            /// *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_contact`.
            public var requestContact: Swift.Bool?
            /// *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_location`.
            public var requestLocation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/KeyboardButton/request_poll`.
            public var requestPoll: Components.Schemas.KeyboardButtonPollType?
            /// Creates a new `KeyboardButton`.
            ///
            /// - Parameters:
            ///   - text: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
            ///   - requestContact: *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            ///   - requestLocation: *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
            ///   - requestPoll:
            public init(
                text: Swift.String,
                requestContact: Swift.Bool? = nil,
                requestLocation: Swift.Bool? = nil,
                requestPoll: Components.Schemas.KeyboardButtonPollType? = nil
            ) {
                self.text = text
                self.requestContact = requestContact
                self.requestLocation = requestLocation
                self.requestPoll = requestPoll
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case requestContact = "request_contact"
                case requestLocation = "request_location"
                case requestPoll = "request_poll"
            }
        }
        /// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
        ///
        /// - Remark: Generated from `#/components/schemas/KeyboardButtonPollType`.
        public struct KeyboardButtonPollType: Codable, Hashable, Sendable {
            /// *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            ///
            /// - Remark: Generated from `#/components/schemas/KeyboardButtonPollType/type`.
            public var _type: Swift.String?
            /// Creates a new `KeyboardButtonPollType`.
            ///
            /// - Parameters:
            ///   - _type: *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            public init(_type: Swift.String? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
        ///
        /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove`.
        public struct ReplyKeyboardRemove: Codable, Hashable, Sendable {
            /// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove/remove_keyboard`.
            public var removeKeyboard: Swift.Bool
            /// *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            ///
            /// *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplyKeyboardRemove/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ReplyKeyboardRemove`.
            ///
            /// - Parameters:
            ///   - removeKeyboard: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
            ///   - selective: *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.  
            public init(
                removeKeyboard: Swift.Bool,
                selective: Swift.Bool? = nil
            ) {
                self.removeKeyboard = removeKeyboard
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case removeKeyboard = "remove_keyboard"
                case selective
            }
        }
        /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineKeyboardMarkup`.
        public struct InlineKeyboardMarkup: Codable, Hashable, Sendable {
            /// Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardMarkup/inline_keyboard`.
            public var inlineKeyboard: [[Components.Schemas.InlineKeyboardButton]]
            /// Creates a new `InlineKeyboardMarkup`.
            ///
            /// - Parameters:
            ///   - inlineKeyboard: Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
            public init(inlineKeyboard: [[Components.Schemas.InlineKeyboardButton]]) {
                self.inlineKeyboard = inlineKeyboard
            }
            public enum CodingKeys: String, CodingKey {
                case inlineKeyboard = "inline_keyboard"
            }
        }
        /// This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton`.
        public struct InlineKeyboardButton: Codable, Hashable, Sendable {
            /// Label text on the button
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/text`.
            public var text: Swift.String
            /// *Optional*. HTTP or tg:// url to be opened when button is pressed
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/login_url`.
            public var loginUrl: Components.Schemas.LoginUrl?
            /// *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/callback_data`.
            public var callbackData: Swift.String?
            /// *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  
            ///
            /// **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/switch_inline_query`.
            public var switchInlineQuery: Swift.String?
            /// *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  
            ///
            /// This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/switch_inline_query_current_chat`.
            public var switchInlineQueryCurrentChat: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/callback_game`.
            public var callbackGame: Components.Schemas.CallbackGame?
            /// *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  
            ///
            /// **NOTE:** This type of button **must** always be the first button in the first row.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineKeyboardButton/pay`.
            public var pay: Swift.Bool?
            /// Creates a new `InlineKeyboardButton`.
            ///
            /// - Parameters:
            ///   - text: Label text on the button
            ///   - url: *Optional*. HTTP or tg:// url to be opened when button is pressed
            ///   - loginUrl:
            ///   - callbackData: *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
            ///   - switchInlineQuery: *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  
            ///   - switchInlineQueryCurrentChat: *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  
            ///   - callbackGame:
            ///   - pay: *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  
            public init(
                text: Swift.String,
                url: Swift.String? = nil,
                loginUrl: Components.Schemas.LoginUrl? = nil,
                callbackData: Swift.String? = nil,
                switchInlineQuery: Swift.String? = nil,
                switchInlineQueryCurrentChat: Swift.String? = nil,
                callbackGame: Components.Schemas.CallbackGame? = nil,
                pay: Swift.Bool? = nil
            ) {
                self.text = text
                self.url = url
                self.loginUrl = loginUrl
                self.callbackData = callbackData
                self.switchInlineQuery = switchInlineQuery
                self.switchInlineQueryCurrentChat = switchInlineQueryCurrentChat
                self.callbackGame = callbackGame
                self.pay = pay
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case url
                case loginUrl = "login_url"
                case callbackData = "callback_data"
                case switchInlineQuery = "switch_inline_query"
                case switchInlineQueryCurrentChat = "switch_inline_query_current_chat"
                case callbackGame = "callback_game"
                case pay
            }
        }
        /// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
        ///
        /// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
        ///
        /// Sample bot: [@discussbot](https://t.me/discussbot)
        ///
        /// - Remark: Generated from `#/components/schemas/LoginUrl`.
        public struct LoginUrl: Codable, Hashable, Sendable {
            /// An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
            ///
            /// **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/url`.
            public var url: Swift.String
            /// *Optional*. New text of the button in forwarded messages.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/forward_text`.
            public var forwardText: Swift.String?
            /// *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/bot_username`.
            public var botUsername: Swift.String?
            /// *Optional*. Pass True to request the permission for your bot to send messages to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LoginUrl/request_write_access`.
            public var requestWriteAccess: Swift.Bool?
            /// Creates a new `LoginUrl`.
            ///
            /// - Parameters:
            ///   - url: An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  
            ///   - forwardText: *Optional*. New text of the button in forwarded messages.
            ///   - botUsername: *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
            ///   - requestWriteAccess: *Optional*. Pass True to request the permission for your bot to send messages to the user.
            public init(
                url: Swift.String,
                forwardText: Swift.String? = nil,
                botUsername: Swift.String? = nil,
                requestWriteAccess: Swift.Bool? = nil
            ) {
                self.url = url
                self.forwardText = forwardText
                self.botUsername = botUsername
                self.requestWriteAccess = requestWriteAccess
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case forwardText = "forward_text"
                case botUsername = "bot_username"
                case requestWriteAccess = "request_write_access"
            }
        }
        /// This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackQuery`.
        public struct CallbackQuery: Codable, Hashable, Sendable {
            /// Unique identifier for this query
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/message`.
            public var message: Components.Schemas.Message?
            /// *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/inline_message_id`.
            public var inlineMessageId: Swift.String?
            /// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/chat_instance`.
            public var chatInstance: Swift.String
            /// *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/data`.
            public var data: Swift.String?
            /// *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQuery/game_short_name`.
            public var gameShortName: Swift.String?
            /// Creates a new `CallbackQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this query
            ///   - from:
            ///   - message:
            ///   - inlineMessageId: *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
            ///   - chatInstance: Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
            ///   - data: *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
            ///   - gameShortName: *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                message: Components.Schemas.Message? = nil,
                inlineMessageId: Swift.String? = nil,
                chatInstance: Swift.String,
                data: Swift.String? = nil,
                gameShortName: Swift.String? = nil
            ) {
                self.id = id
                self.from = from
                self.message = message
                self.inlineMessageId = inlineMessageId
                self.chatInstance = chatInstance
                self.data = data
                self.gameShortName = gameShortName
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case message
                case inlineMessageId = "inline_message_id"
                case chatInstance = "chat_instance"
                case data
                case gameShortName = "game_short_name"
            }
        }
        /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
        ///
        /// - Remark: Generated from `#/components/schemas/ForceReply`.
        public struct ForceReply: Codable, Hashable, Sendable {
            /// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
            ///
            /// - Remark: Generated from `#/components/schemas/ForceReply/force_reply`.
            public var forceReply: Swift.Bool
            /// *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
            ///
            /// - Remark: Generated from `#/components/schemas/ForceReply/selective`.
            public var selective: Swift.Bool?
            /// Creates a new `ForceReply`.
            ///
            /// - Parameters:
            ///   - forceReply: Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
            ///   - selective: *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
            public init(
                forceReply: Swift.Bool,
                selective: Swift.Bool? = nil
            ) {
                self.forceReply = forceReply
                self.selective = selective
            }
            public enum CodingKeys: String, CodingKey {
                case forceReply = "force_reply"
                case selective
            }
        }
        /// This object represents a chat photo.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatPhoto`.
        public struct ChatPhoto: Codable, Hashable, Sendable {
            /// File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/small_file_id`.
            public var smallFileId: Swift.String
            /// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/small_file_unique_id`.
            public var smallFileUniqueId: Swift.String
            /// File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/big_file_id`.
            public var bigFileId: Swift.String
            /// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPhoto/big_file_unique_id`.
            public var bigFileUniqueId: Swift.String
            /// Creates a new `ChatPhoto`.
            ///
            /// - Parameters:
            ///   - smallFileId: File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///   - smallFileUniqueId: Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - bigFileId: File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
            ///   - bigFileUniqueId: Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            public init(
                smallFileId: Swift.String,
                smallFileUniqueId: Swift.String,
                bigFileId: Swift.String,
                bigFileUniqueId: Swift.String
            ) {
                self.smallFileId = smallFileId
                self.smallFileUniqueId = smallFileUniqueId
                self.bigFileId = bigFileId
                self.bigFileUniqueId = bigFileUniqueId
            }
            public enum CodingKeys: String, CodingKey {
                case smallFileId = "small_file_id"
                case smallFileUniqueId = "small_file_unique_id"
                case bigFileId = "big_file_id"
                case bigFileUniqueId = "big_file_unique_id"
            }
        }
        /// This object contains information about one member of a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatMember`.
        public struct ChatMember: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatMember/user`.
            public var user: Components.Schemas.User
            /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case creator = "creator"
                case administrator = "administrator"
                case member = "member"
                case restricted = "restricted"
                case left = "left"
                case kicked = "kicked"
            }
            /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/status`.
            public var status: Components.Schemas.ChatMember.StatusPayload
            /// *Optional*. Owner and administrators only. Custom title for this user
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/custom_title`.
            public var customTitle: Swift.String?
            /// *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/is_anonymous`.
            public var isAnonymous: Swift.Bool?
            /// *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_be_edited`.
            public var canBeEdited: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_post_messages`.
            public var canPostMessages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_edit_messages`.
            public var canEditMessages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can delete messages of other users
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_delete_messages`.
            public var canDeleteMessages: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_restrict_members`.
            public var canRestrictMembers: Swift.Bool?
            /// *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_promote_members`.
            public var canPromoteMembers: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_change_info`.
            public var canChangeInfo: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_invite_users`.
            public var canInviteUsers: Swift.Bool?
            /// *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_pin_messages`.
            public var canPinMessages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/is_member`.
            public var isMember: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_messages`.
            public var canSendMessages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_media_messages`.
            public var canSendMediaMessages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send polls
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_polls`.
            public var canSendPolls: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_send_other_messages`.
            public var canSendOtherMessages: Swift.Bool?
            /// *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/can_add_web_page_previews`.
            public var canAddWebPagePreviews: Swift.Bool?
            /// *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/until_date`.
            public var untilDate: Swift.Int?
            /// *Optional*. Time when the user joined the group. unix time
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMember/joined_date`.
            public var joinedDate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ChatMember/inviter`.
            public var inviter: Components.Schemas.User?
            /// Creates a new `ChatMember`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - status: The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
            ///   - customTitle: *Optional*. Owner and administrators only. Custom title for this user
            ///   - isAnonymous: *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
            ///   - canBeEdited: *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
            ///   - canPostMessages: *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
            ///   - canEditMessages: *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
            ///   - canDeleteMessages: *Optional*. Administrators only. True, if the administrator can delete messages of other users
            ///   - canRestrictMembers: *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
            ///   - canPromoteMembers: *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
            ///   - canChangeInfo: *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
            ///   - canInviteUsers: *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
            ///   - canPinMessages: *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
            ///   - isMember: *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
            ///   - canSendMessages: *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
            ///   - canSendMediaMessages: *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
            ///   - canSendPolls: *Optional*. Restricted only. True, if the user is allowed to send polls
            ///   - canSendOtherMessages: *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
            ///   - canAddWebPagePreviews: *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
            ///   - untilDate: *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
            ///   - joinedDate: *Optional*. Time when the user joined the group. unix time
            ///   - inviter:
            public init(
                user: Components.Schemas.User,
                status: Components.Schemas.ChatMember.StatusPayload,
                customTitle: Swift.String? = nil,
                isAnonymous: Swift.Bool? = nil,
                canBeEdited: Swift.Bool? = nil,
                canPostMessages: Swift.Bool? = nil,
                canEditMessages: Swift.Bool? = nil,
                canDeleteMessages: Swift.Bool? = nil,
                canRestrictMembers: Swift.Bool? = nil,
                canPromoteMembers: Swift.Bool? = nil,
                canChangeInfo: Swift.Bool? = nil,
                canInviteUsers: Swift.Bool? = nil,
                canPinMessages: Swift.Bool? = nil,
                isMember: Swift.Bool? = nil,
                canSendMessages: Swift.Bool? = nil,
                canSendMediaMessages: Swift.Bool? = nil,
                canSendPolls: Swift.Bool? = nil,
                canSendOtherMessages: Swift.Bool? = nil,
                canAddWebPagePreviews: Swift.Bool? = nil,
                untilDate: Swift.Int? = nil,
                joinedDate: Swift.Int? = nil,
                inviter: Components.Schemas.User? = nil
            ) {
                self.user = user
                self.status = status
                self.customTitle = customTitle
                self.isAnonymous = isAnonymous
                self.canBeEdited = canBeEdited
                self.canPostMessages = canPostMessages
                self.canEditMessages = canEditMessages
                self.canDeleteMessages = canDeleteMessages
                self.canRestrictMembers = canRestrictMembers
                self.canPromoteMembers = canPromoteMembers
                self.canChangeInfo = canChangeInfo
                self.canInviteUsers = canInviteUsers
                self.canPinMessages = canPinMessages
                self.isMember = isMember
                self.canSendMessages = canSendMessages
                self.canSendMediaMessages = canSendMediaMessages
                self.canSendPolls = canSendPolls
                self.canSendOtherMessages = canSendOtherMessages
                self.canAddWebPagePreviews = canAddWebPagePreviews
                self.untilDate = untilDate
                self.joinedDate = joinedDate
                self.inviter = inviter
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case status
                case customTitle = "custom_title"
                case isAnonymous = "is_anonymous"
                case canBeEdited = "can_be_edited"
                case canPostMessages = "can_post_messages"
                case canEditMessages = "can_edit_messages"
                case canDeleteMessages = "can_delete_messages"
                case canRestrictMembers = "can_restrict_members"
                case canPromoteMembers = "can_promote_members"
                case canChangeInfo = "can_change_info"
                case canInviteUsers = "can_invite_users"
                case canPinMessages = "can_pin_messages"
                case isMember = "is_member"
                case canSendMessages = "can_send_messages"
                case canSendMediaMessages = "can_send_media_messages"
                case canSendPolls = "can_send_polls"
                case canSendOtherMessages = "can_send_other_messages"
                case canAddWebPagePreviews = "can_add_web_page_previews"
                case untilDate = "until_date"
                case joinedDate = "joined_date"
                case inviter
            }
        }
        /// Describes actions that a non-administrator user is allowed to take in a chat.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatPermissions`.
        public struct ChatPermissions: Codable, Hashable, Sendable {
            /// *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_messages`.
            public var canSendMessages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_media_messages`.
            public var canSendMediaMessages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_polls`.
            public var canSendPolls: Swift.Bool?
            /// *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_send_other_messages`.
            public var canSendOtherMessages: Swift.Bool?
            /// *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_add_web_page_previews`.
            public var canAddWebPagePreviews: Swift.Bool?
            /// *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_change_info`.
            public var canChangeInfo: Swift.Bool?
            /// *Optional*. True, if the user is allowed to invite new users to the chat
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_invite_users`.
            public var canInviteUsers: Swift.Bool?
            /// *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
            ///
            /// - Remark: Generated from `#/components/schemas/ChatPermissions/can_pin_messages`.
            public var canPinMessages: Swift.Bool?
            /// Creates a new `ChatPermissions`.
            ///
            /// - Parameters:
            ///   - canSendMessages: *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
            ///   - canSendMediaMessages: *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
            ///   - canSendPolls: *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
            ///   - canSendOtherMessages: *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
            ///   - canAddWebPagePreviews: *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
            ///   - canChangeInfo: *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
            ///   - canInviteUsers: *Optional*. True, if the user is allowed to invite new users to the chat
            ///   - canPinMessages: *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
            public init(
                canSendMessages: Swift.Bool? = nil,
                canSendMediaMessages: Swift.Bool? = nil,
                canSendPolls: Swift.Bool? = nil,
                canSendOtherMessages: Swift.Bool? = nil,
                canAddWebPagePreviews: Swift.Bool? = nil,
                canChangeInfo: Swift.Bool? = nil,
                canInviteUsers: Swift.Bool? = nil,
                canPinMessages: Swift.Bool? = nil
            ) {
                self.canSendMessages = canSendMessages
                self.canSendMediaMessages = canSendMediaMessages
                self.canSendPolls = canSendPolls
                self.canSendOtherMessages = canSendOtherMessages
                self.canAddWebPagePreviews = canAddWebPagePreviews
                self.canChangeInfo = canChangeInfo
                self.canInviteUsers = canInviteUsers
                self.canPinMessages = canPinMessages
            }
            public enum CodingKeys: String, CodingKey {
                case canSendMessages = "can_send_messages"
                case canSendMediaMessages = "can_send_media_messages"
                case canSendPolls = "can_send_polls"
                case canSendOtherMessages = "can_send_other_messages"
                case canAddWebPagePreviews = "can_add_web_page_previews"
                case canChangeInfo = "can_change_info"
                case canInviteUsers = "can_invite_users"
                case canPinMessages = "can_pin_messages"
            }
        }
        /// Represents a location to which a chat is connected.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatLocation`.
        public struct ChatLocation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatLocation/location`.
            public var location: Components.Schemas.Location
            /// Location address; 1-64 characters, as defined by the chat owner
            ///
            /// - Remark: Generated from `#/components/schemas/ChatLocation/address`.
            public var address: Swift.String
            /// Creates a new `ChatLocation`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - address: Location address; 1-64 characters, as defined by the chat owner
            public init(
                location: Components.Schemas.Location,
                address: Swift.String
            ) {
                self.location = location
                self.address = address
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case address
            }
        }
        /// This object represents a bot command.
        ///
        /// - Remark: Generated from `#/components/schemas/BotCommand`.
        public struct BotCommand: Codable, Hashable, Sendable {
            /// Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            ///
            /// - Remark: Generated from `#/components/schemas/BotCommand/command`.
            public var command: Swift.String
            /// Description of the command, 3-256 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/BotCommand/description`.
            public var description: Swift.String
            /// Creates a new `BotCommand`.
            ///
            /// - Parameters:
            ///   - command: Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            ///   - description: Description of the command, 3-256 characters.
            public init(
                command: Swift.String,
                description: Swift.String
            ) {
                self.command = command
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case command
                case description
            }
        }
        /// Contains information about why a request was unsuccessful.
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseParameters`.
        public struct ResponseParameters: Codable, Hashable, Sendable {
            /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseParameters/migrate_to_chat_id`.
            public var migrateToChatId: Swift.Int?
            /// *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseParameters/retry_after`.
            public var retryAfter: Swift.Int?
            /// Creates a new `ResponseParameters`.
            ///
            /// - Parameters:
            ///   - migrateToChatId: *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            ///   - retryAfter: *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
            public init(
                migrateToChatId: Swift.Int? = nil,
                retryAfter: Swift.Int? = nil
            ) {
                self.migrateToChatId = migrateToChatId
                self.retryAfter = retryAfter
            }
            public enum CodingKeys: String, CodingKey {
                case migrateToChatId = "migrate_to_chat_id"
                case retryAfter = "retry_after"
            }
        }
        /// This object represents the content of a media message to be sent. It should be one of
        ///
        /// - Remark: Generated from `#/components/schemas/InputMedia`.
        public struct InputMedia: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputMedia/value1`.
            public var value1: Components.Schemas.InputMediaAnimation?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value2`.
            public var value2: Components.Schemas.InputMediaDocument?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value3`.
            public var value3: Components.Schemas.InputMediaAudio?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value4`.
            public var value4: Components.Schemas.InputMediaPhoto?
            /// - Remark: Generated from `#/components/schemas/InputMedia/value5`.
            public var value5: Components.Schemas.InputMediaVideo?
            /// Creates a new `InputMedia`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            public init(
                value1: Components.Schemas.InputMediaAnimation? = nil,
                value2: Components.Schemas.InputMediaDocument? = nil,
                value3: Components.Schemas.InputMediaAudio? = nil,
                value4: Components.Schemas.InputMediaPhoto? = nil,
                value5: Components.Schemas.InputMediaVideo? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
            }
        }
        /// Represents a photo to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaPhoto`.
        public struct InputMediaPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/media`.
            public var media: Swift.String
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaPhoto/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// Creates a new `InputMediaPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            public init(
                _type: Swift.String,
                media: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil
            ) {
                self._type = _type
                self.media = media
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
            }
        }
        /// Represents a video to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaVideo`.
        public struct InputMediaVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb`.
            public struct ThumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `ThumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/thumb`.
            public var thumb: Components.Schemas.InputMediaVideo.ThumbPayload?
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/width`.
            public var width: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/height`.
            public var height: Swift.Int?
            /// *Optional*. Video duration
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/duration`.
            public var duration: Swift.Int?
            /// *Optional*. Pass *True*, if the uploaded video is suitable for streaming
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaVideo/supports_streaming`.
            public var supportsStreaming: Swift.Bool?
            /// Creates a new `InputMediaVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - width: *Optional*. Video width
            ///   - height: *Optional*. Video height
            ///   - duration: *Optional*. Video duration
            ///   - supportsStreaming: *Optional*. Pass *True*, if the uploaded video is suitable for streaming
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaVideo.ThumbPayload? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                width: Swift.Int? = nil,
                height: Swift.Int? = nil,
                duration: Swift.Int? = nil,
                supportsStreaming: Swift.Bool? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.width = width
                self.height = height
                self.duration = duration
                self.supportsStreaming = supportsStreaming
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case width
                case height
                case duration
                case supportsStreaming = "supports_streaming"
            }
        }
        /// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaAnimation`.
        public struct InputMediaAnimation: Codable, Hashable, Sendable {
            /// Type of the result, must be *animation*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb`.
            public struct ThumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `ThumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/thumb`.
            public var thumb: Components.Schemas.InputMediaAnimation.ThumbPayload?
            /// *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Animation width
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/width`.
            public var width: Swift.Int?
            /// *Optional*. Animation height
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/height`.
            public var height: Swift.Int?
            /// *Optional*. Animation duration
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAnimation/duration`.
            public var duration: Swift.Int?
            /// Creates a new `InputMediaAnimation`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *animation*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - width: *Optional*. Animation width
            ///   - height: *Optional*. Animation height
            ///   - duration: *Optional*. Animation duration
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaAnimation.ThumbPayload? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                width: Swift.Int? = nil,
                height: Swift.Int? = nil,
                duration: Swift.Int? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.width = width
                self.height = height
                self.duration = duration
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case width
                case height
                case duration
            }
        }
        /// Represents an audio file to be treated as music to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaAudio`.
        public struct InputMediaAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb`.
            public struct ThumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `ThumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/thumb`.
            public var thumb: Components.Schemas.InputMediaAudio.ThumbPayload?
            /// *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Duration of the audio in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/duration`.
            public var duration: Swift.Int?
            /// *Optional*. Performer of the audio
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Title of the audio
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaAudio/title`.
            public var title: Swift.String?
            /// Creates a new `InputMediaAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - duration: *Optional*. Duration of the audio in seconds
            ///   - performer: *Optional*. Performer of the audio
            ///   - title: *Optional*. Title of the audio
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaAudio.ThumbPayload? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                duration: Swift.Int? = nil,
                performer: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.duration = duration
                self.performer = performer
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case duration
                case performer
                case title
            }
        }
        /// Represents a general file to be sent.
        ///
        /// - Remark: Generated from `#/components/schemas/InputMediaDocument`.
        public struct InputMediaDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/type`.
            public var _type: Swift.String
            /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/media`.
            public var media: Swift.String
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb`.
            public struct ThumbPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb/value1`.
                public var value1: Components.Schemas.InputFile?
                /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb/value2`.
                public var value2: Swift.String?
                /// Creates a new `ThumbPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.InputFile? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value2
                    ])
                    try self.value1?.encode(to: encoder)
                }
            }
            /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/thumb`.
            public var thumb: Components.Schemas.InputMediaDocument.ThumbPayload?
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
            ///
            /// - Remark: Generated from `#/components/schemas/InputMediaDocument/disable_content_type_detection`.
            public var disableContentTypeDetection: Swift.Bool?
            /// Creates a new `InputMediaDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - media: File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - thumb: *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - disableContentTypeDetection: *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
            public init(
                _type: Swift.String,
                media: Swift.String,
                thumb: Components.Schemas.InputMediaDocument.ThumbPayload? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                disableContentTypeDetection: Swift.Bool? = nil
            ) {
                self._type = _type
                self.media = media
                self.thumb = thumb
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.disableContentTypeDetection = disableContentTypeDetection
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case media
                case thumb
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case disableContentTypeDetection = "disable_content_type_detection"
            }
        }
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// - Remark: Generated from `#/components/schemas/InputFile`.
        public typealias InputFile = OpenAPIRuntime.OpenAPIValueContainer
        /// This object represents a sticker.
        ///
        /// - Remark: Generated from `#/components/schemas/Sticker`.
        public struct Sticker: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// Sticker width
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/width`.
            public var width: Swift.Int
            /// Sticker height
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/height`.
            public var height: Swift.Int
            /// *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/is_animated`.
            public var isAnimated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Sticker/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// *Optional*. Emoji associated with the sticker
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/emoji`.
            public var emoji: Swift.String?
            /// *Optional*. Name of the sticker set to which the sticker belongs
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/set_name`.
            public var setName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Sticker/mask_position`.
            public var maskPosition: Components.Schemas.MaskPosition?
            /// *Optional*. File size
            ///
            /// - Remark: Generated from `#/components/schemas/Sticker/file_size`.
            public var fileSize: Swift.Int?
            /// Creates a new `Sticker`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - width: Sticker width
            ///   - height: Sticker height
            ///   - isAnimated: *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
            ///   - thumb:
            ///   - emoji: *Optional*. Emoji associated with the sticker
            ///   - setName: *Optional*. Name of the sticker set to which the sticker belongs
            ///   - maskPosition:
            ///   - fileSize: *Optional*. File size
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                width: Swift.Int,
                height: Swift.Int,
                isAnimated: Swift.Bool,
                thumb: Components.Schemas.PhotoSize? = nil,
                emoji: Swift.String? = nil,
                setName: Swift.String? = nil,
                maskPosition: Components.Schemas.MaskPosition? = nil,
                fileSize: Swift.Int? = nil
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.width = width
                self.height = height
                self.isAnimated = isAnimated
                self.thumb = thumb
                self.emoji = emoji
                self.setName = setName
                self.maskPosition = maskPosition
                self.fileSize = fileSize
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case width
                case height
                case isAnimated = "is_animated"
                case thumb
                case emoji
                case setName = "set_name"
                case maskPosition = "mask_position"
                case fileSize = "file_size"
            }
        }
        /// This object represents a sticker set.
        ///
        /// - Remark: Generated from `#/components/schemas/StickerSet`.
        public struct StickerSet: Codable, Hashable, Sendable {
            /// Sticker set name
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/name`.
            public var name: Swift.String
            /// Sticker set title
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/title`.
            public var title: Swift.String
            /// *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/is_animated`.
            public var isAnimated: Swift.Bool
            /// *True*, if the sticker set contains masks
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/contains_masks`.
            public var containsMasks: Swift.Bool
            /// List of all set stickers
            ///
            /// - Remark: Generated from `#/components/schemas/StickerSet/stickers`.
            public var stickers: [Components.Schemas.Sticker]
            /// - Remark: Generated from `#/components/schemas/StickerSet/thumb`.
            public var thumb: Components.Schemas.PhotoSize?
            /// Creates a new `StickerSet`.
            ///
            /// - Parameters:
            ///   - name: Sticker set name
            ///   - title: Sticker set title
            ///   - isAnimated: *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
            ///   - containsMasks: *True*, if the sticker set contains masks
            ///   - stickers: List of all set stickers
            ///   - thumb:
            public init(
                name: Swift.String,
                title: Swift.String,
                isAnimated: Swift.Bool,
                containsMasks: Swift.Bool,
                stickers: [Components.Schemas.Sticker],
                thumb: Components.Schemas.PhotoSize? = nil
            ) {
                self.name = name
                self.title = title
                self.isAnimated = isAnimated
                self.containsMasks = containsMasks
                self.stickers = stickers
                self.thumb = thumb
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case title
                case isAnimated = "is_animated"
                case containsMasks = "contains_masks"
                case stickers
                case thumb
            }
        }
        /// This object describes the position on faces where a mask should be placed by default.
        ///
        /// - Remark: Generated from `#/components/schemas/MaskPosition`.
        public struct MaskPosition: Codable, Hashable, Sendable {
            /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/point`.
            @frozen public enum PointPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case forehead = "forehead"
                case eyes = "eyes"
                case mouth = "mouth"
                case chin = "chin"
            }
            /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/point`.
            public var point: Components.Schemas.MaskPosition.PointPayload
            /// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/x_shift`.
            public var xShift: Swift.Double
            /// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/y_shift`.
            public var yShift: Swift.Double
            /// Mask scaling coefficient. For example, 2.0 means double size.
            ///
            /// - Remark: Generated from `#/components/schemas/MaskPosition/scale`.
            public var scale: Swift.Double
            /// Creates a new `MaskPosition`.
            ///
            /// - Parameters:
            ///   - point: The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
            ///   - xShift: Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
            ///   - yShift: Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
            ///   - scale: Mask scaling coefficient. For example, 2.0 means double size.
            public init(
                point: Components.Schemas.MaskPosition.PointPayload,
                xShift: Swift.Double,
                yShift: Swift.Double,
                scale: Swift.Double
            ) {
                self.point = point
                self.xShift = xShift
                self.yShift = yShift
                self.scale = scale
            }
            public enum CodingKeys: String, CodingKey {
                case point
                case xShift = "x_shift"
                case yShift = "y_shift"
                case scale
            }
        }
        /// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQuery`.
        public struct InlineQuery: Codable, Hashable, Sendable {
            /// Unique identifier for this query
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQuery/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/InlineQuery/location`.
            public var location: Components.Schemas.Location?
            /// Text of the query (up to 256 characters)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/query`.
            public var query: Swift.String
            /// Offset of the results to be returned, can be controlled by the bot
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQuery/offset`.
            public var offset: Swift.String
            /// Creates a new `InlineQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for this query
            ///   - from:
            ///   - location:
            ///   - query: Text of the query (up to 256 characters)
            ///   - offset: Offset of the results to be returned, can be controlled by the bot
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                location: Components.Schemas.Location? = nil,
                query: Swift.String,
                offset: Swift.String
            ) {
                self.id = id
                self.from = from
                self.location = location
                self.query = query
                self.offset = offset
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case location
                case query
                case offset
            }
        }
        /// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResult`.
        public struct InlineQueryResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value1`.
            public var value1: Components.Schemas.InlineQueryResultCachedAudio?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value2`.
            public var value2: Components.Schemas.InlineQueryResultCachedDocument?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value3`.
            public var value3: Components.Schemas.InlineQueryResultCachedGif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value4`.
            public var value4: Components.Schemas.InlineQueryResultCachedMpeg4Gif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value5`.
            public var value5: Components.Schemas.InlineQueryResultCachedPhoto?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value6`.
            public var value6: Components.Schemas.InlineQueryResultCachedSticker?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value7`.
            public var value7: Components.Schemas.InlineQueryResultCachedVideo?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value8`.
            public var value8: Components.Schemas.InlineQueryResultCachedVoice?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value9`.
            public var value9: Components.Schemas.InlineQueryResultArticle?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value10`.
            public var value10: Components.Schemas.InlineQueryResultAudio?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value11`.
            public var value11: Components.Schemas.InlineQueryResultContact?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value12`.
            public var value12: Components.Schemas.InlineQueryResultGame?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value13`.
            public var value13: Components.Schemas.InlineQueryResultDocument?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value14`.
            public var value14: Components.Schemas.InlineQueryResultGif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value15`.
            public var value15: Components.Schemas.InlineQueryResultLocation?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value16`.
            public var value16: Components.Schemas.InlineQueryResultMpeg4Gif?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value17`.
            public var value17: Components.Schemas.InlineQueryResultPhoto?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value18`.
            public var value18: Components.Schemas.InlineQueryResultVenue?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value19`.
            public var value19: Components.Schemas.InlineQueryResultVideo?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResult/value20`.
            public var value20: Components.Schemas.InlineQueryResultVoice?
            /// Creates a new `InlineQueryResult`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            ///   - value16:
            ///   - value17:
            ///   - value18:
            ///   - value19:
            ///   - value20:
            public init(
                value1: Components.Schemas.InlineQueryResultCachedAudio? = nil,
                value2: Components.Schemas.InlineQueryResultCachedDocument? = nil,
                value3: Components.Schemas.InlineQueryResultCachedGif? = nil,
                value4: Components.Schemas.InlineQueryResultCachedMpeg4Gif? = nil,
                value5: Components.Schemas.InlineQueryResultCachedPhoto? = nil,
                value6: Components.Schemas.InlineQueryResultCachedSticker? = nil,
                value7: Components.Schemas.InlineQueryResultCachedVideo? = nil,
                value8: Components.Schemas.InlineQueryResultCachedVoice? = nil,
                value9: Components.Schemas.InlineQueryResultArticle? = nil,
                value10: Components.Schemas.InlineQueryResultAudio? = nil,
                value11: Components.Schemas.InlineQueryResultContact? = nil,
                value12: Components.Schemas.InlineQueryResultGame? = nil,
                value13: Components.Schemas.InlineQueryResultDocument? = nil,
                value14: Components.Schemas.InlineQueryResultGif? = nil,
                value15: Components.Schemas.InlineQueryResultLocation? = nil,
                value16: Components.Schemas.InlineQueryResultMpeg4Gif? = nil,
                value17: Components.Schemas.InlineQueryResultPhoto? = nil,
                value18: Components.Schemas.InlineQueryResultVenue? = nil,
                value19: Components.Schemas.InlineQueryResultVideo? = nil,
                value20: Components.Schemas.InlineQueryResultVoice? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
                self.value16 = value16
                self.value17 = value17
                self.value18 = value18
                self.value19 = value19
                self.value20 = value20
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value16 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value17 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value18 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value19 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value20 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9,
                        self.value10,
                        self.value11,
                        self.value12,
                        self.value13,
                        self.value14,
                        self.value15,
                        self.value16,
                        self.value17,
                        self.value18,
                        self.value19,
                        self.value20
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
                try self.value10?.encode(to: encoder)
                try self.value11?.encode(to: encoder)
                try self.value12?.encode(to: encoder)
                try self.value13?.encode(to: encoder)
                try self.value14?.encode(to: encoder)
                try self.value15?.encode(to: encoder)
                try self.value16?.encode(to: encoder)
                try self.value17?.encode(to: encoder)
                try self.value18?.encode(to: encoder)
                try self.value19?.encode(to: encoder)
                try self.value20?.encode(to: encoder)
            }
        }
        /// Represents a link to an article or web page.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle`.
        public struct InlineQueryResultArticle: Codable, Hashable, Sendable {
            /// Type of the result, must be *article*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/id`.
            public var id: Swift.String
            /// Title of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// *Optional*. URL of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/url`.
            public var url: Swift.String?
            /// *Optional*. Pass *True*, if you don't want the URL to be shown in the message
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/hide_url`.
            public var hideUrl: Swift.Bool?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/description`.
            public var description: Swift.String?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_url`.
            public var thumbUrl: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_width`.
            public var thumbWidth: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultArticle/thumb_height`.
            public var thumbHeight: Swift.Int?
            /// Creates a new `InlineQueryResultArticle`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *article*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - title: Title of the result
            ///   - inputMessageContent:
            ///   - replyMarkup:
            ///   - url: *Optional*. URL of the result
            ///   - hideUrl: *Optional*. Pass *True*, if you don't want the URL to be shown in the message
            ///   - description: *Optional*. Short description of the result
            ///   - thumbUrl: *Optional*. Url of the thumbnail for the result
            ///   - thumbWidth: *Optional*. Thumbnail width
            ///   - thumbHeight: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                inputMessageContent: Components.Schemas.InputMessageContent,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                url: Swift.String? = nil,
                hideUrl: Swift.Bool? = nil,
                description: Swift.String? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.inputMessageContent = inputMessageContent
                self.replyMarkup = replyMarkup
                self.url = url
                self.hideUrl = hideUrl
                self.description = description
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case inputMessageContent = "input_message_content"
                case replyMarkup = "reply_markup"
                case url
                case hideUrl = "hide_url"
                case description
                case thumbUrl = "thumb_url"
                case thumbWidth = "thumb_width"
                case thumbHeight = "thumb_height"
            }
        }
        /// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto`.
        public struct InlineQueryResultPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/id`.
            public var id: Swift.String
            /// A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_url`.
            public var photoUrl: Swift.String
            /// URL of the thumbnail for the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/thumb_url`.
            public var thumbUrl: Swift.String
            /// *Optional*. Width of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_width`.
            public var photoWidth: Swift.Int?
            /// *Optional*. Height of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/photo_height`.
            public var photoHeight: Swift.Int?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/title`.
            public var title: Swift.String?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultPhoto/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - photoUrl: A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
            ///   - thumbUrl: URL of the thumbnail for the photo
            ///   - photoWidth: *Optional*. Width of the photo
            ///   - photoHeight: *Optional*. Height of the photo
            ///   - title: *Optional*. Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                photoUrl: Swift.String,
                thumbUrl: Swift.String,
                photoWidth: Swift.Int? = nil,
                photoHeight: Swift.Int? = nil,
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.photoUrl = photoUrl
                self.thumbUrl = thumbUrl
                self.photoWidth = photoWidth
                self.photoHeight = photoHeight
                self.title = title
                self.description = description
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case photoUrl = "photo_url"
                case thumbUrl = "thumb_url"
                case photoWidth = "photo_width"
                case photoHeight = "photo_height"
                case title
                case description
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif`.
        public struct InlineQueryResultGif: Codable, Hashable, Sendable {
            /// Type of the result, must be *gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/id`.
            public var id: Swift.String
            /// A valid URL for the GIF file. File size must not exceed 1MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_url`.
            public var gifUrl: Swift.String
            /// *Optional*. Width of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_width`.
            public var gifWidth: Swift.Int?
            /// *Optional*. Height of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_height`.
            public var gifHeight: Swift.Int?
            /// *Optional*. Duration of the GIF
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/gif_duration`.
            public var gifDuration: Swift.Int?
            /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_url`.
            public var thumbUrl: Swift.String
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_mime_type`.
            @frozen public enum ThumbMimeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageJpeg = "image/jpeg"
                case imageGif = "image/gif"
                case videoMp4 = "video/mp4"
            }
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/thumb_mime_type`.
            public var thumbMimeType: Components.Schemas.InlineQueryResultGif.ThumbMimeTypePayload?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGif/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultGif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - gifUrl: A valid URL for the GIF file. File size must not exceed 1MB
            ///   - gifWidth: *Optional*. Width of the GIF
            ///   - gifHeight: *Optional*. Height of the GIF
            ///   - gifDuration: *Optional*. Duration of the GIF
            ///   - thumbUrl: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///   - thumbMimeType: *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                gifUrl: Swift.String,
                gifWidth: Swift.Int? = nil,
                gifHeight: Swift.Int? = nil,
                gifDuration: Swift.Int? = nil,
                thumbUrl: Swift.String,
                thumbMimeType: Components.Schemas.InlineQueryResultGif.ThumbMimeTypePayload? = nil,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.gifUrl = gifUrl
                self.gifWidth = gifWidth
                self.gifHeight = gifHeight
                self.gifDuration = gifDuration
                self.thumbUrl = thumbUrl
                self.thumbMimeType = thumbMimeType
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case gifUrl = "gif_url"
                case gifWidth = "gif_width"
                case gifHeight = "gif_height"
                case gifDuration = "gif_duration"
                case thumbUrl = "thumb_url"
                case thumbMimeType = "thumb_mime_type"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif`.
        public struct InlineQueryResultMpeg4Gif: Codable, Hashable, Sendable {
            /// Type of the result, must be *mpeg4\_gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/id`.
            public var id: Swift.String
            /// A valid URL for the MP4 file. File size must not exceed 1MB
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_url`.
            public var mpeg4Url: Swift.String
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_width`.
            public var mpeg4Width: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_height`.
            public var mpeg4Height: Swift.Int?
            /// *Optional*. Video duration
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/mpeg4_duration`.
            public var mpeg4Duration: Swift.Int?
            /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_url`.
            public var thumbUrl: Swift.String
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_mime_type`.
            @frozen public enum ThumbMimeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageJpeg = "image/jpeg"
                case imageGif = "image/gif"
                case videoMp4 = "video/mp4"
            }
            /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/thumb_mime_type`.
            public var thumbMimeType: Components.Schemas.InlineQueryResultMpeg4Gif.ThumbMimeTypePayload?
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultMpeg4Gif/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultMpeg4Gif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *mpeg4\_gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - mpeg4Url: A valid URL for the MP4 file. File size must not exceed 1MB
            ///   - mpeg4Width: *Optional*. Video width
            ///   - mpeg4Height: *Optional*. Video height
            ///   - mpeg4Duration: *Optional*. Video duration
            ///   - thumbUrl: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            ///   - thumbMimeType: *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                mpeg4Url: Swift.String,
                mpeg4Width: Swift.Int? = nil,
                mpeg4Height: Swift.Int? = nil,
                mpeg4Duration: Swift.Int? = nil,
                thumbUrl: Swift.String,
                thumbMimeType: Components.Schemas.InlineQueryResultMpeg4Gif.ThumbMimeTypePayload? = nil,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.mpeg4Url = mpeg4Url
                self.mpeg4Width = mpeg4Width
                self.mpeg4Height = mpeg4Height
                self.mpeg4Duration = mpeg4Duration
                self.thumbUrl = thumbUrl
                self.thumbMimeType = thumbMimeType
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case mpeg4Url = "mpeg4_url"
                case mpeg4Width = "mpeg4_width"
                case mpeg4Height = "mpeg4_height"
                case mpeg4Duration = "mpeg4_duration"
                case thumbUrl = "thumb_url"
                case thumbMimeType = "thumb_mime_type"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
        ///
        /// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo`.
        public struct InlineQueryResultVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/id`.
            public var id: Swift.String
            /// A valid URL for the embedded video player or video file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_url`.
            public var videoUrl: Swift.String
            /// Mime type of the content of video url, “text/html” or “video/mp4”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/mime_type`.
            public var mimeType: Swift.String
            /// URL of the thumbnail (jpeg only) for the video
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/thumb_url`.
            public var thumbUrl: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/title`.
            public var title: Swift.String
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Video width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_width`.
            public var videoWidth: Swift.Int?
            /// *Optional*. Video height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_height`.
            public var videoHeight: Swift.Int?
            /// *Optional*. Video duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/video_duration`.
            public var videoDuration: Swift.Int?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVideo/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - videoUrl: A valid URL for the embedded video player or video file
            ///   - mimeType: Mime type of the content of video url, “text/html” or “video/mp4”
            ///   - thumbUrl: URL of the thumbnail (jpeg only) for the video
            ///   - title: Title for the result
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - videoWidth: *Optional*. Video width
            ///   - videoHeight: *Optional*. Video height
            ///   - videoDuration: *Optional*. Video duration in seconds
            ///   - description: *Optional*. Short description of the result
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                videoUrl: Swift.String,
                mimeType: Swift.String,
                thumbUrl: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                videoWidth: Swift.Int? = nil,
                videoHeight: Swift.Int? = nil,
                videoDuration: Swift.Int? = nil,
                description: Swift.String? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.videoUrl = videoUrl
                self.mimeType = mimeType
                self.thumbUrl = thumbUrl
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.videoWidth = videoWidth
                self.videoHeight = videoHeight
                self.videoDuration = videoDuration
                self.description = description
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case videoUrl = "video_url"
                case mimeType = "mime_type"
                case thumbUrl = "thumb_url"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case videoWidth = "video_width"
                case videoHeight = "video_height"
                case videoDuration = "video_duration"
                case description
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio`.
        public struct InlineQueryResultAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/id`.
            public var id: Swift.String
            /// A valid URL for the audio file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/audio_url`.
            public var audioUrl: Swift.String
            /// Title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Performer
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/performer`.
            public var performer: Swift.String?
            /// *Optional*. Audio duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/audio_duration`.
            public var audioDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultAudio/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - audioUrl: A valid URL for the audio file
            ///   - title: Title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - performer: *Optional*. Performer
            ///   - audioDuration: *Optional*. Audio duration in seconds
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                audioUrl: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                performer: Swift.String? = nil,
                audioDuration: Swift.Int? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.audioUrl = audioUrl
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.performer = performer
                self.audioDuration = audioDuration
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case audioUrl = "audio_url"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case performer
                case audioDuration = "audio_duration"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice`.
        public struct InlineQueryResultVoice: Codable, Hashable, Sendable {
            /// Type of the result, must be *voice*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/id`.
            public var id: Swift.String
            /// A valid URL for the voice recording
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/voice_url`.
            public var voiceUrl: Swift.String
            /// Recording title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Recording duration in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/voice_duration`.
            public var voiceDuration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVoice/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultVoice`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *voice*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - voiceUrl: A valid URL for the voice recording
            ///   - title: Recording title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - voiceDuration: *Optional*. Recording duration in seconds
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                voiceUrl: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                voiceDuration: Swift.Int? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.voiceUrl = voiceUrl
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.voiceDuration = voiceDuration
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case voiceUrl = "voice_url"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case voiceDuration = "voice_duration"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument`.
        public struct InlineQueryResultDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/id`.
            public var id: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/title`.
            public var title: Swift.String
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// A valid URL for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/document_url`.
            public var documentUrl: Swift.String
            /// Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/mime_type`.
            @frozen public enum MimeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case applicationPdf = "application/pdf"
                case applicationZip = "application/zip"
            }
            /// Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/mime_type`.
            public var mimeType: Components.Schemas.InlineQueryResultDocument.MimeTypePayload
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// *Optional*. URL of the thumbnail (jpeg only) for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_url`.
            public var thumbUrl: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_width`.
            public var thumbWidth: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultDocument/thumb_height`.
            public var thumbHeight: Swift.Int?
            /// Creates a new `InlineQueryResultDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - title: Title for the result
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - documentUrl: A valid URL for the file
            ///   - mimeType: Mime type of the content of the file, either “application/pdf” or “application/zip”
            ///   - description: *Optional*. Short description of the result
            ///   - replyMarkup:
            ///   - inputMessageContent:
            ///   - thumbUrl: *Optional*. URL of the thumbnail (jpeg only) for the file
            ///   - thumbWidth: *Optional*. Thumbnail width
            ///   - thumbHeight: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                documentUrl: Swift.String,
                mimeType: Components.Schemas.InlineQueryResultDocument.MimeTypePayload,
                description: Swift.String? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.documentUrl = documentUrl
                self.mimeType = mimeType
                self.description = description
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case documentUrl = "document_url"
                case mimeType = "mime_type"
                case description
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
                case thumbUrl = "thumb_url"
                case thumbWidth = "thumb_width"
                case thumbHeight = "thumb_height"
            }
        }
        /// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation`.
        public struct InlineQueryResultLocation: Codable, Hashable, Sendable {
            /// Type of the result, must be *location*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/id`.
            public var id: Swift.String
            /// Location latitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/latitude`.
            public var latitude: Swift.Double
            /// Location longitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/longitude`.
            public var longitude: Swift.Double
            /// Location title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/title`.
            public var title: Swift.String
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/horizontal_accuracy`.
            public var horizontalAccuracy: Swift.Double?
            /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/live_period`.
            public var livePeriod: Swift.Int?
            /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/heading`.
            public var heading: Swift.Int?
            /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/proximity_alert_radius`.
            public var proximityAlertRadius: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_url`.
            public var thumbUrl: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_width`.
            public var thumbWidth: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultLocation/thumb_height`.
            public var thumbHeight: Swift.Int?
            /// Creates a new `InlineQueryResultLocation`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *location*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - latitude: Location latitude in degrees
            ///   - longitude: Location longitude in degrees
            ///   - title: Location title
            ///   - horizontalAccuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - livePeriod: *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///   - heading: *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///   - proximityAlertRadius: *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///   - replyMarkup:
            ///   - inputMessageContent:
            ///   - thumbUrl: *Optional*. Url of the thumbnail for the result
            ///   - thumbWidth: *Optional*. Thumbnail width
            ///   - thumbHeight: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                horizontalAccuracy: Swift.Double? = nil,
                livePeriod: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximityAlertRadius: Swift.Int? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.horizontalAccuracy = horizontalAccuracy
                self.livePeriod = livePeriod
                self.heading = heading
                self.proximityAlertRadius = proximityAlertRadius
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case latitude
                case longitude
                case title
                case horizontalAccuracy = "horizontal_accuracy"
                case livePeriod = "live_period"
                case heading
                case proximityAlertRadius = "proximity_alert_radius"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
                case thumbUrl = "thumb_url"
                case thumbWidth = "thumb_width"
                case thumbHeight = "thumb_height"
            }
        }
        /// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue`.
        public struct InlineQueryResultVenue: Codable, Hashable, Sendable {
            /// Type of the result, must be *venue*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/id`.
            public var id: Swift.String
            /// Latitude of the venue location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the venue location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/longitude`.
            public var longitude: Swift.Double
            /// Title of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue if known
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/foursquare_id`.
            public var foursquareId: Swift.String?
            /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/foursquare_type`.
            public var foursquareType: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/google_place_id`.
            public var googlePlaceId: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/google_place_type`.
            public var googlePlaceType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_url`.
            public var thumbUrl: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_width`.
            public var thumbWidth: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultVenue/thumb_height`.
            public var thumbHeight: Swift.Int?
            /// Creates a new `InlineQueryResultVenue`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *venue*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - latitude: Latitude of the venue location in degrees
            ///   - longitude: Longitude of the venue location in degrees
            ///   - title: Title of the venue
            ///   - address: Address of the venue
            ///   - foursquareId: *Optional*. Foursquare identifier of the venue if known
            ///   - foursquareType: *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - googlePlaceId: *Optional*. Google Places identifier of the venue
            ///   - googlePlaceType: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///   - replyMarkup:
            ///   - inputMessageContent:
            ///   - thumbUrl: *Optional*. Url of the thumbnail for the result
            ///   - thumbWidth: *Optional*. Thumbnail width
            ///   - thumbHeight: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                address: Swift.String,
                foursquareId: Swift.String? = nil,
                foursquareType: Swift.String? = nil,
                googlePlaceId: Swift.String? = nil,
                googlePlaceType: Swift.String? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.address = address
                self.foursquareId = foursquareId
                self.foursquareType = foursquareType
                self.googlePlaceId = googlePlaceId
                self.googlePlaceType = googlePlaceType
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case latitude
                case longitude
                case title
                case address
                case foursquareId = "foursquare_id"
                case foursquareType = "foursquare_type"
                case googlePlaceId = "google_place_id"
                case googlePlaceType = "google_place_type"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
                case thumbUrl = "thumb_url"
                case thumbWidth = "thumb_width"
                case thumbHeight = "thumb_height"
            }
        }
        /// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact`.
        public struct InlineQueryResultContact: Codable, Hashable, Sendable {
            /// Type of the result, must be *contact*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 Bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/id`.
            public var id: Swift.String
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/phone_number`.
            public var phoneNumber: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/first_name`.
            public var firstName: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/last_name`.
            public var lastName: Swift.String?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/vcard`.
            public var vcard: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// *Optional*. Url of the thumbnail for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_url`.
            public var thumbUrl: Swift.String?
            /// *Optional*. Thumbnail width
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_width`.
            public var thumbWidth: Swift.Int?
            /// *Optional*. Thumbnail height
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultContact/thumb_height`.
            public var thumbHeight: Swift.Int?
            /// Creates a new `InlineQueryResultContact`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *contact*
            ///   - id: Unique identifier for this result, 1-64 Bytes
            ///   - phoneNumber: Contact's phone number
            ///   - firstName: Contact's first name
            ///   - lastName: *Optional*. Contact's last name
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///   - replyMarkup:
            ///   - inputMessageContent:
            ///   - thumbUrl: *Optional*. Url of the thumbnail for the result
            ///   - thumbWidth: *Optional*. Thumbnail width
            ///   - thumbHeight: *Optional*. Thumbnail height
            public init(
                _type: Swift.String,
                id: Swift.String,
                phoneNumber: Swift.String,
                firstName: Swift.String,
                lastName: Swift.String? = nil,
                vcard: Swift.String? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil,
                thumbUrl: Swift.String? = nil,
                thumbWidth: Swift.Int? = nil,
                thumbHeight: Swift.Int? = nil
            ) {
                self._type = _type
                self.id = id
                self.phoneNumber = phoneNumber
                self.firstName = firstName
                self.lastName = lastName
                self.vcard = vcard
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
                self.thumbUrl = thumbUrl
                self.thumbWidth = thumbWidth
                self.thumbHeight = thumbHeight
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case phoneNumber = "phone_number"
                case firstName = "first_name"
                case lastName = "last_name"
                case vcard
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
                case thumbUrl = "thumb_url"
                case thumbWidth = "thumb_width"
                case thumbHeight = "thumb_height"
            }
        }
        /// Represents a [Game](https://core.telegram.org/bots/api/#games).
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame`.
        public struct InlineQueryResultGame: Codable, Hashable, Sendable {
            /// Type of the result, must be *game*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/id`.
            public var id: Swift.String
            /// Short name of the game
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/game_short_name`.
            public var gameShortName: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultGame/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// Creates a new `InlineQueryResultGame`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *game*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - gameShortName: Short name of the game
            ///   - replyMarkup:
            public init(
                _type: Swift.String,
                id: Swift.String,
                gameShortName: Swift.String,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
            ) {
                self._type = _type
                self.id = id
                self.gameShortName = gameShortName
                self.replyMarkup = replyMarkup
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case gameShortName = "game_short_name"
                case replyMarkup = "reply_markup"
            }
        }
        /// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto`.
        public struct InlineQueryResultCachedPhoto: Codable, Hashable, Sendable {
            /// Type of the result, must be *photo*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/id`.
            public var id: Swift.String
            /// A valid file identifier of the photo
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/photo_file_id`.
            public var photoFileId: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/title`.
            public var title: Swift.String?
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedPhoto/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedPhoto`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *photo*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - photoFileId: A valid file identifier of the photo
            ///   - title: *Optional*. Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                photoFileId: Swift.String,
                title: Swift.String? = nil,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.photoFileId = photoFileId
                self.title = title
                self.description = description
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case photoFileId = "photo_file_id"
                case title
                case description
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif`.
        public struct InlineQueryResultCachedGif: Codable, Hashable, Sendable {
            /// Type of the result, must be *gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/id`.
            public var id: Swift.String
            /// A valid file identifier for the GIF file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/gif_file_id`.
            public var gifFileId: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedGif/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedGif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - gifFileId: A valid file identifier for the GIF file
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                gifFileId: Swift.String,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.gifFileId = gifFileId
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case gifFileId = "gif_file_id"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif`.
        public struct InlineQueryResultCachedMpeg4Gif: Codable, Hashable, Sendable {
            /// Type of the result, must be *mpeg4\_gif*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/id`.
            public var id: Swift.String
            /// A valid file identifier for the MP4 file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/mpeg4_file_id`.
            public var mpeg4FileId: Swift.String
            /// *Optional*. Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/title`.
            public var title: Swift.String?
            /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedMpeg4Gif/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedMpeg4Gif`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *mpeg4\_gif*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - mpeg4FileId: A valid file identifier for the MP4 file
            ///   - title: *Optional*. Title for the result
            ///   - caption: *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                mpeg4FileId: Swift.String,
                title: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.mpeg4FileId = mpeg4FileId
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case mpeg4FileId = "mpeg4_file_id"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker`.
        public struct InlineQueryResultCachedSticker: Codable, Hashable, Sendable {
            /// Type of the result, must be *sticker*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/id`.
            public var id: Swift.String
            /// A valid file identifier of the sticker
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/sticker_file_id`.
            public var stickerFileId: Swift.String
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedSticker/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedSticker`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *sticker*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - stickerFileId: A valid file identifier of the sticker
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                stickerFileId: Swift.String,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.stickerFileId = stickerFileId
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case stickerFileId = "sticker_file_id"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument`.
        public struct InlineQueryResultCachedDocument: Codable, Hashable, Sendable {
            /// Type of the result, must be *document*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/id`.
            public var id: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/title`.
            public var title: Swift.String
            /// A valid file identifier for the file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/document_file_id`.
            public var documentFileId: Swift.String
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedDocument/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedDocument`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *document*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - title: Title for the result
            ///   - documentFileId: A valid file identifier for the file
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                title: Swift.String,
                documentFileId: Swift.String,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.title = title
                self.documentFileId = documentFileId
                self.description = description
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case title
                case documentFileId = "document_file_id"
                case description
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo`.
        public struct InlineQueryResultCachedVideo: Codable, Hashable, Sendable {
            /// Type of the result, must be *video*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/id`.
            public var id: Swift.String
            /// A valid file identifier for the video file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/video_file_id`.
            public var videoFileId: Swift.String
            /// Title for the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/title`.
            public var title: Swift.String
            /// *Optional*. Short description of the result
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/description`.
            public var description: Swift.String?
            /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVideo/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedVideo`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *video*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - videoFileId: A valid file identifier for the video file
            ///   - title: Title for the result
            ///   - description: *Optional*. Short description of the result
            ///   - caption: *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                videoFileId: Swift.String,
                title: Swift.String,
                description: Swift.String? = nil,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.videoFileId = videoFileId
                self.title = title
                self.description = description
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case videoFileId = "video_file_id"
                case title
                case description
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice`.
        public struct InlineQueryResultCachedVoice: Codable, Hashable, Sendable {
            /// Type of the result, must be *voice*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/id`.
            public var id: Swift.String
            /// A valid file identifier for the voice message
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/voice_file_id`.
            public var voiceFileId: Swift.String
            /// Voice message title
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/title`.
            public var title: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedVoice/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedVoice`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *voice*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - voiceFileId: A valid file identifier for the voice message
            ///   - title: Voice message title
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                voiceFileId: Swift.String,
                title: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.voiceFileId = voiceFileId
                self.title = title
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case voiceFileId = "voice_file_id"
                case title
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio`.
        public struct InlineQueryResultCachedAudio: Codable, Hashable, Sendable {
            /// Type of the result, must be *audio*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/type`.
            public var _type: Swift.String
            /// Unique identifier for this result, 1-64 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/id`.
            public var id: Swift.String
            /// A valid file identifier for the audio file
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/audio_file_id`.
            public var audioFileId: Swift.String
            /// *Optional*. Caption, 0-1024 characters after entities parsing
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/caption`.
            public var caption: Swift.String?
            /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/caption_entities`.
            public var captionEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/reply_markup`.
            public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
            /// - Remark: Generated from `#/components/schemas/InlineQueryResultCachedAudio/input_message_content`.
            public var inputMessageContent: Components.Schemas.InputMessageContent?
            /// Creates a new `InlineQueryResultCachedAudio`.
            ///
            /// - Parameters:
            ///   - _type: Type of the result, must be *audio*
            ///   - id: Unique identifier for this result, 1-64 bytes
            ///   - audioFileId: A valid file identifier for the audio file
            ///   - caption: *Optional*. Caption, 0-1024 characters after entities parsing
            ///   - parseMode: *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - captionEntities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            ///   - replyMarkup:
            ///   - inputMessageContent:
            public init(
                _type: Swift.String,
                id: Swift.String,
                audioFileId: Swift.String,
                caption: Swift.String? = nil,
                parseMode: Swift.String? = nil,
                captionEntities: [Components.Schemas.MessageEntity]? = nil,
                replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil,
                inputMessageContent: Components.Schemas.InputMessageContent? = nil
            ) {
                self._type = _type
                self.id = id
                self.audioFileId = audioFileId
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
                self.inputMessageContent = inputMessageContent
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case audioFileId = "audio_file_id"
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
                case inputMessageContent = "input_message_content"
            }
        }
        /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
        ///
        /// - Remark: Generated from `#/components/schemas/InputMessageContent`.
        public struct InputMessageContent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value1`.
            public var value1: Components.Schemas.InputTextMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value2`.
            public var value2: Components.Schemas.InputLocationMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value3`.
            public var value3: Components.Schemas.InputVenueMessageContent?
            /// - Remark: Generated from `#/components/schemas/InputMessageContent/value4`.
            public var value4: Components.Schemas.InputContactMessageContent?
            /// Creates a new `InputMessageContent`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            public init(
                value1: Components.Schemas.InputTextMessageContent? = nil,
                value2: Components.Schemas.InputLocationMessageContent? = nil,
                value3: Components.Schemas.InputVenueMessageContent? = nil,
                value4: Components.Schemas.InputContactMessageContent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputTextMessageContent`.
        public struct InputTextMessageContent: Codable, Hashable, Sendable {
            /// Text of the message to be sent, 1-4096 characters
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/message_text`.
            public var messageText: Swift.String
            /// *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/parse_mode`.
            public var parseMode: Swift.String?
            /// *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/entities`.
            public var entities: [Components.Schemas.MessageEntity]?
            /// *Optional*. Disables link previews for links in the sent message
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextMessageContent/disable_web_page_preview`.
            public var disableWebPagePreview: Swift.Bool?
            /// Creates a new `InputTextMessageContent`.
            ///
            /// - Parameters:
            ///   - messageText: Text of the message to be sent, 1-4096 characters
            ///   - parseMode: *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            ///   - entities: *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            ///   - disableWebPagePreview: *Optional*. Disables link previews for links in the sent message
            public init(
                messageText: Swift.String,
                parseMode: Swift.String? = nil,
                entities: [Components.Schemas.MessageEntity]? = nil,
                disableWebPagePreview: Swift.Bool? = nil
            ) {
                self.messageText = messageText
                self.parseMode = parseMode
                self.entities = entities
                self.disableWebPagePreview = disableWebPagePreview
            }
            public enum CodingKeys: String, CodingKey {
                case messageText = "message_text"
                case parseMode = "parse_mode"
                case entities
                case disableWebPagePreview = "disable_web_page_preview"
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent`.
        public struct InputLocationMessageContent: Codable, Hashable, Sendable {
            /// Latitude of the location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the location in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/longitude`.
            public var longitude: Swift.Double
            /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/horizontal_accuracy`.
            public var horizontalAccuracy: Swift.Double?
            /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/live_period`.
            public var livePeriod: Swift.Int?
            /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/heading`.
            public var heading: Swift.Int?
            /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            ///
            /// - Remark: Generated from `#/components/schemas/InputLocationMessageContent/proximity_alert_radius`.
            public var proximityAlertRadius: Swift.Int?
            /// Creates a new `InputLocationMessageContent`.
            ///
            /// - Parameters:
            ///   - latitude: Latitude of the location in degrees
            ///   - longitude: Longitude of the location in degrees
            ///   - horizontalAccuracy: *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
            ///   - livePeriod: *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
            ///   - heading: *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            ///   - proximityAlertRadius: *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            public init(
                latitude: Swift.Double,
                longitude: Swift.Double,
                horizontalAccuracy: Swift.Double? = nil,
                livePeriod: Swift.Int? = nil,
                heading: Swift.Int? = nil,
                proximityAlertRadius: Swift.Int? = nil
            ) {
                self.latitude = latitude
                self.longitude = longitude
                self.horizontalAccuracy = horizontalAccuracy
                self.livePeriod = livePeriod
                self.heading = heading
                self.proximityAlertRadius = proximityAlertRadius
            }
            public enum CodingKeys: String, CodingKey {
                case latitude
                case longitude
                case horizontalAccuracy = "horizontal_accuracy"
                case livePeriod = "live_period"
                case heading
                case proximityAlertRadius = "proximity_alert_radius"
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent`.
        public struct InputVenueMessageContent: Codable, Hashable, Sendable {
            /// Latitude of the venue in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/latitude`.
            public var latitude: Swift.Double
            /// Longitude of the venue in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/longitude`.
            public var longitude: Swift.Double
            /// Name of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/title`.
            public var title: Swift.String
            /// Address of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/address`.
            public var address: Swift.String
            /// *Optional*. Foursquare identifier of the venue, if known
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/foursquare_id`.
            public var foursquareId: Swift.String?
            /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/foursquare_type`.
            public var foursquareType: Swift.String?
            /// *Optional*. Google Places identifier of the venue
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/google_place_id`.
            public var googlePlaceId: Swift.String?
            /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            ///
            /// - Remark: Generated from `#/components/schemas/InputVenueMessageContent/google_place_type`.
            public var googlePlaceType: Swift.String?
            /// Creates a new `InputVenueMessageContent`.
            ///
            /// - Parameters:
            ///   - latitude: Latitude of the venue in degrees
            ///   - longitude: Longitude of the venue in degrees
            ///   - title: Name of the venue
            ///   - address: Address of the venue
            ///   - foursquareId: *Optional*. Foursquare identifier of the venue, if known
            ///   - foursquareType: *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            ///   - googlePlaceId: *Optional*. Google Places identifier of the venue
            ///   - googlePlaceType: *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            public init(
                latitude: Swift.Double,
                longitude: Swift.Double,
                title: Swift.String,
                address: Swift.String,
                foursquareId: Swift.String? = nil,
                foursquareType: Swift.String? = nil,
                googlePlaceId: Swift.String? = nil,
                googlePlaceType: Swift.String? = nil
            ) {
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.address = address
                self.foursquareId = foursquareId
                self.foursquareType = foursquareType
                self.googlePlaceId = googlePlaceId
                self.googlePlaceType = googlePlaceType
            }
            public enum CodingKeys: String, CodingKey {
                case latitude
                case longitude
                case title
                case address
                case foursquareId = "foursquare_id"
                case foursquareType = "foursquare_type"
                case googlePlaceId = "google_place_id"
                case googlePlaceType = "google_place_type"
            }
        }
        /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
        ///
        /// - Remark: Generated from `#/components/schemas/InputContactMessageContent`.
        public struct InputContactMessageContent: Codable, Hashable, Sendable {
            /// Contact's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/phone_number`.
            public var phoneNumber: Swift.String
            /// Contact's first name
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/first_name`.
            public var firstName: Swift.String
            /// *Optional*. Contact's last name
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/last_name`.
            public var lastName: Swift.String?
            /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            ///
            /// - Remark: Generated from `#/components/schemas/InputContactMessageContent/vcard`.
            public var vcard: Swift.String?
            /// Creates a new `InputContactMessageContent`.
            ///
            /// - Parameters:
            ///   - phoneNumber: Contact's phone number
            ///   - firstName: Contact's first name
            ///   - lastName: *Optional*. Contact's last name
            ///   - vcard: *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            public init(
                phoneNumber: Swift.String,
                firstName: Swift.String,
                lastName: Swift.String? = nil,
                vcard: Swift.String? = nil
            ) {
                self.phoneNumber = phoneNumber
                self.firstName = firstName
                self.lastName = lastName
                self.vcard = vcard
            }
            public enum CodingKeys: String, CodingKey {
                case phoneNumber = "phone_number"
                case firstName = "first_name"
                case lastName = "last_name"
                case vcard
            }
        }
        /// Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
        ///
        /// - Remark: Generated from `#/components/schemas/ChosenInlineResult`.
        public struct ChosenInlineResult: Codable, Hashable, Sendable {
            /// The unique identifier for the result that was chosen
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/result_id`.
            public var resultId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/from`.
            public var from: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/location`.
            public var location: Components.Schemas.Location?
            /// *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/inline_message_id`.
            public var inlineMessageId: Swift.String?
            /// The query that was used to obtain the result
            ///
            /// - Remark: Generated from `#/components/schemas/ChosenInlineResult/query`.
            public var query: Swift.String
            /// Creates a new `ChosenInlineResult`.
            ///
            /// - Parameters:
            ///   - resultId: The unique identifier for the result that was chosen
            ///   - from:
            ///   - location:
            ///   - inlineMessageId: *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
            ///   - query: The query that was used to obtain the result
            public init(
                resultId: Swift.String,
                from: Components.Schemas.User,
                location: Components.Schemas.Location? = nil,
                inlineMessageId: Swift.String? = nil,
                query: Swift.String
            ) {
                self.resultId = resultId
                self.from = from
                self.location = location
                self.inlineMessageId = inlineMessageId
                self.query = query
            }
            public enum CodingKeys: String, CodingKey {
                case resultId = "result_id"
                case from
                case location
                case inlineMessageId = "inline_message_id"
                case query
            }
        }
        /// This object represents a portion of the price for goods or services.
        ///
        /// - Remark: Generated from `#/components/schemas/LabeledPrice`.
        public struct LabeledPrice: Codable, Hashable, Sendable {
            /// Portion label
            ///
            /// - Remark: Generated from `#/components/schemas/LabeledPrice/label`.
            public var label: Swift.String
            /// Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/LabeledPrice/amount`.
            public var amount: Swift.Int
            /// Creates a new `LabeledPrice`.
            ///
            /// - Parameters:
            ///   - label: Portion label
            ///   - amount: Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            public init(
                label: Swift.String,
                amount: Swift.Int
            ) {
                self.label = label
                self.amount = amount
            }
            public enum CodingKeys: String, CodingKey {
                case label
                case amount
            }
        }
        /// This object contains basic information about an invoice.
        ///
        /// - Remark: Generated from `#/components/schemas/Invoice`.
        public struct Invoice: Codable, Hashable, Sendable {
            /// Product name
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/title`.
            public var title: Swift.String
            /// Product description
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/description`.
            public var description: Swift.String
            /// Unique bot deep-linking parameter that can be used to generate this invoice
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/start_parameter`.
            public var startParameter: Swift.String
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/Invoice/total_amount`.
            public var totalAmount: Swift.Int
            /// Creates a new `Invoice`.
            ///
            /// - Parameters:
            ///   - title: Product name
            ///   - description: Product description
            ///   - startParameter: Unique bot deep-linking parameter that can be used to generate this invoice
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - totalAmount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            public init(
                title: Swift.String,
                description: Swift.String,
                startParameter: Swift.String,
                currency: Swift.String,
                totalAmount: Swift.Int
            ) {
                self.title = title
                self.description = description
                self.startParameter = startParameter
                self.currency = currency
                self.totalAmount = totalAmount
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case startParameter = "start_parameter"
                case currency
                case totalAmount = "total_amount"
            }
        }
        /// This object represents a shipping address.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingAddress`.
        public struct ShippingAddress: Codable, Hashable, Sendable {
            /// ISO 3166-1 alpha-2 country code
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/country_code`.
            public var countryCode: Swift.String
            /// State, if applicable
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/state`.
            public var state: Swift.String
            /// City
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/city`.
            public var city: Swift.String
            /// First line for the address
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/street_line1`.
            public var streetLine1: Swift.String
            /// Second line for the address
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/street_line2`.
            public var streetLine2: Swift.String
            /// Address post code
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingAddress/post_code`.
            public var postCode: Swift.String
            /// Creates a new `ShippingAddress`.
            ///
            /// - Parameters:
            ///   - countryCode: ISO 3166-1 alpha-2 country code
            ///   - state: State, if applicable
            ///   - city: City
            ///   - streetLine1: First line for the address
            ///   - streetLine2: Second line for the address
            ///   - postCode: Address post code
            public init(
                countryCode: Swift.String,
                state: Swift.String,
                city: Swift.String,
                streetLine1: Swift.String,
                streetLine2: Swift.String,
                postCode: Swift.String
            ) {
                self.countryCode = countryCode
                self.state = state
                self.city = city
                self.streetLine1 = streetLine1
                self.streetLine2 = streetLine2
                self.postCode = postCode
            }
            public enum CodingKeys: String, CodingKey {
                case countryCode = "country_code"
                case state
                case city
                case streetLine1 = "street_line1"
                case streetLine2 = "street_line2"
                case postCode = "post_code"
            }
        }
        /// This object represents information about an order.
        ///
        /// - Remark: Generated from `#/components/schemas/OrderInfo`.
        public struct OrderInfo: Codable, Hashable, Sendable {
            /// *Optional*. User name
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/name`.
            public var name: Swift.String?
            /// *Optional*. User's phone number
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/phone_number`.
            public var phoneNumber: Swift.String?
            /// *Optional*. User email
            ///
            /// - Remark: Generated from `#/components/schemas/OrderInfo/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderInfo/shipping_address`.
            public var shippingAddress: Components.Schemas.ShippingAddress?
            /// Creates a new `OrderInfo`.
            ///
            /// - Parameters:
            ///   - name: *Optional*. User name
            ///   - phoneNumber: *Optional*. User's phone number
            ///   - email: *Optional*. User email
            ///   - shippingAddress:
            public init(
                name: Swift.String? = nil,
                phoneNumber: Swift.String? = nil,
                email: Swift.String? = nil,
                shippingAddress: Components.Schemas.ShippingAddress? = nil
            ) {
                self.name = name
                self.phoneNumber = phoneNumber
                self.email = email
                self.shippingAddress = shippingAddress
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case phoneNumber = "phone_number"
                case email
                case shippingAddress = "shipping_address"
            }
        }
        /// This object represents one shipping option.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingOption`.
        public struct ShippingOption: Codable, Hashable, Sendable {
            /// Shipping option identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/id`.
            public var id: Swift.String
            /// Option title
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/title`.
            public var title: Swift.String
            /// List of price portions
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingOption/prices`.
            public var prices: [Components.Schemas.LabeledPrice]
            /// Creates a new `ShippingOption`.
            ///
            /// - Parameters:
            ///   - id: Shipping option identifier
            ///   - title: Option title
            ///   - prices: List of price portions
            public init(
                id: Swift.String,
                title: Swift.String,
                prices: [Components.Schemas.LabeledPrice]
            ) {
                self.id = id
                self.title = title
                self.prices = prices
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case prices
            }
        }
        /// This object contains basic information about a successful payment.
        ///
        /// - Remark: Generated from `#/components/schemas/SuccessfulPayment`.
        public struct SuccessfulPayment: Codable, Hashable, Sendable {
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/total_amount`.
            public var totalAmount: Swift.Int
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/invoice_payload`.
            public var invoicePayload: Swift.String
            /// *Optional*. Identifier of the shipping option chosen by the user
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/shipping_option_id`.
            public var shippingOptionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/order_info`.
            public var orderInfo: Components.Schemas.OrderInfo?
            /// Telegram payment identifier
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/telegram_payment_charge_id`.
            public var telegramPaymentChargeId: Swift.String
            /// Provider payment identifier
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessfulPayment/provider_payment_charge_id`.
            public var providerPaymentChargeId: Swift.String
            /// Creates a new `SuccessfulPayment`.
            ///
            /// - Parameters:
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - totalAmount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///   - invoicePayload: Bot specified invoice payload
            ///   - shippingOptionId: *Optional*. Identifier of the shipping option chosen by the user
            ///   - orderInfo:
            ///   - telegramPaymentChargeId: Telegram payment identifier
            ///   - providerPaymentChargeId: Provider payment identifier
            public init(
                currency: Swift.String,
                totalAmount: Swift.Int,
                invoicePayload: Swift.String,
                shippingOptionId: Swift.String? = nil,
                orderInfo: Components.Schemas.OrderInfo? = nil,
                telegramPaymentChargeId: Swift.String,
                providerPaymentChargeId: Swift.String
            ) {
                self.currency = currency
                self.totalAmount = totalAmount
                self.invoicePayload = invoicePayload
                self.shippingOptionId = shippingOptionId
                self.orderInfo = orderInfo
                self.telegramPaymentChargeId = telegramPaymentChargeId
                self.providerPaymentChargeId = providerPaymentChargeId
            }
            public enum CodingKeys: String, CodingKey {
                case currency
                case totalAmount = "total_amount"
                case invoicePayload = "invoice_payload"
                case shippingOptionId = "shipping_option_id"
                case orderInfo = "order_info"
                case telegramPaymentChargeId = "telegram_payment_charge_id"
                case providerPaymentChargeId = "provider_payment_charge_id"
            }
        }
        /// This object contains information about an incoming shipping query.
        ///
        /// - Remark: Generated from `#/components/schemas/ShippingQuery`.
        public struct ShippingQuery: Codable, Hashable, Sendable {
            /// Unique query identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/from`.
            public var from: Components.Schemas.User
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/invoice_payload`.
            public var invoicePayload: Swift.String
            /// - Remark: Generated from `#/components/schemas/ShippingQuery/shipping_address`.
            public var shippingAddress: Components.Schemas.ShippingAddress
            /// Creates a new `ShippingQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique query identifier
            ///   - from:
            ///   - invoicePayload: Bot specified invoice payload
            ///   - shippingAddress:
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                invoicePayload: Swift.String,
                shippingAddress: Components.Schemas.ShippingAddress
            ) {
                self.id = id
                self.from = from
                self.invoicePayload = invoicePayload
                self.shippingAddress = shippingAddress
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case invoicePayload = "invoice_payload"
                case shippingAddress = "shipping_address"
            }
        }
        /// This object contains information about an incoming pre-checkout query.
        ///
        /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery`.
        public struct PreCheckoutQuery: Codable, Hashable, Sendable {
            /// Unique query identifier
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/from`.
            public var from: Components.Schemas.User
            /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/currency`.
            public var currency: Swift.String
            /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/total_amount`.
            public var totalAmount: Swift.Int
            /// Bot specified invoice payload
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/invoice_payload`.
            public var invoicePayload: Swift.String
            /// *Optional*. Identifier of the shipping option chosen by the user
            ///
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/shipping_option_id`.
            public var shippingOptionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PreCheckoutQuery/order_info`.
            public var orderInfo: Components.Schemas.OrderInfo?
            /// Creates a new `PreCheckoutQuery`.
            ///
            /// - Parameters:
            ///   - id: Unique query identifier
            ///   - from:
            ///   - currency: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
            ///   - totalAmount: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            ///   - invoicePayload: Bot specified invoice payload
            ///   - shippingOptionId: *Optional*. Identifier of the shipping option chosen by the user
            ///   - orderInfo:
            public init(
                id: Swift.String,
                from: Components.Schemas.User,
                currency: Swift.String,
                totalAmount: Swift.Int,
                invoicePayload: Swift.String,
                shippingOptionId: Swift.String? = nil,
                orderInfo: Components.Schemas.OrderInfo? = nil
            ) {
                self.id = id
                self.from = from
                self.currency = currency
                self.totalAmount = totalAmount
                self.invoicePayload = invoicePayload
                self.shippingOptionId = shippingOptionId
                self.orderInfo = orderInfo
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case from
                case currency
                case totalAmount = "total_amount"
                case invoicePayload = "invoice_payload"
                case shippingOptionId = "shipping_option_id"
                case orderInfo = "order_info"
            }
        }
        /// Contains information about Telegram Passport data shared with the bot by the user.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportData`.
        public struct PassportData: Codable, Hashable, Sendable {
            /// Array with information about documents and other Telegram Passport elements that was shared with the bot
            ///
            /// - Remark: Generated from `#/components/schemas/PassportData/data`.
            public var data: [Components.Schemas.EncryptedPassportElement]
            /// - Remark: Generated from `#/components/schemas/PassportData/credentials`.
            public var credentials: Components.Schemas.EncryptedCredentials
            /// Creates a new `PassportData`.
            ///
            /// - Parameters:
            ///   - data: Array with information about documents and other Telegram Passport elements that was shared with the bot
            ///   - credentials:
            public init(
                data: [Components.Schemas.EncryptedPassportElement],
                credentials: Components.Schemas.EncryptedCredentials
            ) {
                self.data = data
                self.credentials = credentials
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case credentials
            }
        }
        /// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportFile`.
        public struct PassportFile: Codable, Hashable, Sendable {
            /// Identifier for this file, which can be used to download or reuse the file
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_id`.
            public var fileId: Swift.String
            /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_unique_id`.
            public var fileUniqueId: Swift.String
            /// File size
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_size`.
            public var fileSize: Swift.Int
            /// Unix time when the file was uploaded
            ///
            /// - Remark: Generated from `#/components/schemas/PassportFile/file_date`.
            public var fileDate: Swift.Int
            /// Creates a new `PassportFile`.
            ///
            /// - Parameters:
            ///   - fileId: Identifier for this file, which can be used to download or reuse the file
            ///   - fileUniqueId: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
            ///   - fileSize: File size
            ///   - fileDate: Unix time when the file was uploaded
            public init(
                fileId: Swift.String,
                fileUniqueId: Swift.String,
                fileSize: Swift.Int,
                fileDate: Swift.Int
            ) {
                self.fileId = fileId
                self.fileUniqueId = fileUniqueId
                self.fileSize = fileSize
                self.fileDate = fileDate
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileUniqueId = "file_unique_id"
                case fileSize = "file_size"
                case fileDate = "file_date"
            }
        }
        /// Contains information about documents or other Telegram Passport elements shared with the bot by the user.
        ///
        /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement`.
        public struct EncryptedPassportElement: Codable, Hashable, Sendable {
            /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case personalDetails = "personal_details"
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
                case address = "address"
                case utilityBill = "utility_bill"
                case bankStatement = "bank_statement"
                case rentalAgreement = "rental_agreement"
                case passportRegistration = "passport_registration"
                case temporaryRegistration = "temporary_registration"
                case phoneNumber = "phone_number"
                case email = "email"
            }
            /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/type`.
            public var _type: Components.Schemas.EncryptedPassportElement._TypePayload
            /// *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/data`.
            public var data: Swift.String?
            /// *Optional*. User's verified phone number, available only for “phone\_number” type
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/phone_number`.
            public var phoneNumber: Swift.String?
            /// *Optional*. User's verified email address, available only for “email” type
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/email`.
            public var email: Swift.String?
            /// *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/files`.
            public var files: [Components.Schemas.PassportFile]?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/front_side`.
            public var frontSide: Components.Schemas.PassportFile?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/reverse_side`.
            public var reverseSide: Components.Schemas.PassportFile?
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/selfie`.
            public var selfie: Components.Schemas.PassportFile?
            /// *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/translation`.
            public var translation: [Components.Schemas.PassportFile]?
            /// Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedPassportElement/hash`.
            public var hash: Swift.String
            /// Creates a new `EncryptedPassportElement`.
            ///
            /// - Parameters:
            ///   - _type: Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
            ///   - data: *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - phoneNumber: *Optional*. User's verified phone number, available only for “phone\_number” type
            ///   - email: *Optional*. User's verified email address, available only for “email” type
            ///   - files: *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - frontSide:
            ///   - reverseSide:
            ///   - selfie:
            ///   - translation: *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
            ///   - hash: Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
            public init(
                _type: Components.Schemas.EncryptedPassportElement._TypePayload,
                data: Swift.String? = nil,
                phoneNumber: Swift.String? = nil,
                email: Swift.String? = nil,
                files: [Components.Schemas.PassportFile]? = nil,
                frontSide: Components.Schemas.PassportFile? = nil,
                reverseSide: Components.Schemas.PassportFile? = nil,
                selfie: Components.Schemas.PassportFile? = nil,
                translation: [Components.Schemas.PassportFile]? = nil,
                hash: Swift.String
            ) {
                self._type = _type
                self.data = data
                self.phoneNumber = phoneNumber
                self.email = email
                self.files = files
                self.frontSide = frontSide
                self.reverseSide = reverseSide
                self.selfie = selfie
                self.translation = translation
                self.hash = hash
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case data
                case phoneNumber = "phone_number"
                case email
                case files
                case frontSide = "front_side"
                case reverseSide = "reverse_side"
                case selfie
                case translation
                case hash
            }
        }
        /// Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
        ///
        /// - Remark: Generated from `#/components/schemas/EncryptedCredentials`.
        public struct EncryptedCredentials: Codable, Hashable, Sendable {
            /// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/data`.
            public var data: Swift.String
            /// Base64-encoded data hash for data authentication
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/hash`.
            public var hash: Swift.String
            /// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
            ///
            /// - Remark: Generated from `#/components/schemas/EncryptedCredentials/secret`.
            public var secret: Swift.String
            /// Creates a new `EncryptedCredentials`.
            ///
            /// - Parameters:
            ///   - data: Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
            ///   - hash: Base64-encoded data hash for data authentication
            ///   - secret: Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
            public init(
                data: Swift.String,
                hash: Swift.String,
                secret: Swift.String
            ) {
                self.data = data
                self.hash = hash
                self.secret = secret
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case hash
                case secret
            }
        }
        /// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementError`.
        public struct PassportElementError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value1`.
            public var value1: Components.Schemas.PassportElementErrorDataField?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value2`.
            public var value2: Components.Schemas.PassportElementErrorFrontSide?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value3`.
            public var value3: Components.Schemas.PassportElementErrorReverseSide?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value4`.
            public var value4: Components.Schemas.PassportElementErrorSelfie?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value5`.
            public var value5: Components.Schemas.PassportElementErrorFile?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value6`.
            public var value6: Components.Schemas.PassportElementErrorFiles?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value7`.
            public var value7: Components.Schemas.PassportElementErrorTranslationFile?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value8`.
            public var value8: Components.Schemas.PassportElementErrorTranslationFiles?
            /// - Remark: Generated from `#/components/schemas/PassportElementError/value9`.
            public var value9: Components.Schemas.PassportElementErrorUnspecified?
            /// Creates a new `PassportElementError`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            public init(
                value1: Components.Schemas.PassportElementErrorDataField? = nil,
                value2: Components.Schemas.PassportElementErrorFrontSide? = nil,
                value3: Components.Schemas.PassportElementErrorReverseSide? = nil,
                value4: Components.Schemas.PassportElementErrorSelfie? = nil,
                value5: Components.Schemas.PassportElementErrorFile? = nil,
                value6: Components.Schemas.PassportElementErrorFiles? = nil,
                value7: Components.Schemas.PassportElementErrorTranslationFile? = nil,
                value8: Components.Schemas.PassportElementErrorTranslationFiles? = nil,
                value9: Components.Schemas.PassportElementErrorUnspecified? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6,
                        self.value7,
                        self.value8,
                        self.value9
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
                try self.value7?.encode(to: encoder)
                try self.value8?.encode(to: encoder)
                try self.value9?.encode(to: encoder)
            }
        }
        /// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField`.
        public struct PassportElementErrorDataField: Codable, Hashable, Sendable {
            /// Error source, must be *data*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case personalDetails = "personal_details"
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
                case address = "address"
            }
            /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/type`.
            public var _type: Components.Schemas.PassportElementErrorDataField._TypePayload
            /// Name of the data field which has the error
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/field_name`.
            public var fieldName: Swift.String
            /// Base64-encoded data hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/data_hash`.
            public var dataHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorDataField/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorDataField`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *data*
            ///   - _type: The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
            ///   - fieldName: Name of the data field which has the error
            ///   - dataHash: Base64-encoded data hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorDataField._TypePayload,
                fieldName: Swift.String,
                dataHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fieldName = fieldName
                self.dataHash = dataHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fieldName = "field_name"
                case dataHash = "data_hash"
                case message
            }
        }
        /// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide`.
        public struct PassportElementErrorFrontSide: Codable, Hashable, Sendable {
            /// Error source, must be *front\_side*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/type`.
            public var _type: Components.Schemas.PassportElementErrorFrontSide._TypePayload
            /// Base64-encoded hash of the file with the front side of the document
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/file_hash`.
            public var fileHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFrontSide/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFrontSide`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *front\_side*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///   - fileHash: Base64-encoded hash of the file with the front side of the document
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFrontSide._TypePayload,
                fileHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHash = fileHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHash = "file_hash"
                case message
            }
        }
        /// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide`.
        public struct PassportElementErrorReverseSide: Codable, Hashable, Sendable {
            /// Error source, must be *reverse\_side*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/type`.
            public var _type: Components.Schemas.PassportElementErrorReverseSide._TypePayload
            /// Base64-encoded hash of the file with the reverse side of the document
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/file_hash`.
            public var fileHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorReverseSide/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorReverseSide`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *reverse\_side*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
            ///   - fileHash: Base64-encoded hash of the file with the reverse side of the document
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorReverseSide._TypePayload,
                fileHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHash = fileHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHash = "file_hash"
                case message
            }
        }
        /// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie`.
        public struct PassportElementErrorSelfie: Codable, Hashable, Sendable {
            /// Error source, must be *selfie*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/type`.
            public var _type: Components.Schemas.PassportElementErrorSelfie._TypePayload
            /// Base64-encoded hash of the file with the selfie
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/file_hash`.
            public var fileHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorSelfie/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorSelfie`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *selfie*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
            ///   - fileHash: Base64-encoded hash of the file with the selfie
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorSelfie._TypePayload,
                fileHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHash = fileHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHash = "file_hash"
                case message
            }
        }
        /// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile`.
        public struct PassportElementErrorFile: Codable, Hashable, Sendable {
            /// Error source, must be *file*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case utilityBill = "utility_bill"
                case bankStatement = "bank_statement"
                case rentalAgreement = "rental_agreement"
                case passportRegistration = "passport_registration"
                case temporaryRegistration = "temporary_registration"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/type`.
            public var _type: Components.Schemas.PassportElementErrorFile._TypePayload
            /// Base64-encoded file hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/file_hash`.
            public var fileHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFile/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFile`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *file*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - fileHash: Base64-encoded file hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFile._TypePayload,
                fileHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHash = fileHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHash = "file_hash"
                case message
            }
        }
        /// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles`.
        public struct PassportElementErrorFiles: Codable, Hashable, Sendable {
            /// Error source, must be *files*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/source`.
            public var source: Swift.String
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case utilityBill = "utility_bill"
                case bankStatement = "bank_statement"
                case rentalAgreement = "rental_agreement"
                case passportRegistration = "passport_registration"
                case temporaryRegistration = "temporary_registration"
            }
            /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/type`.
            public var _type: Components.Schemas.PassportElementErrorFiles._TypePayload
            /// List of base64-encoded file hashes
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/file_hashes`.
            public var fileHashes: [Swift.String]
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorFiles/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorFiles`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *files*
            ///   - _type: The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - fileHashes: List of base64-encoded file hashes
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorFiles._TypePayload,
                fileHashes: [Swift.String],
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHashes = fileHashes
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHashes = "file_hashes"
                case message
            }
        }
        /// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile`.
        public struct PassportElementErrorTranslationFile: Codable, Hashable, Sendable {
            /// Error source, must be *translation\_file*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
                case utilityBill = "utility_bill"
                case bankStatement = "bank_statement"
                case rentalAgreement = "rental_agreement"
                case passportRegistration = "passport_registration"
                case temporaryRegistration = "temporary_registration"
            }
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/type`.
            public var _type: Components.Schemas.PassportElementErrorTranslationFile._TypePayload
            /// Base64-encoded file hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/file_hash`.
            public var fileHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFile/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorTranslationFile`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *translation\_file*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - fileHash: Base64-encoded file hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorTranslationFile._TypePayload,
                fileHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHash = fileHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHash = "file_hash"
                case message
            }
        }
        /// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles`.
        public struct PassportElementErrorTranslationFiles: Codable, Hashable, Sendable {
            /// Error source, must be *translation\_files*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case passport = "passport"
                case driverLicense = "driver_license"
                case identityCard = "identity_card"
                case internalPassport = "internal_passport"
                case utilityBill = "utility_bill"
                case bankStatement = "bank_statement"
                case rentalAgreement = "rental_agreement"
                case passportRegistration = "passport_registration"
                case temporaryRegistration = "temporary_registration"
            }
            /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/type`.
            public var _type: Components.Schemas.PassportElementErrorTranslationFiles._TypePayload
            /// List of base64-encoded file hashes
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/file_hashes`.
            public var fileHashes: [Swift.String]
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorTranslationFiles/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorTranslationFiles`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *translation\_files*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
            ///   - fileHashes: List of base64-encoded file hashes
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Components.Schemas.PassportElementErrorTranslationFiles._TypePayload,
                fileHashes: [Swift.String],
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.fileHashes = fileHashes
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case fileHashes = "file_hashes"
                case message
            }
        }
        /// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
        ///
        /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified`.
        public struct PassportElementErrorUnspecified: Codable, Hashable, Sendable {
            /// Error source, must be *unspecified*
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/source`.
            public var source: Swift.String
            /// Type of element of the user's Telegram Passport which has the issue
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/type`.
            public var _type: Swift.String
            /// Base64-encoded element hash
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/element_hash`.
            public var elementHash: Swift.String
            /// Error message
            ///
            /// - Remark: Generated from `#/components/schemas/PassportElementErrorUnspecified/message`.
            public var message: Swift.String
            /// Creates a new `PassportElementErrorUnspecified`.
            ///
            /// - Parameters:
            ///   - source: Error source, must be *unspecified*
            ///   - _type: Type of element of the user's Telegram Passport which has the issue
            ///   - elementHash: Base64-encoded element hash
            ///   - message: Error message
            public init(
                source: Swift.String,
                _type: Swift.String,
                elementHash: Swift.String,
                message: Swift.String
            ) {
                self.source = source
                self._type = _type
                self.elementHash = elementHash
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case source
                case _type = "type"
                case elementHash = "element_hash"
                case message
            }
        }
        /// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
        ///
        /// - Remark: Generated from `#/components/schemas/Game`.
        public struct Game: Codable, Hashable, Sendable {
            /// Title of the game
            ///
            /// - Remark: Generated from `#/components/schemas/Game/title`.
            public var title: Swift.String
            /// Description of the game
            ///
            /// - Remark: Generated from `#/components/schemas/Game/description`.
            public var description: Swift.String
            /// Photo that will be displayed in the game message in chats.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/photo`.
            public var photo: [Components.Schemas.PhotoSize]
            /// *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/text`.
            public var text: Swift.String?
            /// *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
            ///
            /// - Remark: Generated from `#/components/schemas/Game/text_entities`.
            public var textEntities: [Components.Schemas.MessageEntity]?
            /// - Remark: Generated from `#/components/schemas/Game/animation`.
            public var animation: Components.Schemas.Animation?
            /// Creates a new `Game`.
            ///
            /// - Parameters:
            ///   - title: Title of the game
            ///   - description: Description of the game
            ///   - photo: Photo that will be displayed in the game message in chats.
            ///   - text: *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
            ///   - textEntities: *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
            ///   - animation:
            public init(
                title: Swift.String,
                description: Swift.String,
                photo: [Components.Schemas.PhotoSize],
                text: Swift.String? = nil,
                textEntities: [Components.Schemas.MessageEntity]? = nil,
                animation: Components.Schemas.Animation? = nil
            ) {
                self.title = title
                self.description = description
                self.photo = photo
                self.text = text
                self.textEntities = textEntities
                self.animation = animation
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case photo
                case text
                case textEntities = "text_entities"
                case animation
            }
        }
        /// A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackGame`.
        public typealias CallbackGame = OpenAPIRuntime.OpenAPIValueContainer
        /// This object represents one row of the high scores table for a game.
        ///
        /// - Remark: Generated from `#/components/schemas/GameHighScore`.
        public struct GameHighScore: Codable, Hashable, Sendable {
            /// Position in high score table for the game
            ///
            /// - Remark: Generated from `#/components/schemas/GameHighScore/position`.
            public var position: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GameHighScore/user`.
            public var user: Components.Schemas.User
            /// Score
            ///
            /// - Remark: Generated from `#/components/schemas/GameHighScore/score`.
            public var score: Swift.Int
            /// Creates a new `GameHighScore`.
            ///
            /// - Parameters:
            ///   - position: Position in high score table for the game
            ///   - user:
            ///   - score: Score
            public init(
                position: Swift.Int,
                user: Components.Schemas.User,
                score: Swift.Int
            ) {
                self.position = position
                self.user = user
                self.score = score
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case user
                case score
            }
        }
        /// Used in the User Authorization process, used to return the current state of the authorization and the token.
        ///
        /// - Remark: Generated from `#/components/schemas/AuthorizationState`.
        public struct AuthorizationState: Codable, Hashable, Sendable {
            /// Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/authorization_state`.
            @frozen public enum AuthorizationStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case waitCode = "wait_code"
                case waitPassword = "wait_password"
                case waitRegistration = "wait_registration"
                case ready = "ready"
                case unknown = "unknown"
            }
            /// Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/authorization_state`.
            public var authorizationState: Components.Schemas.AuthorizationState.AuthorizationStatePayload
            /// Optional. Token to be used for calling methods at the bot api. Only returned once after the `userlogin` method.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/token`.
            public var token: Swift.String?
            /// Optional. Timeout for entering the authorization code.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/timeout`.
            public var timeout: Swift.Int?
            /// Optional. The password hint for your 2fa password. May be empty even if you set a hint.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/password_hint`.
            public var passwordHint: Swift.String?
            /// Optional. True, if a recovery email address has been set up.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthorizationState/has_recovery_email_address`.
            public var hasRecoveryEmailAddress: Swift.Bool?
            /// Creates a new `AuthorizationState`.
            ///
            /// - Parameters:
            ///   - authorizationState: Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
            ///   - token: Optional. Token to be used for calling methods at the bot api. Only returned once after the `userlogin` method.
            ///   - timeout: Optional. Timeout for entering the authorization code.
            ///   - passwordHint: Optional. The password hint for your 2fa password. May be empty even if you set a hint.
            ///   - hasRecoveryEmailAddress: Optional. True, if a recovery email address has been set up.
            public init(
                authorizationState: Components.Schemas.AuthorizationState.AuthorizationStatePayload,
                token: Swift.String? = nil,
                timeout: Swift.Int? = nil,
                passwordHint: Swift.String? = nil,
                hasRecoveryEmailAddress: Swift.Bool? = nil
            ) {
                self.authorizationState = authorizationState
                self.token = token
                self.timeout = timeout
                self.passwordHint = passwordHint
                self.hasRecoveryEmailAddress = hasRecoveryEmailAddress
            }
            public enum CodingKeys: String, CodingKey {
                case authorizationState = "authorization_state"
                case token
                case timeout
                case passwordHint = "password_hint"
                case hasRecoveryEmailAddress = "has_recovery_email_address"
            }
        }
        /// Contains a bot's answer to a callback query.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer`.
        public struct CallbackQueryAnswer: Codable, Hashable, Sendable {
            /// Text of the answer
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/text`.
            public var text: Swift.String
            /// True, if an alert should be shown to the user instead of a toast notification.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/show_alert`.
            public var showAlert: Swift.Bool?
            /// URL to be opened.
            ///
            /// - Remark: Generated from `#/components/schemas/CallbackQueryAnswer/url`.
            public var url: Swift.String?
            /// Creates a new `CallbackQueryAnswer`.
            ///
            /// - Parameters:
            ///   - text: Text of the answer
            ///   - showAlert: True, if an alert should be shown to the user instead of a toast notification.
            ///   - url: URL to be opened.
            public init(
                text: Swift.String,
                showAlert: Swift.Bool? = nil,
                url: Swift.String? = nil
            ) {
                self.text = text
                self.showAlert = showAlert
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case showAlert = "show_alert"
                case url
            }
        }
        /// Contains a proxy definition.
        ///
        /// - Remark: Generated from `#/components/schemas/Proxy`.
        public struct Proxy: Codable, Hashable, Sendable {
            /// Unique ID of the proxy
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/id`.
            public var id: Swift.Int
            /// Unix timestamp indicating when the proxy was used for the last time.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/last_used_date`.
            public var lastUsedDate: Swift.Int
            /// Whether the bot is being used at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/is_enabled`.
            public var isEnabled: Swift.Bool
            /// Hostname or IP of the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/server`.
            public var server: Swift.String
            /// TCP port where the proxy server listens.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/port`.
            public var port: Swift.Int
            /// Type of proxy server, either socks5, mtproto or http.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/type`.
            public var _type: Swift.String
            /// Username to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/username`.
            public var username: Swift.String?
            /// Password to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/password`.
            public var password: Swift.String?
            /// Secret to authenticate to the proxy server.
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/secret`.
            public var secret: Swift.String?
            /// Whether an Http proxy can only use Http requests (and does not support HTTP CONNECT method).
            ///
            /// - Remark: Generated from `#/components/schemas/Proxy/http_only`.
            public var httpOnly: Swift.Bool?
            /// Creates a new `Proxy`.
            ///
            /// - Parameters:
            ///   - id: Unique ID of the proxy
            ///   - lastUsedDate: Unix timestamp indicating when the proxy was used for the last time.
            ///   - isEnabled: Whether the bot is being used at the moment.
            ///   - server: Hostname or IP of the proxy server.
            ///   - port: TCP port where the proxy server listens.
            ///   - _type: Type of proxy server, either socks5, mtproto or http.
            ///   - username: Username to authenticate to the proxy server.
            ///   - password: Password to authenticate to the proxy server.
            ///   - secret: Secret to authenticate to the proxy server.
            ///   - httpOnly: Whether an Http proxy can only use Http requests (and does not support HTTP CONNECT method).
            public init(
                id: Swift.Int,
                lastUsedDate: Swift.Int,
                isEnabled: Swift.Bool,
                server: Swift.String,
                port: Swift.Int,
                _type: Swift.String,
                username: Swift.String? = nil,
                password: Swift.String? = nil,
                secret: Swift.String? = nil,
                httpOnly: Swift.Bool? = nil
            ) {
                self.id = id
                self.lastUsedDate = lastUsedDate
                self.isEnabled = isEnabled
                self.server = server
                self.port = port
                self._type = _type
                self.username = username
                self.password = password
                self.secret = secret
                self.httpOnly = httpOnly
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case lastUsedDate = "last_used_date"
                case isEnabled = "is_enabled"
                case server
                case port
                case _type = "type"
                case username
                case password
                case secret
                case httpOnly = "http_only"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// *ONLY FOR USERS*
    ///
    /// Use this method to receive the authorization token to log in as user.
    ///
    /// Note: You don't have your token yet, so the domain is just {base_url}/userLogin
    ///
    /// Returns an `AuthorizationState` with the user token on success.
    ///
    /// - Remark: HTTP `POST /userLogin`.
    /// - Remark: Generated from `#/paths//userLogin/post`.
    public enum PostUserLogin {
        public static let id: Swift.String = "post/userLogin"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userLogin/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUserLogin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUserLogin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUserLogin.Input.Headers
            /// - Remark: Generated from `#/paths/userLogin/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Your phone number to log in.
                    ///
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/urlEncodedForm/phone_number`.
                    public var phoneNumber: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - phoneNumber: Your phone number to log in.
                    public init(phoneNumber: Swift.String) {
                        self.phoneNumber = phoneNumber
                    }
                    public enum CodingKeys: String, CodingKey {
                        case phoneNumber = "phone_number"
                    }
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostUserLogin.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/multipartForm/phone_number`.
                    public struct PhoneNumberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhoneNumberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case phoneNumber(OpenAPIRuntime.MultipartPart<Operations.PostUserLogin.Input.Body.MultipartFormPayload.PhoneNumberPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostUserLogin.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Your phone number to log in.
                    ///
                    /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/json/phone_number`.
                    public var phoneNumber: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - phoneNumber: Your phone number to log in.
                    public init(phoneNumber: Swift.String) {
                        self.phoneNumber = phoneNumber
                    }
                    public enum CodingKeys: String, CodingKey {
                        case phoneNumber = "phone_number"
                    }
                }
                /// - Remark: Generated from `#/paths/userLogin/POST/requestBody/content/application\/json`.
                case json(Operations.PostUserLogin.Input.Body.JsonPayload)
            }
            public var body: Operations.PostUserLogin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUserLogin.Input.Headers = .init(),
                body: Operations.PostUserLogin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/200/content/application\/json`.
                    case json(Operations.PostUserLogin.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUserLogin.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUserLogin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUserLogin.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//userLogin/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostUserLogin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostUserLogin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userLogin/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userLogin/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUserLogin.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUserLogin.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//userLogin/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostUserLogin.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostUserLogin.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your authentication code. Returns an `AuthorizationState` on success.
    ///
    /// - Remark: HTTP `POST /authCode`.
    /// - Remark: Generated from `#/paths//authCode/post`.
    public enum PostAuthCode {
        public static let id: Swift.String = "post/authCode"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/authCode/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAuthCode.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAuthCode.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAuthCode.Input.Headers
            /// - Remark: Generated from `#/paths/authCode/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The verification code received via SMS, Telegram message, phone call, or flash call.
                    ///
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/urlEncodedForm/code`.
                    public var code: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: The verification code received via SMS, Telegram message, phone call, or flash call.
                    public init(code: Swift.Int) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAuthCode.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/multipartForm/code`.
                    public struct CodePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CodePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case code(OpenAPIRuntime.MultipartPart<Operations.PostAuthCode.Input.Body.MultipartFormPayload.CodePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAuthCode.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The verification code received via SMS, Telegram message, phone call, or flash call.
                    ///
                    /// - Remark: Generated from `#/paths/authCode/POST/requestBody/json/code`.
                    public var code: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: The verification code received via SMS, Telegram message, phone call, or flash call.
                    public init(code: Swift.Int) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/authCode/POST/requestBody/content/application\/json`.
                case json(Operations.PostAuthCode.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAuthCode.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAuthCode.Input.Headers = .init(),
                body: Operations.PostAuthCode.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAuthCode.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAuthCode.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAuthCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAuthCode.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authCode/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAuthCode.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAuthCode.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authCode/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authCode/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAuthCode.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAuthCode.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authCode/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAuthCode.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAuthCode.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method in the authorization process to check your 2-factor-authorization password for correctness. Returns an `AuthorizationState` on success.
    ///
    /// *Never* send your password over a plain http connection. Make sure https is enabled or use this API locally.
    ///
    /// - Remark: HTTP `POST /authPassword`.
    /// - Remark: Generated from `#/paths//authPassword/post`.
    public enum PostAuthPassword {
        public static let id: Swift.String = "post/authPassword"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/authPassword/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAuthPassword.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAuthPassword.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAuthPassword.Input.Headers
            /// - Remark: Generated from `#/paths/authPassword/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The password to check.
                    ///
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/urlEncodedForm/password`.
                    public var password: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The password to check.
                    public init(password: Swift.String) {
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAuthPassword.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/multipartForm/password`.
                    public struct PasswordPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PasswordPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case password(OpenAPIRuntime.MultipartPart<Operations.PostAuthPassword.Input.Body.MultipartFormPayload.PasswordPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAuthPassword.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The password to check.
                    ///
                    /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/json/password`.
                    public var password: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The password to check.
                    public init(password: Swift.String) {
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/authPassword/POST/requestBody/content/application\/json`.
                case json(Operations.PostAuthPassword.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAuthPassword.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAuthPassword.Input.Headers = .init(),
                body: Operations.PostAuthPassword.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAuthPassword.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAuthPassword.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAuthPassword.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAuthPassword.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authPassword/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAuthPassword.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAuthPassword.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/authPassword/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/authPassword/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAuthPassword.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAuthPassword.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//authPassword/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAuthPassword.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAuthPassword.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Use this method to register a new user account. Only works after sending the authcode if the user is not yet registered. Returns an `AuthorizationState` on success.
    ///
    /// User registration is disabled by default. You can enable it with the `--allow-users-registration` command line option or the env variable `TELEGRAM_ALLOW_USERS_REGISTRATION` set to `1` when using docker.s
    ///
    /// - Remark: HTTP `POST /registerUser`.
    /// - Remark: Generated from `#/paths//registerUser/post`.
    public enum PostRegisterUser {
        public static let id: Swift.String = "post/registerUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/registerUser/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRegisterUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRegisterUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostRegisterUser.Input.Headers
            /// - Remark: Generated from `#/paths/registerUser/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The first name of the user; 1-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/first_name`.
                    public var firstName: Swift.String
                    /// The last name of the user; 0-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/last_name`.
                    public var lastName: Swift.String?
                    /// Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - firstName: The first name of the user; 1-64 characters.
                    ///   - lastName: The last name of the user; 0-64 characters.
                    ///   - disableNotification: Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    public init(
                        firstName: Swift.String,
                        lastName: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil
                    ) {
                        self.firstName = firstName
                        self.lastName = lastName
                        self.disableNotification = disableNotification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case firstName = "first_name"
                        case lastName = "last_name"
                        case disableNotification = "disable_notification"
                    }
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostRegisterUser.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/first_name`.
                    public struct FirstNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FirstNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case firstName(OpenAPIRuntime.MultipartPart<Operations.PostRegisterUser.Input.Body.MultipartFormPayload.FirstNamePayload>)
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/last_name`.
                    public struct LastNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LastNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case lastName(OpenAPIRuntime.MultipartPart<Operations.PostRegisterUser.Input.Body.MultipartFormPayload.LastNamePayload>)
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostRegisterUser.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostRegisterUser.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The first name of the user; 1-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/first_name`.
                    public var firstName: Swift.String
                    /// The last name of the user; 0-64 characters.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/last_name`.
                    public var lastName: Swift.String?
                    /// Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    ///
                    /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - firstName: The first name of the user; 1-64 characters.
                    ///   - lastName: The last name of the user; 0-64 characters.
                    ///   - disableNotification: Disables "user joined Telegram" notification for other users that have the contact in their contact list.
                    public init(
                        firstName: Swift.String,
                        lastName: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil
                    ) {
                        self.firstName = firstName
                        self.lastName = lastName
                        self.disableNotification = disableNotification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case firstName = "first_name"
                        case lastName = "last_name"
                        case disableNotification = "disable_notification"
                    }
                }
                /// - Remark: Generated from `#/paths/registerUser/POST/requestBody/content/application\/json`.
                case json(Operations.PostRegisterUser.Input.Body.JsonPayload)
            }
            public var body: Operations.PostRegisterUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostRegisterUser.Input.Headers = .init(),
                body: Operations.PostRegisterUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.AuthorizationState
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.AuthorizationState
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/200/content/application\/json`.
                    case json(Operations.PostRegisterUser.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostRegisterUser.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRegisterUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRegisterUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//registerUser/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostRegisterUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostRegisterUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/registerUser/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/registerUser/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRegisterUser.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRegisterUser.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//registerUser/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostRegisterUser.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostRegisterUser.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Calling `optimizeMemory` will remove old data from the in-memory cache and give the freed memory back to the os. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /optimizeMemory`.
    /// - Remark: Generated from `#/paths//optimizeMemory/post`.
    public enum PostOptimizeMemory {
        public static let id: Swift.String = "post/optimizeMemory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/optimizeMemory/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOptimizeMemory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOptimizeMemory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostOptimizeMemory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostOptimizeMemory.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/200/content/application\/json`.
                    case json(Operations.PostOptimizeMemory.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostOptimizeMemory.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOptimizeMemory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOptimizeMemory.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//optimizeMemory/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOptimizeMemory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostOptimizeMemory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/optimizeMemory/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOptimizeMemory.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOptimizeMemory.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//optimizeMemory/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostOptimizeMemory.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostOptimizeMemory.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get information about a message. Returns a `Message` on success.
    ///
    /// - Remark: HTTP `POST /getMessageInfo`.
    /// - Remark: Generated from `#/paths//getMessageInfo/post`.
    public enum PostGetMessageInfo {
        public static let id: Swift.String = "post/getMessageInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMessageInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMessageInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMessageInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetMessageInfo.Input.Headers
            /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetMessageInfo.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    public init(
                        chatId: Operations.PostGetMessageInfo.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetMessageInfo.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetMessageInfo.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostGetMessageInfo.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetMessageInfo.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetMessageInfo.Input.Body.JsonPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    public init(
                        chatId: Operations.PostGetMessageInfo.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetMessageInfo.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetMessageInfo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetMessageInfo.Input.Headers = .init(),
                body: Operations.PostGetMessageInfo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetMessageInfo.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetMessageInfo.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMessageInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMessageInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMessageInfo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetMessageInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetMessageInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMessageInfo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMessageInfo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMessageInfo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMessageInfo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetMessageInfo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetMessageInfo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of members in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat members. Administrator privileges may be required for some filters.
    ///
    /// Telegram only returns up to 10,000 members per group using this method. If you want to get more members, you can try to fetch additional users with different `query` parameters
    ///
    /// - Remark: HTTP `POST /getChatMembers`.
    /// - Remark: Generated from `#/paths//getChatMembers/post`.
    public enum PostGetChatMembers {
        public static let id: Swift.String = "post/getChatMembers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMembers/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMembers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMembers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChatMembers.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetChatMembers.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case members = "members"
                        case banned = "banned"
                        case restricted = "restricted"
                        case bots = "bots"
                        case admins = "admins"
                    }
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.PostGetChatMembers.Input.Body.UrlEncodedFormPayload.FilterPayload?
                    /// Query to search for in names and usernames
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String?
                    /// Number of users to skip.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// The maximum number of users be returned; up to 200.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - filter: Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///   - query: Query to search for in names and usernames
                    ///   - offset: Number of users to skip.
                    ///   - limit: The maximum number of users be returned; up to 200.
                    public init(
                        chatId: Operations.PostGetChatMembers.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        filter: Operations.PostGetChatMembers.Input.Body.UrlEncodedFormPayload.FilterPayload? = nil,
                        query: Swift.String? = nil,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.filter = filter
                        self.query = query
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case filter
                        case query
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChatMembers.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/filter`.
                    public struct FilterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FilterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload.FilterPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/query`.
                    public struct QueryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `QueryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload.QueryPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/offset`.
                    public struct OffsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload.OffsetPayload>)
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/multipartForm/limit`.
                    public struct LimitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LimitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload.LimitPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChatMembers.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetChatMembers.Input.Body.JsonPayload.ChatIdPayload
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case members = "members"
                        case banned = "banned"
                        case restricted = "restricted"
                        case bots = "bots"
                        case admins = "admins"
                    }
                    /// Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/filter`.
                    public var filter: Operations.PostGetChatMembers.Input.Body.JsonPayload.FilterPayload?
                    /// Query to search for in names and usernames
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/query`.
                    public var query: Swift.String?
                    /// Number of users to skip.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// The maximum number of users be returned; up to 200.
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - filter: Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
                    ///   - query: Query to search for in names and usernames
                    ///   - offset: Number of users to skip.
                    ///   - limit: The maximum number of users be returned; up to 200.
                    public init(
                        chatId: Operations.PostGetChatMembers.Input.Body.JsonPayload.ChatIdPayload,
                        filter: Operations.PostGetChatMembers.Input.Body.JsonPayload.FilterPayload? = nil,
                        query: Swift.String? = nil,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.filter = filter
                        self.query = query
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case filter
                        case query
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembers/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChatMembers.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChatMembers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChatMembers.Input.Headers = .init(),
                body: Operations.PostGetChatMembers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.ChatMember]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.ChatMember]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChatMembers.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChatMembers.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMembers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMembers.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembers/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChatMembers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChatMembers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembers/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMembers.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMembers.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembers/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChatMembers.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChatMembers.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete multiple messages simultaneously.
    /// This method can delete a set of message ids, or a range of message ids.
    ///
    /// If you specify "message_ids", this method tries to delete the specified set of ids:
    ///   If some of the specified messages can't be found, they are skipped.
    ///   Returns True on success.
    ///
    /// If you specify "start" and "end", this method deletes all the messages with message_id in range between start and end:
    ///   The start parameter MUST be less than the end parameter
    ///   Both start and end must be positive non zero numbers
    ///   The method will always return true as a result, even if the messages cannot be deleted
    ///   This method does not work on private chat or normal groups It is not suggested to delete more than 200 messages per call.
    ///
    ///   *NOTE*
    ///   The maximum number of messages to be deleted in a single batch is determined by the max-batch-operations parameter and is 10000 by default.
    ///
    /// - Remark: HTTP `POST /deleteMessages`.
    /// - Remark: Generated from `#/paths//deleteMessages/post`.
    public enum PostDeleteMessages {
        public static let id: Swift.String = "post/deleteMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteMessages.Input.Headers
            /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostDeleteMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/message_ids`.
                    public var messageIds: [Swift.Int]?
                    /// First message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/start`.
                    public var start: Swift.Int?
                    /// Last message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/urlEncodedForm/end`.
                    public var end: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageIds:
                    ///   - start: First message id to delete
                    ///   - end: Last message id to delete
                    public init(
                        chatId: Operations.PostDeleteMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageIds: [Swift.Int]? = nil,
                        start: Swift.Int? = nil,
                        end: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.messageIds = messageIds
                        self.start = start
                        self.end = end
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageIds = "message_ids"
                        case start
                        case end
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteMessages.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessages.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/message_ids`.
                    public struct MessageIdsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageIds(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessages.Input.Body.MultipartFormPayload.MessageIdsPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/start`.
                    public struct StartPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `StartPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case start(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessages.Input.Body.MultipartFormPayload.StartPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/multipartForm/end`.
                    public struct EndPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `EndPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case end(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessages.Input.Body.MultipartFormPayload.EndPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteMessages.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostDeleteMessages.Input.Body.JsonPayload.ChatIdPayload
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/message_ids`.
                    public var messageIds: [Swift.Int]?
                    /// First message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/start`.
                    public var start: Swift.Int?
                    /// Last message id to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/json/end`.
                    public var end: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageIds:
                    ///   - start: First message id to delete
                    ///   - end: Last message id to delete
                    public init(
                        chatId: Operations.PostDeleteMessages.Input.Body.JsonPayload.ChatIdPayload,
                        messageIds: [Swift.Int]? = nil,
                        start: Swift.Int? = nil,
                        end: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.messageIds = messageIds
                        self.start = start
                        self.end = end
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageIds = "message_ids"
                        case start
                        case end
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessages/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteMessages.Input.Headers = .init(),
                body: Operations.PostDeleteMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteMessages.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteMessages.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Request was successful, the result is returned.
            ///
            /// - Remark: Generated from `#/paths//deleteMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the time in seconds as double-precision floating-point number.
    ///
    /// - Remark: HTTP `POST /ping`.
    /// - Remark: Generated from `#/paths//ping/post`.
    public enum PostPing {
        public static let id: Swift.String = "post/ping"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPing.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPing.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostPing.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostPing.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/json/result`.
                        public var result: Swift.Double
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Double
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping/POST/responses/200/content/application\/json`.
                    case json(Operations.PostPing.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostPing.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPing.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPing.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//ping/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostPing.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostPing.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPing.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPing.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//ping/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostPing.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostPing.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns an ordered list of chats. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getChats`.
    /// - Remark: Generated from `#/paths//getChats/post`.
    public enum PostGetChats {
        public static let id: Swift.String = "post/getChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChats.Input.Headers
            /// - Remark: Generated from `#/paths/getChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - offsetChatId: Chat identifier to return chats from.
                    public init(offsetChatId: Swift.Int? = nil) {
                        self.offsetChatId = offsetChatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offsetChatId = "offset_chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChats.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct OffsetChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offsetChatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChats.Input.Body.MultipartFormPayload.OffsetChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChats.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getChats/POST/requestBody/json/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - offsetChatId: Chat identifier to return chats from.
                    public init(offsetChatId: Swift.Int? = nil) {
                        self.offsetChatId = offsetChatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offsetChatId = "offset_chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChats/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChats.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChats.Input.Headers = .init(),
                body: Operations.PostGetChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChats.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChats.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns list of chats you have in commen with the other user. Currently returns an Error because of a tdlight bug. For optimal performance the number of returned chats is chosen by the library.
    ///
    /// - Remark: HTTP `POST /getCommonChats`.
    /// - Remark: Generated from `#/paths//getCommonChats/post`.
    public enum PostGetCommonChats {
        public static let id: Swift.String = "post/getCommonChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getCommonChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetCommonChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetCommonChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetCommonChats.Input.Headers
            /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Unique identifier of the target user
                    ///   - offsetChatId: Chat identifier to return chats from.
                    public init(
                        userId: Swift.Int,
                        offsetChatId: Swift.Int? = nil
                    ) {
                        self.userId = userId
                        self.offsetChatId = offsetChatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case offsetChatId = "offset_chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetCommonChats.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostGetCommonChats.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct OffsetChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offsetChatId(OpenAPIRuntime.MultipartPart<Operations.PostGetCommonChats.Input.Body.MultipartFormPayload.OffsetChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetCommonChats.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Chat identifier to return chats from.
                    ///
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/json/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Unique identifier of the target user
                    ///   - offsetChatId: Chat identifier to return chats from.
                    public init(
                        userId: Swift.Int,
                        offsetChatId: Swift.Int? = nil
                    ) {
                        self.userId = userId
                        self.offsetChatId = offsetChatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case offsetChatId = "offset_chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getCommonChats/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetCommonChats.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetCommonChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetCommonChats.Input.Headers = .init(),
                body: Operations.PostGetCommonChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetCommonChats.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetCommonChats.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetCommonChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetCommonChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCommonChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetCommonChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetCommonChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCommonChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetCommonChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetCommonChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCommonChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetCommonChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetCommonChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error.
    ///
    /// - Remark: HTTP `POST /getInactiveChats`.
    /// - Remark: Generated from `#/paths//getInactiveChats/post`.
    public enum PostGetInactiveChats {
        public static let id: Swift.String = "post/getInactiveChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getInactiveChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetInactiveChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetInactiveChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetInactiveChats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostGetInactiveChats.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetInactiveChats.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetInactiveChats.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetInactiveChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetInactiveChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getInactiveChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetInactiveChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetInactiveChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getInactiveChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetInactiveChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetInactiveChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getInactiveChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetInactiveChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetInactiveChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results.
    ///
    /// - Remark: HTTP `POST /searchPublicChats`.
    /// - Remark: Generated from `#/paths//searchPublicChats/post`.
    public enum PostSearchPublicChats {
        public static let id: Swift.String = "post/searchPublicChats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchPublicChats/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchPublicChats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchPublicChats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSearchPublicChats.Input.Headers
            /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    public init(query: Swift.String) {
                        self.query = query
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                    }
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSearchPublicChats.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/multipartForm/query`.
                    public struct QueryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `QueryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.PostSearchPublicChats.Input.Body.MultipartFormPayload.QueryPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSearchPublicChats.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    public init(query: Swift.String) {
                        self.query = query
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                    }
                }
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/requestBody/content/application\/json`.
                case json(Operations.PostSearchPublicChats.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSearchPublicChats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSearchPublicChats.Input.Headers = .init(),
                body: Operations.PostSearchPublicChats.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Chat]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Chat]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSearchPublicChats.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSearchPublicChats.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchPublicChats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchPublicChats.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchPublicChats/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSearchPublicChats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSearchPublicChats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchPublicChats/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchPublicChats.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchPublicChats.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchPublicChats/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSearchPublicChats.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSearchPublicChats.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Changes the user answer to a poll. A poll in quiz mode can be answered only once. Send an empty array of `option_ids` to retract your vote.
    ///
    /// - Remark: HTTP `POST /setPollAnswer`.
    /// - Remark: Generated from `#/paths//setPollAnswer/post`.
    public enum PostSetPollAnswer {
        public static let id: Swift.String = "post/setPollAnswer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setPollAnswer/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetPollAnswer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetPollAnswer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetPollAnswer.Input.Headers
            /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Identifier of the message containing the poll.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/OptionIdsPayload`.
                    public struct OptionIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/OptionIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `OptionIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_ids`.
                    public typealias OptionIdsPayload = [Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload.OptionIdsPayloadPayload]
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/urlEncodedForm/option_ids`.
                    public var optionIds: Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload.OptionIdsPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the message containing the poll.
                    ///   - optionIds: 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    public init(
                        chatId: Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        optionIds: Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload.OptionIdsPayload
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.optionIds = optionIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case optionIds = "option_ids"
                    }
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetPollAnswer.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids`.
                    public struct OptionIdsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/multipartForm/option_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload.OptionIdsPayload.BodyPayload
                        /// Creates a new `OptionIdsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload.OptionIdsPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case optionIds(OpenAPIRuntime.MultipartPart<Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload.OptionIdsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetPollAnswer.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetPollAnswer.Input.Body.JsonPayload.ChatIdPayload
                    /// Identifier of the message containing the poll.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/OptionIdsPayload`.
                    public struct OptionIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/OptionIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `OptionIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_ids`.
                    public typealias OptionIdsPayload = [Operations.PostSetPollAnswer.Input.Body.JsonPayload.OptionIdsPayloadPayload]
                    /// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    ///
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/json/option_ids`.
                    public var optionIds: Operations.PostSetPollAnswer.Input.Body.JsonPayload.OptionIdsPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the message containing the poll.
                    ///   - optionIds: 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
                    public init(
                        chatId: Operations.PostSetPollAnswer.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        optionIds: Operations.PostSetPollAnswer.Input.Body.JsonPayload.OptionIdsPayload
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.optionIds = optionIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case optionIds = "option_ids"
                    }
                }
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetPollAnswer.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetPollAnswer.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetPollAnswer.Input.Headers = .init(),
                body: Operations.PostSetPollAnswer.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetPollAnswer.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetPollAnswer.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetPollAnswer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetPollAnswer.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPollAnswer/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetPollAnswer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetPollAnswer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPollAnswer/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetPollAnswer.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetPollAnswer.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPollAnswer/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetPollAnswer.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetPollAnswer.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. Join either by chat_id or by invite_link
    ///
    /// Returns `True` on success.
    ///
    /// - Remark: HTTP `POST /joinChat`.
    /// - Remark: Generated from `#/paths//joinChat/post`.
    public enum PostJoinChat {
        public static let id: Swift.String = "post/joinChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/joinChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostJoinChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostJoinChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostJoinChat.Input.Headers
            /// - Remark: Generated from `#/paths/joinChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostJoinChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/urlEncodedForm/invite_link`.
                    public var inviteLink: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - inviteLink: Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    public init(
                        chatId: Operations.PostJoinChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        inviteLink: Swift.String? = nil
                    ) {
                        self.chatId = chatId
                        self.inviteLink = inviteLink
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case inviteLink = "invite_link"
                    }
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostJoinChat.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostJoinChat.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/multipartForm/invite_link`.
                    public struct InviteLinkPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InviteLinkPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inviteLink(OpenAPIRuntime.MultipartPart<Operations.PostJoinChat.Input.Body.MultipartFormPayload.InviteLinkPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostJoinChat.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostJoinChat.Input.Body.JsonPayload.ChatIdPayload?
                    /// Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    ///
                    /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/json/invite_link`.
                    public var inviteLink: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - inviteLink: Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
                    public init(
                        chatId: Operations.PostJoinChat.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        inviteLink: Swift.String? = nil
                    ) {
                        self.chatId = chatId
                        self.inviteLink = inviteLink
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case inviteLink = "invite_link"
                    }
                }
                /// - Remark: Generated from `#/paths/joinChat/POST/requestBody/content/application\/json`.
                case json(Operations.PostJoinChat.Input.Body.JsonPayload)
            }
            public var body: Operations.PostJoinChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostJoinChat.Input.Headers = .init(),
                body: Operations.PostJoinChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/200/content/application\/json`.
                    case json(Operations.PostJoinChat.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostJoinChat.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostJoinChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostJoinChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//joinChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostJoinChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostJoinChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/joinChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/joinChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostJoinChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostJoinChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//joinChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostJoinChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostJoinChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Adds a new member to a chat. Members can't be added to private or secret chats.  Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /addChatMember`.
    /// - Remark: Generated from `#/paths//addChatMember/post`.
    public enum PostAddChatMember {
        public static let id: Swift.String = "post/addChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAddChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostAddChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    public init(
                        chatId: Operations.PostAddChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                    }
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAddChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostAddChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostAddChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAddChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostAddChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    public init(
                        chatId: Operations.PostAddChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                    }
                }
                /// - Remark: Generated from `#/paths/addChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostAddChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAddChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAddChatMember.Input.Headers = .init(),
                body: Operations.PostAddChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAddChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAddChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAddChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAddChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAddChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAddChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if this is a private chats with a bot, a private chat with a user sharing their location, a supergroup, or a channel, since other chats can't be checked by moderators.
    ///
    /// - Remark: HTTP `POST /reportChat`.
    /// - Remark: Generated from `#/paths//reportChat/post`.
    public enum PostReportChat {
        public static let id: Swift.String = "post/reportChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reportChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostReportChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostReportChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostReportChat.Input.Headers
            /// - Remark: Generated from `#/paths/reportChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostReportChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/reason`.
                    public var reason: Swift.String
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/MessageIdsPayload`.
                    public struct MessageIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/MessageIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `MessageIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_ids`.
                    public typealias MessageIdsPayload = [Operations.PostReportChat.Input.Body.UrlEncodedFormPayload.MessageIdsPayloadPayload]
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/urlEncodedForm/message_ids`.
                    public var messageIds: Operations.PostReportChat.Input.Body.UrlEncodedFormPayload.MessageIdsPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - reason: The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///   - messageIds: Identifiers of reported messages.
                    public init(
                        chatId: Operations.PostReportChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        reason: Swift.String,
                        messageIds: Operations.PostReportChat.Input.Body.UrlEncodedFormPayload.MessageIdsPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.reason = reason
                        self.messageIds = messageIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case reason
                        case messageIds = "message_ids"
                    }
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostReportChat.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostReportChat.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/reason`.
                    public struct ReasonPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReasonPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case reason(OpenAPIRuntime.MultipartPart<Operations.PostReportChat.Input.Body.MultipartFormPayload.ReasonPayload>)
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids`.
                    public struct MessageIdsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/multipartForm/message_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.PostReportChat.Input.Body.MultipartFormPayload.MessageIdsPayload.BodyPayload
                        /// Creates a new `MessageIdsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostReportChat.Input.Body.MultipartFormPayload.MessageIdsPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case messageIds(OpenAPIRuntime.MultipartPart<Operations.PostReportChat.Input.Body.MultipartFormPayload.MessageIdsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostReportChat.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostReportChat.Input.Body.JsonPayload.ChatIdPayload
                    /// The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/reason`.
                    public var reason: Swift.String
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/MessageIdsPayload`.
                    public struct MessageIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/MessageIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `MessageIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_ids`.
                    public typealias MessageIdsPayload = [Operations.PostReportChat.Input.Body.JsonPayload.MessageIdsPayloadPayload]
                    /// Identifiers of reported messages.
                    ///
                    /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/json/message_ids`.
                    public var messageIds: Operations.PostReportChat.Input.Body.JsonPayload.MessageIdsPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - reason: The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
                    ///   - messageIds: Identifiers of reported messages.
                    public init(
                        chatId: Operations.PostReportChat.Input.Body.JsonPayload.ChatIdPayload,
                        reason: Swift.String,
                        messageIds: Operations.PostReportChat.Input.Body.JsonPayload.MessageIdsPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.reason = reason
                        self.messageIds = messageIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case reason
                        case messageIds = "message_ids"
                    }
                }
                /// - Remark: Generated from `#/paths/reportChat/POST/requestBody/content/application\/json`.
                case json(Operations.PostReportChat.Input.Body.JsonPayload)
            }
            public var body: Operations.PostReportChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostReportChat.Input.Headers = .init(),
                body: Operations.PostReportChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/200/content/application\/json`.
                    case json(Operations.PostReportChat.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostReportChat.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostReportChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostReportChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//reportChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostReportChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostReportChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reportChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reportChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostReportChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostReportChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//reportChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostReportChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostReportChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Creates a new group, supergroup or channel. Returns the newly created chat.
    ///
    /// - Remark: HTTP `POST /createChat`.
    /// - Remark: Generated from `#/paths//createChat/post`.
    public enum PostCreateChat {
        public static let id: Swift.String = "post/createChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/createChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCreateChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCreateChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostCreateChat.Input.Headers
            /// - Remark: Generated from `#/paths/createChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Title of the new chat; 1-128 characters.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case group = "group"
                        case supergroup = "supergroup"
                        case channel = "channel"
                    }
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload._TypePayload
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/UserIdsPayload`.
                    public struct UserIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/UserIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `UserIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_ids`.
                    public typealias UserIdsPayload = [Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload.UserIdsPayloadPayload]
                    /// May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/user_ids`.
                    public var userIds: Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload.UserIdsPayload?
                    /// Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Title of the new chat; 1-128 characters.
                    ///   - _type: Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///   - userIds: May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///   - description: Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    public init(
                        title: Swift.String,
                        _type: Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload._TypePayload,
                        userIds: Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload.UserIdsPayload? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.title = title
                        self._type = _type
                        self.userIds = userIds
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case _type = "type"
                        case userIds = "user_ids"
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostCreateChat.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostCreateChat.Input.Body.MultipartFormPayload.TitlePayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/type`.
                    public struct _TypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_TypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.PostCreateChat.Input.Body.MultipartFormPayload._TypePayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids`.
                    public struct UserIdsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/user_ids/content/body/value1`.
                            public var value1: Swift.Int?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Swift.Int? = nil) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value1
                                ])
                            }
                        }
                        public var body: Operations.PostCreateChat.Input.Body.MultipartFormPayload.UserIdsPayload.BodyPayload
                        /// Creates a new `UserIdsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostCreateChat.Input.Body.MultipartFormPayload.UserIdsPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case userIds(OpenAPIRuntime.MultipartPart<Operations.PostCreateChat.Input.Body.MultipartFormPayload.UserIdsPayload>)
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/multipartForm/description`.
                    public struct DescriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DescriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.PostCreateChat.Input.Body.MultipartFormPayload.DescriptionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostCreateChat.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Title of the new chat; 1-128 characters.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case group = "group"
                        case supergroup = "supergroup"
                        case channel = "channel"
                    }
                    /// Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/type`.
                    public var _type: Operations.PostCreateChat.Input.Body.JsonPayload._TypePayload
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/UserIdsPayload`.
                    public struct UserIdsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/UserIdsPayload/value1`.
                        public var value1: Swift.Int?
                        /// Creates a new `UserIdsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Swift.Int? = nil) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                        }
                    }
                    /// Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_ids`.
                    public typealias UserIdsPayload = [Operations.PostCreateChat.Input.Body.JsonPayload.UserIdsPayloadPayload]
                    /// Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/user_ids`.
                    public var userIds: Operations.PostCreateChat.Input.Body.JsonPayload.UserIdsPayload?
                    /// Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    ///
                    /// - Remark: Generated from `#/paths/createChat/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Title of the new chat; 1-128 characters.
                    ///   - _type: Type of the new chat, must be any of `group`, `supergroup` or `channel`
                    ///   - userIds: Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
                    ///   - description: Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
                    public init(
                        title: Swift.String,
                        _type: Operations.PostCreateChat.Input.Body.JsonPayload._TypePayload,
                        userIds: Operations.PostCreateChat.Input.Body.JsonPayload.UserIdsPayload? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.title = title
                        self._type = _type
                        self.userIds = userIds
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case _type = "type"
                        case userIds = "user_ids"
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/createChat/POST/requestBody/content/application\/json`.
                case json(Operations.PostCreateChat.Input.Body.JsonPayload)
            }
            public var body: Operations.PostCreateChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostCreateChat.Input.Headers = .init(),
                body: Operations.PostCreateChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Chat
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Chat
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/200/content/application\/json`.
                    case json(Operations.PostCreateChat.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostCreateChat.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCreateChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCreateChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostCreateChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostCreateChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCreateChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCreateChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostCreateChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostCreateChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchMessages`.
    /// - Remark: Generated from `#/paths//searchMessages/post`.
    public enum PostSearchMessages {
        public static let id: Swift.String = "post/searchMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSearchMessages.Input.Headers
            /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// Filter for chat type in search result. Must be one of `private`, `group` or `channel`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/chat_filter`.
                    public var chatFilter: Swift.String?
                    /// The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_date`.
                    public var offsetDate: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/offset_message_id`.
                    public var offsetMessageId: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case chatPhoto = "chat_photo"
                        case document = "document"
                        case photo = "photo"
                        case photoAndVideo = "photo_and_video"
                        case url = "url"
                        case video = "video"
                        case videoNote = "video_note"
                        case voiceAndVideoNote = "voice_and_video_note"
                        case voiceNote = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.PostSearchMessages.Input.Body.UrlEncodedFormPayload.FilterPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    ///   - chatFilter: Filter for chat type in search result. Must be one of `private`, `group` or `channel`
                    ///   - offsetDate: The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///   - offsetChatId: The chat identifier of the last found message, or 0 for the first request.
                    ///   - offsetMessageId: The chat identifier of the last found message, or 0 for the first request.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        query: Swift.String,
                        chatFilter: Swift.String? = nil,
                        offsetDate: Swift.Int? = nil,
                        offsetChatId: Swift.Int? = nil,
                        offsetMessageId: Swift.Int? = nil,
                        filter: Operations.PostSearchMessages.Input.Body.UrlEncodedFormPayload.FilterPayload? = nil
                    ) {
                        self.query = query
                        self.chatFilter = chatFilter
                        self.offsetDate = offsetDate
                        self.offsetChatId = offsetChatId
                        self.offsetMessageId = offsetMessageId
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case chatFilter = "chat_filter"
                        case offsetDate = "offset_date"
                        case offsetChatId = "offset_chat_id"
                        case offsetMessageId = "offset_message_id"
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSearchMessages.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/query`.
                    public struct QueryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `QueryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.QueryPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/only_in_channels`.
                    public struct OnlyInChannelsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OnlyInChannelsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case onlyInChannels(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.OnlyInChannelsPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_date`.
                    public struct OffsetDatePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetDatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offsetDate(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.OffsetDatePayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_chat_id`.
                    public struct OffsetChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offsetChatId(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.OffsetChatIdPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/offset_message_id`.
                    public struct OffsetMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offsetMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.OffsetMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/multipartForm/filter`.
                    public struct FilterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FilterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.PostSearchMessages.Input.Body.MultipartFormPayload.FilterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSearchMessages.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// Search for messages only in channels
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/only_in_channels`.
                    public var onlyInChannels: Swift.Bool?
                    /// The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_date`.
                    public var offsetDate: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_chat_id`.
                    public var offsetChatId: Swift.Int?
                    /// The chat identifier of the last found message, or 0 for the first request.
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/offset_message_id`.
                    public var offsetMessageId: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case chatPhoto = "chat_photo"
                        case document = "document"
                        case photo = "photo"
                        case photoAndVideo = "photo_and_video"
                        case url = "url"
                        case video = "video"
                        case videoNote = "video_note"
                        case voiceAndVideoNote = "voice_and_video_note"
                        case voiceNote = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/json/filter`.
                    public var filter: Operations.PostSearchMessages.Input.Body.JsonPayload.FilterPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query: Query to search for.
                    ///   - onlyInChannels: Search for messages only in channels
                    ///   - offsetDate: The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
                    ///   - offsetChatId: The chat identifier of the last found message, or 0 for the first request.
                    ///   - offsetMessageId: The chat identifier of the last found message, or 0 for the first request.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        query: Swift.String,
                        onlyInChannels: Swift.Bool? = nil,
                        offsetDate: Swift.Int? = nil,
                        offsetChatId: Swift.Int? = nil,
                        offsetMessageId: Swift.Int? = nil,
                        filter: Operations.PostSearchMessages.Input.Body.JsonPayload.FilterPayload? = nil
                    ) {
                        self.query = query
                        self.onlyInChannels = onlyInChannels
                        self.offsetDate = offsetDate
                        self.offsetChatId = offsetChatId
                        self.offsetMessageId = offsetMessageId
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query
                        case onlyInChannels = "only_in_channels"
                        case offsetDate = "offset_date"
                        case offsetChatId = "offset_chat_id"
                        case offsetMessageId = "offset_message_id"
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchMessages/POST/requestBody/content/application\/json`.
                case json(Operations.PostSearchMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSearchMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSearchMessages.Input.Headers = .init(),
                body: Operations.PostSearchMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSearchMessages.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSearchMessages.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSearchMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSearchMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSearchMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSearchMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance the number of returned messages is chosen by the library.
    ///
    /// - Remark: HTTP `POST /searchChatMessages`.
    /// - Remark: Generated from `#/paths//searchChatMessages/post`.
    public enum PostSearchChatMessages {
        public static let id: Swift.String = "post/searchChatMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/searchChatMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchChatMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSearchChatMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSearchChatMessages.Input.Headers
            /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSearchChatMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/query`.
                    public var query: Swift.String
                    /// If set, only messages sent by the specified sender will be returned
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/from_user_id`.
                    public var fromUserId: Swift.Int?
                    /// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/from_message_id`.
                    public var fromMessageId: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case call = "call"
                        case chatPhoto = "chat_photo"
                        case document = "document"
                        case failedToSend = "failed_to_send"
                        case mention = "mention"
                        case missedCall = "missed_call"
                        case photo = "photo"
                        case photoAndVideo = "photo_and_video"
                        case pinnedunreadMention = "pinnedunread_mention"
                        case url = "url"
                        case video = "video"
                        case videoNote = "video_note"
                        case voiceAndVideoNote = "voice_and_video_note"
                        case voiceNote = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/urlEncodedForm/filter`.
                    public var filter: Operations.PostSearchChatMessages.Input.Body.UrlEncodedFormPayload.FilterPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - query: Query to search for.
                    ///   - fromUserId: If set, only messages sent by the specified sender will be returned
                    ///   - fromMessageId: Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        chatId: Operations.PostSearchChatMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        query: Swift.String,
                        fromUserId: Swift.Int? = nil,
                        fromMessageId: Swift.Int? = nil,
                        filter: Operations.PostSearchChatMessages.Input.Body.UrlEncodedFormPayload.FilterPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.query = query
                        self.fromUserId = fromUserId
                        self.fromMessageId = fromMessageId
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case query
                        case fromUserId = "from_user_id"
                        case fromMessageId = "from_message_id"
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSearchChatMessages.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/query`.
                    public struct QueryPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `QueryPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case query(OpenAPIRuntime.MultipartPart<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload.QueryPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/from_user_id`.
                    public struct FromUserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FromUserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fromUserId(OpenAPIRuntime.MultipartPart<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload.FromUserIdPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/from_message_id`.
                    public struct FromMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FromMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fromMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload.FromMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/multipartForm/filter`.
                    public struct FilterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FilterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case filter(OpenAPIRuntime.MultipartPart<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload.FilterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSearchChatMessages.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSearchChatMessages.Input.Body.JsonPayload.ChatIdPayload
                    /// Query to search for.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/query`.
                    public var query: Swift.String
                    /// If set, only messages sent by the specified sender will be returned
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/from_user_id`.
                    public var fromUserId: Swift.Int?
                    /// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/from_message_id`.
                    public var fromMessageId: Swift.Int?
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/filter`.
                    @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case animation = "animation"
                        case audio = "audio"
                        case call = "call"
                        case chatPhoto = "chat_photo"
                        case document = "document"
                        case failedToSend = "failed_to_send"
                        case mention = "mention"
                        case missedCall = "missed_call"
                        case photo = "photo"
                        case photoAndVideo = "photo_and_video"
                        case pinnedunreadMention = "pinnedunread_mention"
                        case url = "url"
                        case video = "video"
                        case videoNote = "video_note"
                        case voiceAndVideoNote = "voice_and_video_note"
                        case voiceNote = "voice_note"
                    }
                    /// Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    ///
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/json/filter`.
                    public var filter: Operations.PostSearchChatMessages.Input.Body.JsonPayload.FilterPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - query: Query to search for.
                    ///   - fromUserId: If set, only messages sent by the specified sender will be returned
                    ///   - fromMessageId: Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
                    ///   - filter: Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
                    public init(
                        chatId: Operations.PostSearchChatMessages.Input.Body.JsonPayload.ChatIdPayload,
                        query: Swift.String,
                        fromUserId: Swift.Int? = nil,
                        fromMessageId: Swift.Int? = nil,
                        filter: Operations.PostSearchChatMessages.Input.Body.JsonPayload.FilterPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.query = query
                        self.fromUserId = fromUserId
                        self.fromMessageId = fromMessageId
                        self.filter = filter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case query
                        case fromUserId = "from_user_id"
                        case fromMessageId = "from_message_id"
                        case filter
                    }
                }
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/requestBody/content/application\/json`.
                case json(Operations.PostSearchChatMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSearchChatMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSearchChatMessages.Input.Headers = .init(),
                body: Operations.PostSearchChatMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSearchChatMessages.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSearchChatMessages.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchChatMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchChatMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchChatMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSearchChatMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSearchChatMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/searchChatMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSearchChatMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSearchChatMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//searchChatMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSearchChatMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSearchChatMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    ///
    /// - Remark: HTTP `POST /getCallbackQueryAnswer`.
    /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post`.
    public enum PostGetCallbackQueryAnswer {
        public static let id: Swift.String = "post/getCallbackQueryAnswer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetCallbackQueryAnswer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetCallbackQueryAnswer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetCallbackQueryAnswer.Input.Headers
            /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetCallbackQueryAnswer.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Data that was attached to the callback button.
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/urlEncodedForm/callback_data`.
                    public var callbackData: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - callbackData: Data that was attached to the callback button.
                    public init(
                        chatId: Operations.PostGetCallbackQueryAnswer.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        callbackData: Swift.String
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.callbackData = callbackData
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case callbackData = "callback_data"
                    }
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetCallbackQueryAnswer.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetCallbackQueryAnswer.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostGetCallbackQueryAnswer.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/multipartForm/callback_data`.
                    public struct CallbackDataPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CallbackDataPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case callbackData(OpenAPIRuntime.MultipartPart<Operations.PostGetCallbackQueryAnswer.Input.Body.MultipartFormPayload.CallbackDataPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetCallbackQueryAnswer.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetCallbackQueryAnswer.Input.Body.JsonPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Data that was attached to the callback button.
                    ///
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/json/callback_data`.
                    public var callbackData: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - callbackData: Data that was attached to the callback button.
                    public init(
                        chatId: Operations.PostGetCallbackQueryAnswer.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        callbackData: Swift.String
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.callbackData = callbackData
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case callbackData = "callback_data"
                    }
                }
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetCallbackQueryAnswer.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetCallbackQueryAnswer.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetCallbackQueryAnswer.Input.Headers = .init(),
                body: Operations.PostGetCallbackQueryAnswer.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.CallbackQueryAnswer
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.CallbackQueryAnswer
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetCallbackQueryAnswer.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetCallbackQueryAnswer.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetCallbackQueryAnswer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetCallbackQueryAnswer.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetCallbackQueryAnswer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetCallbackQueryAnswer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getCallbackQueryAnswer/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetCallbackQueryAnswer.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetCallbackQueryAnswer.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getCallbackQueryAnswer/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetCallbackQueryAnswer.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetCallbackQueryAnswer.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Deletes all messages in the chat. 
    ///
    /// - Remark: HTTP `POST /deleteChatHistory`.
    /// - Remark: Generated from `#/paths//deleteChatHistory/post`.
    public enum PostDeleteChatHistory {
        public static let id: Swift.String = "post/deleteChatHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatHistory/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteChatHistory.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostDeleteChatHistory.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Pass true to try to delete chat history for all users.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/for_everyone`.
                    public var forEveryone: Swift.Bool?
                    /// Pass true if the chat should be removed from the chat list.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/urlEncodedForm/remove_from_chat_list`.
                    public var removeFromChatList: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - forEveryone: Pass true to try to delete chat history for all users.
                    ///   - removeFromChatList: Pass true if the chat should be removed from the chat list.
                    public init(
                        chatId: Operations.PostDeleteChatHistory.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        forEveryone: Swift.Bool? = nil,
                        removeFromChatList: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.forEveryone = forEveryone
                        self.removeFromChatList = removeFromChatList
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case forEveryone = "for_everyone"
                        case removeFromChatList = "remove_from_chat_list"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteChatHistory.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteChatHistory.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/for_everyone`.
                    public struct ForEveryonePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ForEveryonePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case forEveryone(OpenAPIRuntime.MultipartPart<Operations.PostDeleteChatHistory.Input.Body.MultipartFormPayload.ForEveryonePayload>)
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/multipartForm/remove_from_chat_list`.
                    public struct RemoveFromChatListPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `RemoveFromChatListPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case removeFromChatList(OpenAPIRuntime.MultipartPart<Operations.PostDeleteChatHistory.Input.Body.MultipartFormPayload.RemoveFromChatListPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteChatHistory.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostDeleteChatHistory.Input.Body.JsonPayload.ChatIdPayload
                    /// Pass true to try to delete chat history for all users.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/for_everyone`.
                    public var forEveryone: Swift.Bool?
                    /// Pass true if the chat should be removed from the chat list.
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/json/remove_from_chat_list`.
                    public var removeFromChatList: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - forEveryone: Pass true to try to delete chat history for all users.
                    ///   - removeFromChatList: Pass true if the chat should be removed from the chat list.
                    public init(
                        chatId: Operations.PostDeleteChatHistory.Input.Body.JsonPayload.ChatIdPayload,
                        forEveryone: Swift.Bool? = nil,
                        removeFromChatList: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.forEveryone = forEveryone
                        self.removeFromChatList = removeFromChatList
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case forEveryone = "for_everyone"
                        case removeFromChatList = "remove_from_chat_list"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteChatHistory.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteChatHistory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteChatHistory.Input.Headers = .init(),
                body: Operations.PostDeleteChatHistory.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteChatHistory.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteChatHistory.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatHistory.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatHistory/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteChatHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteChatHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatHistory/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatHistory.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatHistory.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatHistory/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteChatHistory.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteChatHistory.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order. Returns an array of `Message` on success.
    ///
    /// - Remark: HTTP `POST /getScheduledMessages`.
    /// - Remark: Generated from `#/paths//getScheduledMessages/post`.
    public enum PostGetScheduledMessages {
        public static let id: Swift.String = "post/getScheduledMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getScheduledMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetScheduledMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetScheduledMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetScheduledMessages.Input.Headers
            /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetScheduledMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetScheduledMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetScheduledMessages.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetScheduledMessages.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetScheduledMessages.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetScheduledMessages.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetScheduledMessages.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetScheduledMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetScheduledMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetScheduledMessages.Input.Headers = .init(),
                body: Operations.PostGetScheduledMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetScheduledMessages.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetScheduledMessages.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetScheduledMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetScheduledMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getScheduledMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetScheduledMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetScheduledMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getScheduledMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetScheduledMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetScheduledMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getScheduledMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetScheduledMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetScheduledMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// *ONLY FOR USERS*
    ///
    /// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed. Returns `true` on success.
    ///
    /// - Remark: HTTP `POST /editMessageScheduling`.
    /// - Remark: Generated from `#/paths//editMessageScheduling/post`.
    public enum PostEditMessageScheduling {
        public static let id: Swift.String = "post/editMessageScheduling"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageScheduling/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageScheduling.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageScheduling.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageScheduling.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostEditMessageScheduling.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*. Message IDs for scheduled messages are negative.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostEditMessageScheduling.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*. Message IDs for scheduled messages are negative.
                    ///   - sendAt: Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostEditMessageScheduling.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        sendAt: Operations.PostEditMessageScheduling.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEditMessageScheduling.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageScheduling.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageScheduling.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageScheduling.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageScheduling.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostEditMessageScheduling.Input.Body.JsonPayload.ChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostEditMessageScheduling.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - sendAt: Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostEditMessageScheduling.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        sendAt: Operations.PostEditMessageScheduling.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/requestBody/content/application\/json`.
                case json(Operations.PostEditMessageScheduling.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEditMessageScheduling.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageScheduling.Input.Headers = .init(),
                body: Operations.PostEditMessageScheduling.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageScheduling.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageScheduling.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageScheduling.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageScheduling.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageScheduling/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageScheduling.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageScheduling.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageScheduling/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageScheduling.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageScheduling.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageScheduling/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageScheduling.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageScheduling.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns all configured proxies. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /getProxies`.
    /// - Remark: Generated from `#/paths//getProxies/post`.
    public enum PostGetProxies {
        public static let id: Swift.String = "post/getProxies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getProxies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetProxies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetProxies.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetProxies.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostGetProxies.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Proxy]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Proxy]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetProxies.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetProxies.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetProxies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetProxies.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getProxies/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetProxies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetProxies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getProxies/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getProxies/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetProxies.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetProxies.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getProxies/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetProxies.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetProxies.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a proxy.
    ///
    /// - Remark: HTTP `POST /addProxy`.
    /// - Remark: Generated from `#/paths//addProxy/post`.
    public enum PostAddProxy {
        public static let id: Swift.String = "post/addProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAddProxy.Input.Headers
            /// - Remark: Generated from `#/paths/addProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Server hostname or IP address to reach the proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/server`.
                    public var server: Swift.String
                    /// TCP port where the server is listening for incomming connections.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/port`.
                    public var port: Swift.Int
                    /// Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Swift.String
                    /// Username used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/username`.
                    public var username: Swift.String?
                    /// Password used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/password`.
                    public var password: Swift.String?
                    /// Secret used to authenticate against an MTProto proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/secret`.
                    public var secret: Swift.String?
                    /// Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/urlEncodedForm/http_only`.
                    public var httpOnly: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - server: Server hostname or IP address to reach the proxy server.
                    ///   - port: TCP port where the server is listening for incomming connections.
                    ///   - _type: Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///   - username: Username used to authenticate against a Socks5/Http proxy.
                    ///   - password: Password used to authenticate against a Socks5/Http proxy.
                    ///   - secret: Secret used to authenticate against an MTProto proxy.
                    ///   - httpOnly: Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    public init(
                        server: Swift.String,
                        port: Swift.Int,
                        _type: Swift.String,
                        username: Swift.String? = nil,
                        password: Swift.String? = nil,
                        secret: Swift.String? = nil,
                        httpOnly: Swift.Bool? = nil
                    ) {
                        self.server = server
                        self.port = port
                        self._type = _type
                        self.username = username
                        self.password = password
                        self.secret = secret
                        self.httpOnly = httpOnly
                    }
                    public enum CodingKeys: String, CodingKey {
                        case server
                        case port
                        case _type = "type"
                        case username
                        case password
                        case secret
                        case httpOnly = "http_only"
                    }
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAddProxy.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/server`.
                    public struct ServerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ServerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case server(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.ServerPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/port`.
                    public struct PortPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PortPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case port(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.PortPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/type`.
                    public struct _TypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_TypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload._TypePayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/username`.
                    public struct UsernamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UsernamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case username(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.UsernamePayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/password`.
                    public struct PasswordPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PasswordPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case password(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.PasswordPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/secret`.
                    public struct SecretPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SecretPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case secret(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.SecretPayload>)
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/multipartForm/http_only`.
                    public struct HttpOnlyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HttpOnlyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case httpOnly(OpenAPIRuntime.MultipartPart<Operations.PostAddProxy.Input.Body.MultipartFormPayload.HttpOnlyPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAddProxy.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Server hostname or IP address to reach the proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/server`.
                    public var server: Swift.String
                    /// TCP port where the server is listening for incomming connections.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/port`.
                    public var port: Swift.Int
                    /// Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/type`.
                    public var _type: Swift.String
                    /// Username used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/username`.
                    public var username: Swift.String?
                    /// Password used to authenticate against a Socks5/Http proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// Secret used to authenticate against an MTProto proxy.
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/secret`.
                    public var secret: Swift.String?
                    /// Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    ///
                    /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/json/http_only`.
                    public var httpOnly: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - server: Server hostname or IP address to reach the proxy server.
                    ///   - port: TCP port where the server is listening for incomming connections.
                    ///   - _type: Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
                    ///   - username: Username used to authenticate against a Socks5/Http proxy.
                    ///   - password: Password used to authenticate against a Socks5/Http proxy.
                    ///   - secret: Secret used to authenticate against an MTProto proxy.
                    ///   - httpOnly: Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
                    public init(
                        server: Swift.String,
                        port: Swift.Int,
                        _type: Swift.String,
                        username: Swift.String? = nil,
                        password: Swift.String? = nil,
                        secret: Swift.String? = nil,
                        httpOnly: Swift.Bool? = nil
                    ) {
                        self.server = server
                        self.port = port
                        self._type = _type
                        self.username = username
                        self.password = password
                        self.secret = secret
                        self.httpOnly = httpOnly
                    }
                    public enum CodingKeys: String, CodingKey {
                        case server
                        case port
                        case _type = "type"
                        case username
                        case password
                        case secret
                        case httpOnly = "http_only"
                    }
                }
                /// - Remark: Generated from `#/paths/addProxy/POST/requestBody/content/application\/json`.
                case json(Operations.PostAddProxy.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAddProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAddProxy.Input.Headers = .init(),
                body: Operations.PostAddProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Proxy
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Proxy
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAddProxy.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAddProxy.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAddProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAddProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAddProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAddProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a proxy.
    ///
    /// - Remark: HTTP `POST /deleteProxy`.
    /// - Remark: Generated from `#/paths//deleteProxy/post`.
    public enum PostDeleteProxy {
        public static let id: Swift.String = "post/deleteProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteProxy.Input.Headers
            /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteProxy.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct ProxyIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProxyIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxyId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteProxy.Input.Body.MultipartFormPayload.ProxyIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteProxy.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/json/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteProxy/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteProxy.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteProxy.Input.Headers = .init(),
                body: Operations.PostDeleteProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteProxy.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteProxy.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Enables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /enableProxy`.
    /// - Remark: Generated from `#/paths//enableProxy/post`.
    public enum PostEnableProxy {
        public static let id: Swift.String = "post/enableProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/enableProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEnableProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEnableProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEnableProxy.Input.Headers
            /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEnableProxy.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct ProxyIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProxyIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxyId(OpenAPIRuntime.MultipartPart<Operations.PostEnableProxy.Input.Body.MultipartFormPayload.ProxyIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEnableProxy.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/json/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/enableProxy/POST/requestBody/content/application\/json`.
                case json(Operations.PostEnableProxy.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEnableProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEnableProxy.Input.Headers = .init(),
                body: Operations.PostEnableProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEnableProxy.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEnableProxy.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEnableProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEnableProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//enableProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEnableProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEnableProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enableProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enableProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEnableProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEnableProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//enableProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEnableProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEnableProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disables the specified proxy. Takes immediate effect.
    ///
    /// - Remark: HTTP `POST /disableProxy`.
    /// - Remark: Generated from `#/paths//disableProxy/post`.
    public enum PostDisableProxy {
        public static let id: Swift.String = "post/disableProxy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/disableProxy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDisableProxy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDisableProxy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDisableProxy.Input.Headers
            /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/urlEncodedForm/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDisableProxy.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/multipartForm/proxy_id`.
                    public struct ProxyIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProxyIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proxyId(OpenAPIRuntime.MultipartPart<Operations.PostDisableProxy.Input.Body.MultipartFormPayload.ProxyIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDisableProxy.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The id that uniquely identifies that proxy server.
                    ///
                    /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/json/proxy_id`.
                    public var proxyId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - proxyId: The id that uniquely identifies that proxy server.
                    public init(proxyId: Swift.Int) {
                        self.proxyId = proxyId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case proxyId = "proxy_id"
                    }
                }
                /// - Remark: Generated from `#/paths/disableProxy/POST/requestBody/content/application\/json`.
                case json(Operations.PostDisableProxy.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDisableProxy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDisableProxy.Input.Headers = .init(),
                body: Operations.PostDisableProxy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDisableProxy.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDisableProxy.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDisableProxy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDisableProxy.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//disableProxy/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDisableProxy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDisableProxy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/disableProxy/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/disableProxy/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDisableProxy.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDisableProxy.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//disableProxy/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDisableProxy.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDisableProxy.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
    ///
    /// - Remark: HTTP `POST /getUpdates`.
    /// - Remark: Generated from `#/paths//getUpdates/post`.
    public enum PostGetUpdates {
        public static let id: Swift.String = "post/getUpdates"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getUpdates/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetUpdates.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetUpdates.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetUpdates.Input.Headers
            /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/timeout`.
                    public var timeout: Swift.Int?
                    /// A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    ///
                    /// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/urlEncodedForm/allowed_updates`.
                    public var allowedUpdates: [Swift.String]?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///   - limit: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///   - timeout: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///   - allowedUpdates: A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    public init(
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil,
                        timeout: Swift.Int? = nil,
                        allowedUpdates: [Swift.String]? = nil
                    ) {
                        self.offset = offset
                        self.limit = limit
                        self.timeout = timeout
                        self.allowedUpdates = allowedUpdates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset
                        case limit
                        case timeout
                        case allowedUpdates = "allowed_updates"
                    }
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetUpdates.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/offset`.
                    public struct OffsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.PostGetUpdates.Input.Body.MultipartFormPayload.OffsetPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/limit`.
                    public struct LimitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LimitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.PostGetUpdates.Input.Body.MultipartFormPayload.LimitPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/timeout`.
                    public struct TimeoutPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TimeoutPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case timeout(OpenAPIRuntime.MultipartPart<Operations.PostGetUpdates.Input.Body.MultipartFormPayload.TimeoutPayload>)
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/multipartForm/allowed_updates`.
                    public struct AllowedUpdatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowedUpdatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowedUpdates(OpenAPIRuntime.MultipartPart<Operations.PostGetUpdates.Input.Body.MultipartFormPayload.AllowedUpdatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetUpdates.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/timeout`.
                    public var timeout: Swift.Int?
                    /// A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    ///
                    /// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
                    ///
                    /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/json/allowed_updates`.
                    public var allowedUpdates: [Swift.String]?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - offset: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
                    ///   - limit: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///   - timeout: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
                    ///   - allowedUpdates: A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  
                    public init(
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil,
                        timeout: Swift.Int? = nil,
                        allowedUpdates: [Swift.String]? = nil
                    ) {
                        self.offset = offset
                        self.limit = limit
                        self.timeout = timeout
                        self.allowedUpdates = allowedUpdates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offset
                        case limit
                        case timeout
                        case allowedUpdates = "allowed_updates"
                    }
                }
                /// - Remark: Generated from `#/paths/getUpdates/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetUpdates.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetUpdates.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetUpdates.Input.Headers = .init(),
                body: Operations.PostGetUpdates.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Update]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Update]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetUpdates.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetUpdates.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetUpdates.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetUpdates.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUpdates/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetUpdates.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetUpdates.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUpdates/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUpdates/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetUpdates.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetUpdates.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUpdates/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetUpdates.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetUpdates.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
    ///
    /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
    ///
    /// - Remark: HTTP `POST /setWebhook`.
    /// - Remark: Generated from `#/paths//setWebhook/post`.
    public enum PostSetWebhook {
        public static let id: Swift.String = "post/setWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setWebhook/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/url`.
                    public struct UrlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UrlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case url(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.UrlPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/certificate`.
                    public struct CertificatePayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `CertificatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case certificate(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.CertificatePayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/ip_address`.
                    public struct IpAddressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IpAddressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ipAddress(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.IpAddressPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/max_connections`.
                    public struct MaxConnectionsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MaxConnectionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case maxConnections(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.MaxConnectionsPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/allowed_updates`.
                    public struct AllowedUpdatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowedUpdatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowedUpdates(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.AllowedUpdatesPayload>)
                    /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/multipartForm/drop_pending_updates`.
                    public struct DropPendingUpdatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DropPendingUpdatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case dropPendingUpdates(OpenAPIRuntime.MultipartPart<Operations.PostSetWebhook.Input.Body.MultipartFormPayload.DropPendingUpdatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setWebhook/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetWebhook.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSetWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetWebhook.Input.Headers = .init(),
                body: Operations.PostSetWebhook.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetWebhook.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetWebhook.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetWebhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetWebhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setWebhook/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetWebhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetWebhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setWebhook/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setWebhook/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetWebhook.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetWebhook.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setWebhook/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetWebhook.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetWebhook.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteWebhook`.
    /// - Remark: Generated from `#/paths//deleteWebhook/post`.
    public enum PostDeleteWebhook {
        public static let id: Swift.String = "post/deleteWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteWebhook/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Pass *True* to drop all pending updates
                    ///
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/urlEncodedForm/drop_pending_updates`.
                    public var dropPendingUpdates: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - dropPendingUpdates: Pass *True* to drop all pending updates
                    public init(dropPendingUpdates: Swift.Bool? = nil) {
                        self.dropPendingUpdates = dropPendingUpdates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dropPendingUpdates = "drop_pending_updates"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteWebhook.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/multipartForm/drop_pending_updates`.
                    public struct DropPendingUpdatesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DropPendingUpdatesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case dropPendingUpdates(OpenAPIRuntime.MultipartPart<Operations.PostDeleteWebhook.Input.Body.MultipartFormPayload.DropPendingUpdatesPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteWebhook.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Pass *True* to drop all pending updates
                    ///
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/json/drop_pending_updates`.
                    public var dropPendingUpdates: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dropPendingUpdates: Pass *True* to drop all pending updates
                    public init(dropPendingUpdates: Swift.Bool? = nil) {
                        self.dropPendingUpdates = dropPendingUpdates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dropPendingUpdates = "drop_pending_updates"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteWebhook.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteWebhook.Input.Headers = .init(),
                body: Operations.PostDeleteWebhook.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteWebhook.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteWebhook.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteWebhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteWebhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteWebhook/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteWebhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteWebhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteWebhook/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteWebhook.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteWebhook.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteWebhook/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteWebhook.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteWebhook.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
    ///
    /// - Remark: HTTP `POST /getWebhookInfo`.
    /// - Remark: Generated from `#/paths//getWebhookInfo/post`.
    public enum PostGetWebhookInfo {
        public static let id: Swift.String = "post/getWebhookInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getWebhookInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetWebhookInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetWebhookInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetWebhookInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostGetWebhookInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.WebhookInfo
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.WebhookInfo
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetWebhookInfo.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetWebhookInfo.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetWebhookInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetWebhookInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getWebhookInfo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetWebhookInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetWebhookInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getWebhookInfo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetWebhookInfo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetWebhookInfo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getWebhookInfo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetWebhookInfo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetWebhookInfo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
    ///
    /// - Remark: HTTP `POST /getMe`.
    /// - Remark: Generated from `#/paths//getMe/post`.
    public enum PostGetMe {
        public static let id: Swift.String = "post/getMe"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMe/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMe.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMe.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetMe.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostGetMe.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.User
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.User
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetMe.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetMe.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMe.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMe.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMe/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetMe.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetMe.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMe/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMe/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMe.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMe.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMe/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetMe.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetMe.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /logOut`.
    /// - Remark: Generated from `#/paths//logOut/post`.
    public enum PostLogOut {
        public static let id: Swift.String = "post/logOut"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/logOut/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLogOut.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLogOut.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostLogOut.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostLogOut.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/200/content/application\/json`.
                    case json(Operations.PostLogOut.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLogOut.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLogOut.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostLogOut.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//logOut/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostLogOut.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostLogOut.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/logOut/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/logOut/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLogOut.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostLogOut.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//logOut/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostLogOut.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostLogOut.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
    ///
    /// - Remark: HTTP `POST /close`.
    /// - Remark: Generated from `#/paths//close/post`.
    public enum PostClose {
        public static let id: Swift.String = "post/close"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/close/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostClose.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostClose.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostClose.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostClose.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/close/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/close/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/close/POST/responses/200/content/application\/json`.
                    case json(Operations.PostClose.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostClose.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostClose.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostClose.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//close/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostClose.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostClose.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/close/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/close/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostClose.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostClose.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//close/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostClose.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostClose.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendMessage`.
    /// - Remark: Generated from `#/paths//sendMessage/post`.
    public enum PostSendMessage {
        public static let id: Swift.String = "post/sendMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendMessage.Input.Headers
            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Text of the message to be sent, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/disable_web_page_preview`.
                    public var disableWebPagePreview: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - text: Text of the message to be sent, 1-4096 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disableWebPagePreview: Disables link previews for links in this message
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        text: Swift.String,
                        parseMode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disableWebPagePreview: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.text = text
                        self.parseMode = parseMode
                        self.entities = entities
                        self.disableWebPagePreview = disableWebPagePreview
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case text
                        case parseMode = "parse_mode"
                        case entities
                        case disableWebPagePreview = "disable_web_page_preview"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/text`.
                    public struct TextPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TextPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.TextPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/entities`.
                    public struct EntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `EntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case entities(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.EntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/disable_web_page_preview`.
                    public struct DisableWebPagePreviewPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableWebPagePreviewPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableWebPagePreview(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.DisableWebPagePreviewPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendMessage.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Text of the message to be sent, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/disable_web_page_preview`.
                    public var disableWebPagePreview: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendMessage.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostSendMessage.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - text: Text of the message to be sent, 1-4096 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disableWebPagePreview: Disables link previews for links in this message
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostSendMessage.Input.Body.JsonPayload.ChatIdPayload,
                        text: Swift.String,
                        parseMode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disableWebPagePreview: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendMessage.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendMessage.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.text = text
                        self.parseMode = parseMode
                        self.entities = entities
                        self.disableWebPagePreview = disableWebPagePreview
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case text
                        case parseMode = "parse_mode"
                        case entities
                        case disableWebPagePreview = "disable_web_page_preview"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendMessage.Input.Headers = .init(),
                body: Operations.PostSendMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /forwardMessage`.
    /// - Remark: Generated from `#/paths//forwardMessage/post`.
    public enum PostForwardMessage {
        public static let id: Swift.String = "post/forwardMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/forwardMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostForwardMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostForwardMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostForwardMessage.Input.Headers
            /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public struct FromChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public var fromChatId: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.FromChatIdPayload
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - fromChatId: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        fromChatId: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.FromChatIdPayload,
                        disableNotification: Swift.Bool? = nil,
                        messageId: Swift.Int,
                        sendAt: Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.fromChatId = fromChatId
                        self.disableNotification = disableNotification
                        self.messageId = messageId
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case fromChatId = "from_chat_id"
                        case disableNotification = "disable_notification"
                        case messageId = "message_id"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostForwardMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostForwardMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/from_chat_id`.
                    public struct FromChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fromChatId(OpenAPIRuntime.MultipartPart<Operations.PostForwardMessage.Input.Body.MultipartFormPayload.FromChatIdPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostForwardMessage.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostForwardMessage.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostForwardMessage.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostForwardMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostForwardMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id`.
                    public struct FromChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/from_chat_id`.
                    public var fromChatId: Operations.PostForwardMessage.Input.Body.JsonPayload.FromChatIdPayload
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostForwardMessage.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - fromChatId: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostForwardMessage.Input.Body.JsonPayload.ChatIdPayload,
                        fromChatId: Operations.PostForwardMessage.Input.Body.JsonPayload.FromChatIdPayload,
                        disableNotification: Swift.Bool? = nil,
                        messageId: Swift.Int,
                        sendAt: Operations.PostForwardMessage.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.fromChatId = fromChatId
                        self.disableNotification = disableNotification
                        self.messageId = messageId
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case fromChatId = "from_chat_id"
                        case disableNotification = "disable_notification"
                        case messageId = "message_id"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/forwardMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostForwardMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostForwardMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostForwardMessage.Input.Headers = .init(),
                body: Operations.PostForwardMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostForwardMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostForwardMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostForwardMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostForwardMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//forwardMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostForwardMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostForwardMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/forwardMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostForwardMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostForwardMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//forwardMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostForwardMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostForwardMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
    ///
    /// - Remark: HTTP `POST /copyMessage`.
    /// - Remark: Generated from `#/paths//copyMessage/post`.
    public enum PostCopyMessage {
        public static let id: Swift.String = "post/copyMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/copyMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCopyMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCopyMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostCopyMessage.Input.Headers
            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public struct FromChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/from_chat_id`.
                    public var fromChatId: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.FromChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/caption_entities`.
                    public var captionEntities: [Components.Schemas.MessageEntity]?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - fromChatId: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - caption: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///   - parseMode: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - captionEntities: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        fromChatId: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.FromChatIdPayload,
                        messageId: Swift.Int,
                        caption: Swift.String? = nil,
                        parseMode: Swift.String? = nil,
                        captionEntities: [Components.Schemas.MessageEntity]? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.fromChatId = fromChatId
                        self.messageId = messageId
                        self.caption = caption
                        self.parseMode = parseMode
                        self.captionEntities = captionEntities
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case fromChatId = "from_chat_id"
                        case messageId = "message_id"
                        case caption
                        case parseMode = "parse_mode"
                        case captionEntities = "caption_entities"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostCopyMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/from_chat_id`.
                    public struct FromChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fromChatId(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.FromChatIdPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostCopyMessage.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostCopyMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostCopyMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id`.
                    public struct FromChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `FromChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/from_chat_id`.
                    public var fromChatId: Operations.PostCopyMessage.Input.Body.JsonPayload.FromChatIdPayload
                    /// Message identifier in the chat specified in *from\_chat\_id*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/caption_entities`.
                    public var captionEntities: [Components.Schemas.MessageEntity]?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostCopyMessage.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    ///
                    /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostCopyMessage.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - fromChatId: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
                    ///   - messageId: Message identifier in the chat specified in *from\_chat\_id*
                    ///   - caption: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
                    ///   - parseMode: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - captionEntities: List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
                    public init(
                        chatId: Operations.PostCopyMessage.Input.Body.JsonPayload.ChatIdPayload,
                        fromChatId: Operations.PostCopyMessage.Input.Body.JsonPayload.FromChatIdPayload,
                        messageId: Swift.Int,
                        caption: Swift.String? = nil,
                        parseMode: Swift.String? = nil,
                        captionEntities: [Components.Schemas.MessageEntity]? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostCopyMessage.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostCopyMessage.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.fromChatId = fromChatId
                        self.messageId = messageId
                        self.caption = caption
                        self.parseMode = parseMode
                        self.captionEntities = captionEntities
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case fromChatId = "from_chat_id"
                        case messageId = "message_id"
                        case caption
                        case parseMode = "parse_mode"
                        case captionEntities = "caption_entities"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/copyMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostCopyMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostCopyMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostCopyMessage.Input.Headers = .init(),
                body: Operations.PostCopyMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.MessageId
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.MessageId
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostCopyMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostCopyMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCopyMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCopyMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//copyMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostCopyMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostCopyMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/copyMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/copyMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCopyMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCopyMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//copyMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostCopyMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostCopyMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPhoto`.
    /// - Remark: Generated from `#/paths//sendPhoto/post`.
    public enum PostSendPhoto {
        public static let id: Swift.String = "post/sendPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo`.
                    public struct PhotoPayload: Sendable, Hashable {
                        /// Photo to send. Pass a file\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/photo/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendPhoto.Input.Body.MultipartFormPayload.PhotoPayload.BodyPayload
                        /// Creates a new `PhotoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendPhoto.Input.Body.MultipartFormPayload.PhotoPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case photo(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.PhotoPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendPhoto.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendPhoto.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendPhoto.Input.Headers = .init(),
                body: Operations.PostSendPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendPhoto.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendPhoto.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
    ///
    /// - Remark: HTTP `POST /sendAudio`.
    /// - Remark: Generated from `#/paths//sendAudio/post`.
    public enum PostSendAudio {
        public static let id: Swift.String = "post/sendAudio"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendAudio/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendAudio.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendAudio.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendAudio.Input.Headers
            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio`.
                    public struct AudioPayload: Sendable, Hashable {
                        /// Audio file to send. Pass a file\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/audio/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.AudioPayload.BodyPayload
                        /// Creates a new `AudioPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.AudioPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case audio(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.AudioPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/duration`.
                    public struct DurationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DurationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.DurationPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/performer`.
                    public struct PerformerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PerformerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case performer(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.PerformerPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.TitlePayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.ThumbPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAudio.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendAudio.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendAudio/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendAudio.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendAudio.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendAudio.Input.Headers = .init(),
                body: Operations.PostSendAudio.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendAudio.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendAudio.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendAudio.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendAudio.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAudio/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendAudio.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendAudio.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAudio/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAudio/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendAudio.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendAudio.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAudio/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendAudio.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendAudio.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendDocument`.
    /// - Remark: Generated from `#/paths//sendDocument/post`.
    public enum PostSendDocument {
        public static let id: Swift.String = "post/sendDocument"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendDocument/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendDocument.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendDocument.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendDocument.Input.Headers
            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document`.
                    public struct DocumentPayload: Sendable, Hashable {
                        /// File to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/document/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.DocumentPayload.BodyPayload
                        /// Creates a new `DocumentPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.DocumentPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case document(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.DocumentPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.ThumbPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/disable_content_type_detection`.
                    public struct DisableContentTypeDetectionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableContentTypeDetectionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableContentTypeDetection(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.DisableContentTypeDetectionPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendDocument.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendDocument.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendDocument/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendDocument.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendDocument.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendDocument.Input.Headers = .init(),
                body: Operations.PostSendDocument.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendDocument.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendDocument.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendDocument.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendDocument.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDocument/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendDocument.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendDocument.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDocument/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDocument/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendDocument.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendDocument.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDocument/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendDocument.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendDocument.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVideo`.
    /// - Remark: Generated from `#/paths//sendVideo/post`.
    public enum PostSendVideo {
        public static let id: Swift.String = "post/sendVideo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVideo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVideo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVideo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendVideo.Input.Headers
            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video`.
                    public struct VideoPayload: Sendable, Hashable {
                        /// Video to send. Pass a file\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/video/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.VideoPayload.BodyPayload
                        /// Creates a new `VideoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.VideoPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case video(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.VideoPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/duration`.
                    public struct DurationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DurationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.DurationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/width`.
                    public struct WidthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `WidthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case width(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.WidthPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/height`.
                    public struct HeightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HeightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case height(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.HeightPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.ThumbPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/supports_streaming`.
                    public struct SupportsStreamingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SupportsStreamingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case supportsStreaming(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.SupportsStreamingPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideo.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendVideo.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVideo/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendVideo.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendVideo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendVideo.Input.Headers = .init(),
                body: Operations.PostSendVideo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendVideo.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendVideo.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVideo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVideo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideo/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendVideo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendVideo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVideo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVideo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideo/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendVideo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendVideo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendAnimation`.
    /// - Remark: Generated from `#/paths//sendAnimation/post`.
    public enum PostSendAnimation {
        public static let id: Swift.String = "post/sendAnimation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendAnimation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendAnimation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendAnimation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendAnimation.Input.Headers
            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation`.
                    public struct AnimationPayload: Sendable, Hashable {
                        /// Animation to send. Pass a file\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/animation/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.AnimationPayload.BodyPayload
                        /// Creates a new `AnimationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.AnimationPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case animation(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.AnimationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/duration`.
                    public struct DurationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DurationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.DurationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/width`.
                    public struct WidthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `WidthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case width(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.WidthPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/height`.
                    public struct HeightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HeightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case height(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.HeightPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ThumbPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendAnimation.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendAnimation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendAnimation.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendAnimation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendAnimation.Input.Headers = .init(),
                body: Operations.PostSendAnimation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendAnimation.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendAnimation.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendAnimation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendAnimation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAnimation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendAnimation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendAnimation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendAnimation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendAnimation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendAnimation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendAnimation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendAnimation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendAnimation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    ///
    /// - Remark: HTTP `POST /sendVoice`.
    /// - Remark: Generated from `#/paths//sendVoice/post`.
    public enum PostSendVoice {
        public static let id: Swift.String = "post/sendVoice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVoice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVoice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVoice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendVoice.Input.Headers
            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice`.
                    public struct VoicePayload: Sendable, Hashable {
                        /// Audio file to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/voice/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVoice.Input.Body.MultipartFormPayload.VoicePayload.BodyPayload
                        /// Creates a new `VoicePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVoice.Input.Body.MultipartFormPayload.VoicePayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case voice(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.VoicePayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/duration`.
                    public struct DurationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DurationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.DurationPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVoice.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVoice.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendVoice.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVoice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendVoice.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendVoice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendVoice.Input.Headers = .init(),
                body: Operations.PostSendVoice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendVoice.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendVoice.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVoice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVoice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVoice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendVoice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendVoice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVoice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVoice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVoice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVoice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVoice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendVoice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendVoice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVideoNote`.
    /// - Remark: Generated from `#/paths//sendVideoNote/post`.
    public enum PostSendVideoNote {
        public static let id: Swift.String = "post/sendVideoNote"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVideoNote/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVideoNote.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVideoNote.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendVideoNote.Input.Headers
            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note`.
                    public struct VideoNotePayload: Sendable, Hashable {
                        /// Video note to send. Pass a file\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/video_note/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.VideoNotePayload.BodyPayload
                        /// Creates a new `VideoNotePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.VideoNotePayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case videoNote(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.VideoNotePayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/duration`.
                    public struct DurationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DurationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case duration(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.DurationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/length`.
                    public struct LengthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LengthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case length(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.LengthPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ThumbPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendVideoNote.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendVideoNote.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendVideoNote.Input.Headers = .init(),
                body: Operations.PostSendVideoNote.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendVideoNote.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendVideoNote.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVideoNote.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVideoNote.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideoNote/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendVideoNote.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendVideoNote.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVideoNote/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVideoNote.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVideoNote.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVideoNote/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendVideoNote.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendVideoNote.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
    ///
    /// - Remark: HTTP `POST /sendMediaGroup`.
    /// - Remark: Generated from `#/paths//sendMediaGroup/post`.
    public enum PostSendMediaGroup {
        public static let id: Swift.String = "post/sendMediaGroup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendMediaGroup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendMediaGroup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendMediaGroup.Input.Headers
            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media`.
                    public struct MediaPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value1`.
                            public var value1: Components.Schemas.InputMediaAudio?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value2`.
                            public var value2: Components.Schemas.InputMediaDocument?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value3`.
                            public var value3: Components.Schemas.InputMediaPhoto?
                            /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/media/content/body/value4`.
                            public var value4: Components.Schemas.InputMediaVideo?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InputMediaAudio? = nil,
                                value2: Components.Schemas.InputMediaDocument? = nil,
                                value3: Components.Schemas.InputMediaPhoto? = nil,
                                value4: Components.Schemas.InputMediaVideo? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.MediaPayload.BodyPayload
                        /// Creates a new `MediaPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.MediaPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case media(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.MediaPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendMediaGroup.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendMediaGroup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendMediaGroup.Input.Headers = .init(),
                body: Operations.PostSendMediaGroup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.Message]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.Message]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendMediaGroup.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendMediaGroup.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendMediaGroup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendMediaGroup.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMediaGroup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendMediaGroup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendMediaGroup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendMediaGroup/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendMediaGroup.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendMediaGroup.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendMediaGroup/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendMediaGroup.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendMediaGroup.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendLocation`.
    /// - Remark: Generated from `#/paths//sendLocation/post`.
    public enum PostSendLocation {
        public static let id: Swift.String = "post/sendLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendLocation.Input.Headers
            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Latitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/horizontal_accuracy`.
                    public var horizontalAccuracy: Swift.Double?
                    /// Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/live_period`.
                    public var livePeriod: Swift.Int?
                    /// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/heading`.
                    public var heading: Swift.Int?
                    /// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/proximity_alert_radius`.
                    public var proximityAlertRadius: Swift.Int?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the location
                    ///   - longitude: Longitude of the location
                    ///   - horizontalAccuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - livePeriod: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///   - heading: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximityAlertRadius: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    public init(
                        chatId: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontalAccuracy: Swift.Double? = nil,
                        livePeriod: Swift.Int? = nil,
                        heading: Swift.Int? = nil,
                        proximityAlertRadius: Swift.Int? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontalAccuracy = horizontalAccuracy
                        self.livePeriod = livePeriod
                        self.heading = heading
                        self.proximityAlertRadius = proximityAlertRadius
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case latitude
                        case longitude
                        case horizontalAccuracy = "horizontal_accuracy"
                        case livePeriod = "live_period"
                        case heading
                        case proximityAlertRadius = "proximity_alert_radius"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendLocation.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/latitude`.
                    public struct LatitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LatitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.LatitudePayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/longitude`.
                    public struct LongitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LongitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.LongitudePayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/horizontal_accuracy`.
                    public struct HorizontalAccuracyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HorizontalAccuracyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case horizontalAccuracy(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.HorizontalAccuracyPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/live_period`.
                    public struct LivePeriodPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LivePeriodPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case livePeriod(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.LivePeriodPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/heading`.
                    public struct HeadingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HeadingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case heading(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.HeadingPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/proximity_alert_radius`.
                    public struct ProximityAlertRadiusPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProximityAlertRadiusPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proximityAlertRadius(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.ProximityAlertRadiusPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendLocation.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendLocation.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendLocation.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendLocation.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendLocation.Input.Body.JsonPayload.ChatIdPayload
                    /// Latitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the location
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/horizontal_accuracy`.
                    public var horizontalAccuracy: Swift.Double?
                    /// Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/live_period`.
                    public var livePeriod: Swift.Int?
                    /// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/heading`.
                    public var heading: Swift.Int?
                    /// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/proximity_alert_radius`.
                    public var proximityAlertRadius: Swift.Int?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendLocation.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    ///
                    /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostSendLocation.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the location
                    ///   - longitude: Longitude of the location
                    ///   - horizontalAccuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - livePeriod: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
                    ///   - heading: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximityAlertRadius: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
                    public init(
                        chatId: Operations.PostSendLocation.Input.Body.JsonPayload.ChatIdPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontalAccuracy: Swift.Double? = nil,
                        livePeriod: Swift.Int? = nil,
                        heading: Swift.Int? = nil,
                        proximityAlertRadius: Swift.Int? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendLocation.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendLocation.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontalAccuracy = horizontalAccuracy
                        self.livePeriod = livePeriod
                        self.heading = heading
                        self.proximityAlertRadius = proximityAlertRadius
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case latitude
                        case longitude
                        case horizontalAccuracy = "horizontal_accuracy"
                        case livePeriod = "live_period"
                        case heading
                        case proximityAlertRadius = "proximity_alert_radius"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendLocation/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendLocation.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendLocation.Input.Headers = .init(),
                body: Operations.PostSendLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendLocation.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendLocation.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//editMessageLiveLocation/post`.
    public enum PostEditMessageLiveLocation {
        public static let id: Swift.String = "post/editMessageLiveLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageLiveLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageLiveLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageLiveLocation.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostEditMessageLiveLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Latitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/horizontal_accuracy`.
                    public var horizontalAccuracy: Swift.Double?
                    /// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/heading`.
                    public var heading: Swift.Int?
                    /// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/proximity_alert_radius`.
                    public var proximityAlertRadius: Swift.Int?
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - latitude: Latitude of new location
                    ///   - longitude: Longitude of new location
                    ///   - horizontalAccuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - heading: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximityAlertRadius: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageLiveLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontalAccuracy: Swift.Double? = nil,
                        heading: Swift.Int? = nil,
                        proximityAlertRadius: Swift.Int? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontalAccuracy = horizontalAccuracy
                        self.heading = heading
                        self.proximityAlertRadius = proximityAlertRadius
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case latitude
                        case longitude
                        case horizontalAccuracy = "horizontal_accuracy"
                        case heading
                        case proximityAlertRadius = "proximity_alert_radius"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEditMessageLiveLocation.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/latitude`.
                    public struct LatitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LatitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.LatitudePayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/longitude`.
                    public struct LongitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LongitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.LongitudePayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/horizontal_accuracy`.
                    public struct HorizontalAccuracyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HorizontalAccuracyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case horizontalAccuracy(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.HorizontalAccuracyPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/heading`.
                    public struct HeadingPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `HeadingPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case heading(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.HeadingPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/proximity_alert_radius`.
                    public struct ProximityAlertRadiusPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProximityAlertRadiusPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case proximityAlertRadius(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.ProximityAlertRadiusPayload>)
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageLiveLocation.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostEditMessageLiveLocation.Input.Body.JsonPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Latitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of new location
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// The radius of uncertainty for the location, measured in meters; 0-1500
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/horizontal_accuracy`.
                    public var horizontalAccuracy: Swift.Double?
                    /// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/heading`.
                    public var heading: Swift.Int?
                    /// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/proximity_alert_radius`.
                    public var proximityAlertRadius: Swift.Int?
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - latitude: Latitude of new location
                    ///   - longitude: Longitude of new location
                    ///   - horizontalAccuracy: The radius of uncertainty for the location, measured in meters; 0-1500
                    ///   - heading: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
                    ///   - proximityAlertRadius: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageLiveLocation.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        horizontalAccuracy: Swift.Double? = nil,
                        heading: Swift.Int? = nil,
                        proximityAlertRadius: Swift.Int? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.horizontalAccuracy = horizontalAccuracy
                        self.heading = heading
                        self.proximityAlertRadius = proximityAlertRadius
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case latitude
                        case longitude
                        case horizontalAccuracy = "horizontal_accuracy"
                        case heading
                        case proximityAlertRadius = "proximity_alert_radius"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/requestBody/content/application\/json`.
                case json(Operations.PostEditMessageLiveLocation.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEditMessageLiveLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageLiveLocation.Input.Headers = .init(),
                body: Operations.PostEditMessageLiveLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/json/result`.
                        public var result: Operations.PostEditMessageLiveLocation.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostEditMessageLiveLocation.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageLiveLocation.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageLiveLocation.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageLiveLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageLiveLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageLiveLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageLiveLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageLiveLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageLiveLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageLiveLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageLiveLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageLiveLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageLiveLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageLiveLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /stopMessageLiveLocation`.
    /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post`.
    public enum PostStopMessageLiveLocation {
        public static let id: Swift.String = "post/stopMessageLiveLocation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostStopMessageLiveLocation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostStopMessageLiveLocation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostStopMessageLiveLocation.Input.Headers
            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostStopMessageLiveLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostStopMessageLiveLocation.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostStopMessageLiveLocation.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostStopMessageLiveLocation.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostStopMessageLiveLocation.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostStopMessageLiveLocation.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostStopMessageLiveLocation.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostStopMessageLiveLocation.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostStopMessageLiveLocation.Input.Body.JsonPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostStopMessageLiveLocation.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/requestBody/content/application\/json`.
                case json(Operations.PostStopMessageLiveLocation.Input.Body.JsonPayload)
            }
            public var body: Operations.PostStopMessageLiveLocation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostStopMessageLiveLocation.Input.Headers = .init(),
                body: Operations.PostStopMessageLiveLocation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/json/result`.
                        public var result: Operations.PostStopMessageLiveLocation.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostStopMessageLiveLocation.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/200/content/application\/json`.
                    case json(Operations.PostStopMessageLiveLocation.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostStopMessageLiveLocation.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostStopMessageLiveLocation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostStopMessageLiveLocation.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostStopMessageLiveLocation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostStopMessageLiveLocation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopMessageLiveLocation/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostStopMessageLiveLocation.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostStopMessageLiveLocation.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopMessageLiveLocation/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostStopMessageLiveLocation.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostStopMessageLiveLocation.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendVenue`.
    /// - Remark: Generated from `#/paths//sendVenue/post`.
    public enum PostSendVenue {
        public static let id: Swift.String = "post/sendVenue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendVenue/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVenue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendVenue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendVenue.Input.Headers
            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Latitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/longitude`.
                    public var longitude: Swift.Double
                    /// Name of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Address of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/address`.
                    public var address: Swift.String
                    /// Foursquare identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/foursquare_id`.
                    public var foursquareId: Swift.String?
                    /// Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/foursquare_type`.
                    public var foursquareType: Swift.String?
                    /// Google Places identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/google_place_id`.
                    public var googlePlaceId: Swift.String?
                    /// Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/google_place_type`.
                    public var googlePlaceType: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the venue
                    ///   - longitude: Longitude of the venue
                    ///   - title: Name of the venue
                    ///   - address: Address of the venue
                    ///   - foursquareId: Foursquare identifier of the venue
                    ///   - foursquareType: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///   - googlePlaceId: Google Places identifier of the venue
                    ///   - googlePlaceType: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        title: Swift.String,
                        address: Swift.String,
                        foursquareId: Swift.String? = nil,
                        foursquareType: Swift.String? = nil,
                        googlePlaceId: Swift.String? = nil,
                        googlePlaceType: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.title = title
                        self.address = address
                        self.foursquareId = foursquareId
                        self.foursquareType = foursquareType
                        self.googlePlaceId = googlePlaceId
                        self.googlePlaceType = googlePlaceType
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case latitude
                        case longitude
                        case title
                        case address
                        case foursquareId = "foursquare_id"
                        case foursquareType = "foursquare_type"
                        case googlePlaceId = "google_place_id"
                        case googlePlaceType = "google_place_type"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendVenue.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/latitude`.
                    public struct LatitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LatitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case latitude(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.LatitudePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/longitude`.
                    public struct LongitudePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LongitudePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case longitude(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.LongitudePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.TitlePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/address`.
                    public struct AddressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AddressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case address(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.AddressPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/foursquare_id`.
                    public struct FoursquareIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FoursquareIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case foursquareId(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.FoursquareIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/foursquare_type`.
                    public struct FoursquareTypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FoursquareTypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case foursquareType(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.FoursquareTypePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/google_place_id`.
                    public struct GooglePlaceIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `GooglePlaceIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case googlePlaceId(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.GooglePlaceIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/google_place_type`.
                    public struct GooglePlaceTypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `GooglePlaceTypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case googlePlaceType(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.GooglePlaceTypePayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendVenue.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendVenue.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendVenue.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendVenue.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendVenue.Input.Body.JsonPayload.ChatIdPayload
                    /// Latitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/latitude`.
                    public var latitude: Swift.Double
                    /// Longitude of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/longitude`.
                    public var longitude: Swift.Double
                    /// Name of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Address of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/address`.
                    public var address: Swift.String
                    /// Foursquare identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/foursquare_id`.
                    public var foursquareId: Swift.String?
                    /// Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/foursquare_type`.
                    public var foursquareType: Swift.String?
                    /// Google Places identifier of the venue
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/google_place_id`.
                    public var googlePlaceId: Swift.String?
                    /// Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/google_place_type`.
                    public var googlePlaceType: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendVenue.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostSendVenue.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - latitude: Latitude of the venue
                    ///   - longitude: Longitude of the venue
                    ///   - title: Name of the venue
                    ///   - address: Address of the venue
                    ///   - foursquareId: Foursquare identifier of the venue
                    ///   - foursquareType: Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
                    ///   - googlePlaceId: Google Places identifier of the venue
                    ///   - googlePlaceType: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendVenue.Input.Body.JsonPayload.ChatIdPayload,
                        latitude: Swift.Double,
                        longitude: Swift.Double,
                        title: Swift.String,
                        address: Swift.String,
                        foursquareId: Swift.String? = nil,
                        foursquareType: Swift.String? = nil,
                        googlePlaceId: Swift.String? = nil,
                        googlePlaceType: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendVenue.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendVenue.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.latitude = latitude
                        self.longitude = longitude
                        self.title = title
                        self.address = address
                        self.foursquareId = foursquareId
                        self.foursquareType = foursquareType
                        self.googlePlaceId = googlePlaceId
                        self.googlePlaceType = googlePlaceType
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case latitude
                        case longitude
                        case title
                        case address
                        case foursquareId = "foursquare_id"
                        case foursquareType = "foursquare_type"
                        case googlePlaceId = "google_place_id"
                        case googlePlaceType = "google_place_type"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendVenue/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendVenue.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendVenue.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendVenue.Input.Headers = .init(),
                body: Operations.PostSendVenue.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendVenue.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendVenue.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVenue.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVenue.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVenue/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendVenue.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendVenue.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendVenue/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendVenue/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendVenue.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendVenue.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendVenue/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendVenue.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendVenue.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendContact`.
    /// - Remark: Generated from `#/paths//sendContact/post`.
    public enum PostSendContact {
        public static let id: Swift.String = "post/sendContact"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendContact/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendContact.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendContact.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendContact.Input.Headers
            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Contact's phone number
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/phone_number`.
                    public var phoneNumber: Swift.String
                    /// Contact's first name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/first_name`.
                    public var firstName: Swift.String
                    /// Contact's last name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/last_name`.
                    public var lastName: Swift.String?
                    /// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/vcard`.
                    public var vcard: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - phoneNumber: Contact's phone number
                    ///   - firstName: Contact's first name
                    ///   - lastName: Contact's last name
                    ///   - vcard: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        phoneNumber: Swift.String,
                        firstName: Swift.String,
                        lastName: Swift.String? = nil,
                        vcard: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendContact.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.phoneNumber = phoneNumber
                        self.firstName = firstName
                        self.lastName = lastName
                        self.vcard = vcard
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case phoneNumber = "phone_number"
                        case firstName = "first_name"
                        case lastName = "last_name"
                        case vcard
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendContact.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/phone_number`.
                    public struct PhoneNumberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhoneNumberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case phoneNumber(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.PhoneNumberPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/first_name`.
                    public struct FirstNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FirstNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case firstName(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.FirstNamePayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/last_name`.
                    public struct LastNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LastNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case lastName(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.LastNamePayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/vcard`.
                    public struct VcardPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `VcardPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case vcard(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.VcardPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendContact.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendContact.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendContact.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendContact.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendContact.Input.Body.JsonPayload.ChatIdPayload
                    /// Contact's phone number
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/phone_number`.
                    public var phoneNumber: Swift.String
                    /// Contact's first name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/first_name`.
                    public var firstName: Swift.String
                    /// Contact's last name
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/last_name`.
                    public var lastName: Swift.String?
                    /// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/vcard`.
                    public var vcard: Swift.String?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendContact.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostSendContact.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - phoneNumber: Contact's phone number
                    ///   - firstName: Contact's first name
                    ///   - lastName: Contact's last name
                    ///   - vcard: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendContact.Input.Body.JsonPayload.ChatIdPayload,
                        phoneNumber: Swift.String,
                        firstName: Swift.String,
                        lastName: Swift.String? = nil,
                        vcard: Swift.String? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendContact.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendContact.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.phoneNumber = phoneNumber
                        self.firstName = firstName
                        self.lastName = lastName
                        self.vcard = vcard
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case phoneNumber = "phone_number"
                        case firstName = "first_name"
                        case lastName = "last_name"
                        case vcard
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendContact/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendContact.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendContact.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendContact.Input.Headers = .init(),
                body: Operations.PostSendContact.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendContact.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendContact.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendContact.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendContact.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendContact/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendContact.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendContact.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendContact/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendContact/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendContact.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendContact.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendContact/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendContact.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendContact.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendPoll`.
    /// - Remark: Generated from `#/paths//sendPoll/post`.
    public enum PostSendPoll {
        public static let id: Swift.String = "post/sendPoll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendPoll/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendPoll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendPoll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendPoll.Input.Headers
            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Poll question, 1-300 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/question`.
                    public var question: Swift.String
                    /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/options`.
                    public var options: [Swift.String]
                    /// True, if the poll needs to be anonymous, defaults to *True*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/is_anonymous`.
                    public var isAnonymous: Swift.Bool?
                    /// Poll type, “quiz” or “regular”, defaults to “regular”
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/type`.
                    public var _type: Swift.String?
                    /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/allows_multiple_answers`.
                    public var allowsMultipleAnswers: Swift.Bool?
                    /// 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/correct_option_id`.
                    public var correctOptionId: Swift.Int?
                    /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation`.
                    public var explanation: Swift.String?
                    /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation_parse_mode`.
                    public var explanationParseMode: Swift.String?
                    /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/explanation_entities`.
                    public var explanationEntities: [Components.Schemas.MessageEntity]?
                    /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/open_period`.
                    public var openPeriod: Swift.Int?
                    /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/close_date`.
                    public var closeDate: Swift.Int?
                    /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/is_closed`.
                    public var isClosed: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - question: Poll question, 1-300 characters
                    ///   - options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///   - isAnonymous: True, if the poll needs to be anonymous, defaults to *True*
                    ///   - _type: Poll type, “quiz” or “regular”, defaults to “regular”
                    ///   - allowsMultipleAnswers: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///   - correctOptionId: 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///   - explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///   - explanationParseMode: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - explanationEntities: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///   - openPeriod: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///   - closeDate: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///   - isClosed: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        question: Swift.String,
                        options: [Swift.String],
                        isAnonymous: Swift.Bool? = nil,
                        _type: Swift.String? = nil,
                        allowsMultipleAnswers: Swift.Bool? = nil,
                        correctOptionId: Swift.Int? = nil,
                        explanation: Swift.String? = nil,
                        explanationParseMode: Swift.String? = nil,
                        explanationEntities: [Components.Schemas.MessageEntity]? = nil,
                        openPeriod: Swift.Int? = nil,
                        closeDate: Swift.Int? = nil,
                        isClosed: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.question = question
                        self.options = options
                        self.isAnonymous = isAnonymous
                        self._type = _type
                        self.allowsMultipleAnswers = allowsMultipleAnswers
                        self.correctOptionId = correctOptionId
                        self.explanation = explanation
                        self.explanationParseMode = explanationParseMode
                        self.explanationEntities = explanationEntities
                        self.openPeriod = openPeriod
                        self.closeDate = closeDate
                        self.isClosed = isClosed
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case question
                        case options
                        case isAnonymous = "is_anonymous"
                        case _type = "type"
                        case allowsMultipleAnswers = "allows_multiple_answers"
                        case correctOptionId = "correct_option_id"
                        case explanation
                        case explanationParseMode = "explanation_parse_mode"
                        case explanationEntities = "explanation_entities"
                        case openPeriod = "open_period"
                        case closeDate = "close_date"
                        case isClosed = "is_closed"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendPoll.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/question`.
                    public struct QuestionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `QuestionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case question(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.QuestionPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/options`.
                    public struct OptionsPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case options(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.OptionsPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/is_anonymous`.
                    public struct IsAnonymousPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IsAnonymousPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case isAnonymous(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.IsAnonymousPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/type`.
                    public struct _TypePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `_TypePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case _type(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload._TypePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/allows_multiple_answers`.
                    public struct AllowsMultipleAnswersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowsMultipleAnswersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowsMultipleAnswers(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.AllowsMultipleAnswersPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/correct_option_id`.
                    public struct CorrectOptionIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CorrectOptionIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case correctOptionId(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.CorrectOptionIdPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation`.
                    public struct ExplanationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ExplanationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case explanation(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ExplanationPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation_parse_mode`.
                    public struct ExplanationParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ExplanationParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case explanationParseMode(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ExplanationParseModePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/explanation_entities`.
                    public struct ExplanationEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `ExplanationEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case explanationEntities(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ExplanationEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/open_period`.
                    public struct OpenPeriodPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OpenPeriodPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case openPeriod(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.OpenPeriodPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/close_date`.
                    public struct CloseDatePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CloseDatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case closeDate(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.CloseDatePayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/is_closed`.
                    public struct IsClosedPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IsClosedPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case isClosed(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.IsClosedPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendPoll.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendPoll.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendPoll.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendPoll.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendPoll.Input.Body.JsonPayload.ChatIdPayload
                    /// Poll question, 1-300 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/question`.
                    public var question: Swift.String
                    /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/options`.
                    public var options: [Swift.String]
                    /// True, if the poll needs to be anonymous, defaults to *True*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/is_anonymous`.
                    public var isAnonymous: Swift.Bool?
                    /// Poll type, “quiz” or “regular”, defaults to “regular”
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/type`.
                    public var _type: Swift.String?
                    /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/allows_multiple_answers`.
                    public var allowsMultipleAnswers: Swift.Bool?
                    /// 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/correct_option_id`.
                    public var correctOptionId: Swift.Int?
                    /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation`.
                    public var explanation: Swift.String?
                    /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation_parse_mode`.
                    public var explanationParseMode: Swift.String?
                    /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/explanation_entities`.
                    public var explanationEntities: [Components.Schemas.MessageEntity]?
                    /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/open_period`.
                    public var openPeriod: Swift.Int?
                    /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/close_date`.
                    public var closeDate: Swift.Int?
                    /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/is_closed`.
                    public var isClosed: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendPoll.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - question: Poll question, 1-300 characters
                    ///   - options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
                    ///   - isAnonymous: True, if the poll needs to be anonymous, defaults to *True*
                    ///   - _type: Poll type, “quiz” or “regular”, defaults to “regular”
                    ///   - allowsMultipleAnswers: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
                    ///   - correctOptionId: 0-based identifier of the correct answer option, required for polls in quiz mode
                    ///   - explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
                    ///   - explanationParseMode: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - explanationEntities: List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
                    ///   - openPeriod: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
                    ///   - closeDate: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
                    ///   - isClosed: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    public init(
                        chatId: Operations.PostSendPoll.Input.Body.JsonPayload.ChatIdPayload,
                        question: Swift.String,
                        options: [Swift.String],
                        isAnonymous: Swift.Bool? = nil,
                        _type: Swift.String? = nil,
                        allowsMultipleAnswers: Swift.Bool? = nil,
                        correctOptionId: Swift.Int? = nil,
                        explanation: Swift.String? = nil,
                        explanationParseMode: Swift.String? = nil,
                        explanationEntities: [Components.Schemas.MessageEntity]? = nil,
                        openPeriod: Swift.Int? = nil,
                        closeDate: Swift.Int? = nil,
                        isClosed: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendPoll.Input.Body.JsonPayload.ReplyMarkupPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.question = question
                        self.options = options
                        self.isAnonymous = isAnonymous
                        self._type = _type
                        self.allowsMultipleAnswers = allowsMultipleAnswers
                        self.correctOptionId = correctOptionId
                        self.explanation = explanation
                        self.explanationParseMode = explanationParseMode
                        self.explanationEntities = explanationEntities
                        self.openPeriod = openPeriod
                        self.closeDate = closeDate
                        self.isClosed = isClosed
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case question
                        case options
                        case isAnonymous = "is_anonymous"
                        case _type = "type"
                        case allowsMultipleAnswers = "allows_multiple_answers"
                        case correctOptionId = "correct_option_id"
                        case explanation
                        case explanationParseMode = "explanation_parse_mode"
                        case explanationEntities = "explanation_entities"
                        case openPeriod = "open_period"
                        case closeDate = "close_date"
                        case isClosed = "is_closed"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/sendPoll/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendPoll.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendPoll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendPoll.Input.Headers = .init(),
                body: Operations.PostSendPoll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendPoll.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendPoll.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendPoll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendPoll.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPoll/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendPoll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendPoll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendPoll/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendPoll/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendPoll.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendPoll.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendPoll/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendPoll.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendPoll.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendDice`.
    /// - Remark: Generated from `#/paths//sendDice/post`.
    public enum PostSendDice {
        public static let id: Swift.String = "post/sendDice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendDice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendDice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendDice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendDice.Input.Headers
            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/emoji`.
                    @frozen public enum EmojiPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _x1F3B2_ = "🎲"
                        case _x1F3AF_ = "🎯"
                        case _x1F3C0_ = "🏀"
                        case _x26BD_ = "⚽"
                        case _x1F3B0_ = "🎰"
                    }
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/emoji`.
                    public var emoji: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.EmojiPayload?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/urlEncodedForm/send_at`.
                    public var sendAt: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.SendAtPayload?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - emoji: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        emoji: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.EmojiPayload? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendDice.Input.Body.UrlEncodedFormPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.emoji = emoji
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case emoji
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendDice.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/emoji`.
                    public struct EmojiPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `EmojiPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emoji(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.EmojiPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendDice.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendDice.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendDice.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendDice.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendDice.Input.Body.JsonPayload.ChatIdPayload
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/emoji`.
                    @frozen public enum EmojiPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _x1F3B2_ = "🎲"
                        case _x1F3AF_ = "🎯"
                        case _x1F3C0_ = "🏀"
                        case _x26BD_ = "⚽"
                        case _x1F3B0_ = "🎰"
                    }
                    /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/emoji`.
                    public var emoji: Operations.PostSendDice.Input.Body.JsonPayload.EmojiPayload?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup`.
                    public struct ReplyMarkupPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value1`.
                        public var value1: Components.Schemas.InlineKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value2`.
                        public var value2: Components.Schemas.ReplyKeyboardMarkup?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value3`.
                        public var value3: Components.Schemas.ReplyKeyboardRemove?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup/value4`.
                        public var value4: Components.Schemas.ForceReply?
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        ///   - value4:
                        public init(
                            value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                            value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                            value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                            value4: Components.Schemas.ForceReply? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                            self.value4 = value4
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value3 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value4 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2,
                                    self.value3,
                                    self.value4
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try self.value1?.encode(to: encoder)
                            try self.value2?.encode(to: encoder)
                            try self.value3?.encode(to: encoder)
                            try self.value4?.encode(to: encoder)
                        }
                    }
                    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Operations.PostSendDice.Input.Body.JsonPayload.ReplyMarkupPayload?
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at`.
                    public struct SendAtPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    ///
                    /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/json/send_at`.
                    public var sendAt: Operations.PostSendDice.Input.Body.JsonPayload.SendAtPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - emoji: Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                    ///   - sendAt: Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
                    public init(
                        chatId: Operations.PostSendDice.Input.Body.JsonPayload.ChatIdPayload,
                        emoji: Operations.PostSendDice.Input.Body.JsonPayload.EmojiPayload? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Operations.PostSendDice.Input.Body.JsonPayload.ReplyMarkupPayload? = nil,
                        sendAt: Operations.PostSendDice.Input.Body.JsonPayload.SendAtPayload? = nil
                    ) {
                        self.chatId = chatId
                        self.emoji = emoji
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                        self.sendAt = sendAt
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case emoji
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                        case sendAt = "send_at"
                    }
                }
                /// - Remark: Generated from `#/paths/sendDice/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendDice.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendDice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendDice.Input.Headers = .init(),
                body: Operations.PostSendDice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendDice.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendDice.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendDice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendDice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendDice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendDice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendDice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendDice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendDice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendDice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendDice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendDice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendDice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
    ///
    /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
    ///
    /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
    ///
    /// - Remark: HTTP `POST /sendChatAction`.
    /// - Remark: Generated from `#/paths//sendChatAction/post`.
    public enum PostSendChatAction {
        public static let id: Swift.String = "post/sendChatAction"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendChatAction/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendChatAction.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendChatAction.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendChatAction.Input.Headers
            /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSendChatAction.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/urlEncodedForm/action`.
                    public var action: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - action: Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    public init(
                        chatId: Operations.PostSendChatAction.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        action: Swift.String
                    ) {
                        self.chatId = chatId
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendChatAction.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendChatAction.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/multipartForm/action`.
                    public struct ActionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ActionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case action(OpenAPIRuntime.MultipartPart<Operations.PostSendChatAction.Input.Body.MultipartFormPayload.ActionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendChatAction.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSendChatAction.Input.Body.JsonPayload.ChatIdPayload
                    /// Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    ///
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/json/action`.
                    public var action: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - action: Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
                    public init(
                        chatId: Operations.PostSendChatAction.Input.Body.JsonPayload.ChatIdPayload,
                        action: Swift.String
                    ) {
                        self.chatId = chatId
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/sendChatAction/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendChatAction.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendChatAction.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendChatAction.Input.Headers = .init(),
                body: Operations.PostSendChatAction.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendChatAction.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendChatAction.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendChatAction.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendChatAction.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendChatAction/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendChatAction.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendChatAction.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendChatAction/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendChatAction.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendChatAction.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendChatAction/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendChatAction.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendChatAction.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
    ///
    /// - Remark: HTTP `POST /getUserProfilePhotos`.
    /// - Remark: Generated from `#/paths//getUserProfilePhotos/post`.
    public enum PostGetUserProfilePhotos {
        public static let id: Swift.String = "post/getUserProfilePhotos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetUserProfilePhotos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetUserProfilePhotos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetUserProfilePhotos.Input.Headers
            /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/urlEncodedForm/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Unique identifier of the target user
                    ///   - offset: Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///   - limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    public init(
                        userId: Swift.Int,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.userId = userId
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetUserProfilePhotos.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostGetUserProfilePhotos.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/offset`.
                    public struct OffsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OffsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case offset(OpenAPIRuntime.MultipartPart<Operations.PostGetUserProfilePhotos.Input.Body.MultipartFormPayload.OffsetPayload>)
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/multipartForm/limit`.
                    public struct LimitPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `LimitPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case limit(OpenAPIRuntime.MultipartPart<Operations.PostGetUserProfilePhotos.Input.Body.MultipartFormPayload.LimitPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetUserProfilePhotos.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/offset`.
                    public var offset: Swift.Int?
                    /// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    ///
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/json/limit`.
                    public var limit: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Unique identifier of the target user
                    ///   - offset: Sequential number of the first photo to be returned. By default, all photos are returned.
                    ///   - limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
                    public init(
                        userId: Swift.Int,
                        offset: Swift.Int? = nil,
                        limit: Swift.Int? = nil
                    ) {
                        self.userId = userId
                        self.offset = offset
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case offset
                        case limit
                    }
                }
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetUserProfilePhotos.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetUserProfilePhotos.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetUserProfilePhotos.Input.Headers = .init(),
                body: Operations.PostGetUserProfilePhotos.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.UserProfilePhotos
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.UserProfilePhotos
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetUserProfilePhotos.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetUserProfilePhotos.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetUserProfilePhotos.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetUserProfilePhotos.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUserProfilePhotos/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetUserProfilePhotos.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetUserProfilePhotos.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getUserProfilePhotos/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetUserProfilePhotos.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetUserProfilePhotos.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getUserProfilePhotos/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetUserProfilePhotos.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetUserProfilePhotos.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
    ///
    /// - Remark: HTTP `POST /getFile`.
    /// - Remark: Generated from `#/paths//getFile/post`.
    public enum PostGetFile {
        public static let id: Swift.String = "post/getFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getFile/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetFile.Input.Headers
            /// - Remark: Generated from `#/paths/getFile/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier to get info about
                    ///
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/urlEncodedForm/file_id`.
                    public var fileId: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileId: File identifier to get info about
                    public init(fileId: Swift.String) {
                        self.fileId = fileId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileId = "file_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetFile.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/multipartForm/file_id`.
                    public struct FileIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `FileIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case fileId(OpenAPIRuntime.MultipartPart<Operations.PostGetFile.Input.Body.MultipartFormPayload.FileIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetFile.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File identifier to get info about
                    ///
                    /// - Remark: Generated from `#/paths/getFile/POST/requestBody/json/file_id`.
                    public var fileId: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileId: File identifier to get info about
                    public init(fileId: Swift.String) {
                        self.fileId = fileId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileId = "file_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getFile/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetFile.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetFile.Input.Headers = .init(),
                body: Operations.PostGetFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.File
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.File
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetFile.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetFile.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getFile/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getFile/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getFile/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetFile.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetFile.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getFile/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetFile.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetFile.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /kickChatMember`.
    /// - Remark: Generated from `#/paths//kickChatMember/post`.
    public enum PostKickChatMember {
        public static let id: Swift.String = "post/kickChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/kickChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostKickChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostKickChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostKickChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostKickChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/urlEncodedForm/until_date`.
                    public var untilDate: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - untilDate: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    public init(
                        chatId: Operations.PostKickChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int,
                        untilDate: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.untilDate = untilDate
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case untilDate = "until_date"
                    }
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostKickChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostKickChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostKickChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/multipartForm/until_date`.
                    public struct UntilDatePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UntilDatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case untilDate(OpenAPIRuntime.MultipartPart<Operations.PostKickChatMember.Input.Body.MultipartFormPayload.UntilDatePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostKickChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostKickChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    ///
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/json/until_date`.
                    public var untilDate: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - untilDate: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
                    public init(
                        chatId: Operations.PostKickChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int,
                        untilDate: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.untilDate = untilDate
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case untilDate = "until_date"
                    }
                }
                /// - Remark: Generated from `#/paths/kickChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostKickChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostKickChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostKickChatMember.Input.Headers = .init(),
                body: Operations.PostKickChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostKickChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostKickChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostKickChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostKickChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//kickChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostKickChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostKickChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/kickChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostKickChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostKickChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//kickChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostKickChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostKickChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unbanChatMember`.
    /// - Remark: Generated from `#/paths//unbanChatMember/post`.
    public enum PostUnbanChatMember {
        public static let id: Swift.String = "post/unbanChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unbanChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnbanChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnbanChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUnbanChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostUnbanChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Do nothing if the user is not banned
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/urlEncodedForm/only_if_banned`.
                    public var onlyIfBanned: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///   - userId: Unique identifier of the target user
                    ///   - onlyIfBanned: Do nothing if the user is not banned
                    public init(
                        chatId: Operations.PostUnbanChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int,
                        onlyIfBanned: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.onlyIfBanned = onlyIfBanned
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case onlyIfBanned = "only_if_banned"
                    }
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostUnbanChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostUnbanChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostUnbanChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/multipartForm/only_if_banned`.
                    public struct OnlyIfBannedPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OnlyIfBannedPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case onlyIfBanned(OpenAPIRuntime.MultipartPart<Operations.PostUnbanChatMember.Input.Body.MultipartFormPayload.OnlyIfBannedPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostUnbanChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostUnbanChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Do nothing if the user is not banned
                    ///
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/json/only_if_banned`.
                    public var onlyIfBanned: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
                    ///   - userId: Unique identifier of the target user
                    ///   - onlyIfBanned: Do nothing if the user is not banned
                    public init(
                        chatId: Operations.PostUnbanChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int,
                        onlyIfBanned: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.onlyIfBanned = onlyIfBanned
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case onlyIfBanned = "only_if_banned"
                    }
                }
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostUnbanChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostUnbanChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUnbanChatMember.Input.Headers = .init(),
                body: Operations.PostUnbanChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostUnbanChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUnbanChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnbanChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnbanChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unbanChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostUnbanChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostUnbanChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unbanChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnbanChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnbanChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unbanChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostUnbanChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostUnbanChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /restrictChatMember`.
    /// - Remark: Generated from `#/paths//restrictChatMember/post`.
    public enum PostRestrictChatMember {
        public static let id: Swift.String = "post/restrictChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/restrictChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRestrictChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRestrictChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostRestrictChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostRestrictChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/urlEncodedForm/until_date`.
                    public var untilDate: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - permissions:
                    ///   - untilDate: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    public init(
                        chatId: Operations.PostRestrictChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int,
                        permissions: Components.Schemas.ChatPermissions,
                        untilDate: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.permissions = permissions
                        self.untilDate = untilDate
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case permissions
                        case untilDate = "until_date"
                    }
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostRestrictChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostRestrictChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostRestrictChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/permissions`.
                    public struct PermissionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ChatPermissions
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ChatPermissions) {
                            self.body = body
                        }
                    }
                    case permissions(OpenAPIRuntime.MultipartPart<Operations.PostRestrictChatMember.Input.Body.MultipartFormPayload.PermissionsPayload>)
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/multipartForm/until_date`.
                    public struct UntilDatePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UntilDatePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case untilDate(OpenAPIRuntime.MultipartPart<Operations.PostRestrictChatMember.Input.Body.MultipartFormPayload.UntilDatePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostRestrictChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostRestrictChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    ///
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/json/until_date`.
                    public var untilDate: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - permissions:
                    ///   - untilDate: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
                    public init(
                        chatId: Operations.PostRestrictChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int,
                        permissions: Components.Schemas.ChatPermissions,
                        untilDate: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.permissions = permissions
                        self.untilDate = untilDate
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case permissions
                        case untilDate = "until_date"
                    }
                }
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostRestrictChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostRestrictChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostRestrictChatMember.Input.Headers = .init(),
                body: Operations.PostRestrictChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostRestrictChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostRestrictChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRestrictChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRestrictChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//restrictChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostRestrictChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostRestrictChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restrictChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRestrictChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRestrictChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//restrictChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostRestrictChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostRestrictChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /promoteChatMember`.
    /// - Remark: Generated from `#/paths//promoteChatMember/post`.
    public enum PostPromoteChatMember {
        public static let id: Swift.String = "post/promoteChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/promoteChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPromoteChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPromoteChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostPromoteChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostPromoteChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Pass *True*, if the administrator's presence in the chat is hidden
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/is_anonymous`.
                    public var isAnonymous: Swift.Bool?
                    /// Pass True, if the administrator can change chat title, photo and other settings
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_change_info`.
                    public var canChangeInfo: Swift.Bool?
                    /// Pass True, if the administrator can create channel posts, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_post_messages`.
                    public var canPostMessages: Swift.Bool?
                    /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_edit_messages`.
                    public var canEditMessages: Swift.Bool?
                    /// Pass True, if the administrator can delete messages of other users
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_delete_messages`.
                    public var canDeleteMessages: Swift.Bool?
                    /// Pass True, if the administrator can invite new users to the chat
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_invite_users`.
                    public var canInviteUsers: Swift.Bool?
                    /// Pass True, if the administrator can restrict, ban or unban chat members
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_restrict_members`.
                    public var canRestrictMembers: Swift.Bool?
                    /// Pass True, if the administrator can pin messages, supergroups only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_pin_messages`.
                    public var canPinMessages: Swift.Bool?
                    /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/urlEncodedForm/can_promote_members`.
                    public var canPromoteMembers: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - isAnonymous: Pass *True*, if the administrator's presence in the chat is hidden
                    ///   - canChangeInfo: Pass True, if the administrator can change chat title, photo and other settings
                    ///   - canPostMessages: Pass True, if the administrator can create channel posts, channels only
                    ///   - canEditMessages: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///   - canDeleteMessages: Pass True, if the administrator can delete messages of other users
                    ///   - canInviteUsers: Pass True, if the administrator can invite new users to the chat
                    ///   - canRestrictMembers: Pass True, if the administrator can restrict, ban or unban chat members
                    ///   - canPinMessages: Pass True, if the administrator can pin messages, supergroups only
                    ///   - canPromoteMembers: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    public init(
                        chatId: Operations.PostPromoteChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int,
                        isAnonymous: Swift.Bool? = nil,
                        canChangeInfo: Swift.Bool? = nil,
                        canPostMessages: Swift.Bool? = nil,
                        canEditMessages: Swift.Bool? = nil,
                        canDeleteMessages: Swift.Bool? = nil,
                        canInviteUsers: Swift.Bool? = nil,
                        canRestrictMembers: Swift.Bool? = nil,
                        canPinMessages: Swift.Bool? = nil,
                        canPromoteMembers: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.isAnonymous = isAnonymous
                        self.canChangeInfo = canChangeInfo
                        self.canPostMessages = canPostMessages
                        self.canEditMessages = canEditMessages
                        self.canDeleteMessages = canDeleteMessages
                        self.canInviteUsers = canInviteUsers
                        self.canRestrictMembers = canRestrictMembers
                        self.canPinMessages = canPinMessages
                        self.canPromoteMembers = canPromoteMembers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case isAnonymous = "is_anonymous"
                        case canChangeInfo = "can_change_info"
                        case canPostMessages = "can_post_messages"
                        case canEditMessages = "can_edit_messages"
                        case canDeleteMessages = "can_delete_messages"
                        case canInviteUsers = "can_invite_users"
                        case canRestrictMembers = "can_restrict_members"
                        case canPinMessages = "can_pin_messages"
                        case canPromoteMembers = "can_promote_members"
                    }
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostPromoteChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/is_anonymous`.
                    public struct IsAnonymousPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IsAnonymousPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case isAnonymous(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.IsAnonymousPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_change_info`.
                    public struct CanChangeInfoPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanChangeInfoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canChangeInfo(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanChangeInfoPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_post_messages`.
                    public struct CanPostMessagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanPostMessagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canPostMessages(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanPostMessagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_edit_messages`.
                    public struct CanEditMessagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanEditMessagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canEditMessages(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanEditMessagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_delete_messages`.
                    public struct CanDeleteMessagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanDeleteMessagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canDeleteMessages(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanDeleteMessagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_invite_users`.
                    public struct CanInviteUsersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanInviteUsersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canInviteUsers(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanInviteUsersPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_restrict_members`.
                    public struct CanRestrictMembersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanRestrictMembersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canRestrictMembers(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanRestrictMembersPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_pin_messages`.
                    public struct CanPinMessagesPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanPinMessagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canPinMessages(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanPinMessagesPayload>)
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/multipartForm/can_promote_members`.
                    public struct CanPromoteMembersPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CanPromoteMembersPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case canPromoteMembers(OpenAPIRuntime.MultipartPart<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload.CanPromoteMembersPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostPromoteChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostPromoteChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Pass *True*, if the administrator's presence in the chat is hidden
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/is_anonymous`.
                    public var isAnonymous: Swift.Bool?
                    /// Pass True, if the administrator can change chat title, photo and other settings
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_change_info`.
                    public var canChangeInfo: Swift.Bool?
                    /// Pass True, if the administrator can create channel posts, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_post_messages`.
                    public var canPostMessages: Swift.Bool?
                    /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_edit_messages`.
                    public var canEditMessages: Swift.Bool?
                    /// Pass True, if the administrator can delete messages of other users
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_delete_messages`.
                    public var canDeleteMessages: Swift.Bool?
                    /// Pass True, if the administrator can invite new users to the chat
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_invite_users`.
                    public var canInviteUsers: Swift.Bool?
                    /// Pass True, if the administrator can restrict, ban or unban chat members
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_restrict_members`.
                    public var canRestrictMembers: Swift.Bool?
                    /// Pass True, if the administrator can pin messages, supergroups only
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_pin_messages`.
                    public var canPinMessages: Swift.Bool?
                    /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    ///
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/json/can_promote_members`.
                    public var canPromoteMembers: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - isAnonymous: Pass *True*, if the administrator's presence in the chat is hidden
                    ///   - canChangeInfo: Pass True, if the administrator can change chat title, photo and other settings
                    ///   - canPostMessages: Pass True, if the administrator can create channel posts, channels only
                    ///   - canEditMessages: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
                    ///   - canDeleteMessages: Pass True, if the administrator can delete messages of other users
                    ///   - canInviteUsers: Pass True, if the administrator can invite new users to the chat
                    ///   - canRestrictMembers: Pass True, if the administrator can restrict, ban or unban chat members
                    ///   - canPinMessages: Pass True, if the administrator can pin messages, supergroups only
                    ///   - canPromoteMembers: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
                    public init(
                        chatId: Operations.PostPromoteChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int,
                        isAnonymous: Swift.Bool? = nil,
                        canChangeInfo: Swift.Bool? = nil,
                        canPostMessages: Swift.Bool? = nil,
                        canEditMessages: Swift.Bool? = nil,
                        canDeleteMessages: Swift.Bool? = nil,
                        canInviteUsers: Swift.Bool? = nil,
                        canRestrictMembers: Swift.Bool? = nil,
                        canPinMessages: Swift.Bool? = nil,
                        canPromoteMembers: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.isAnonymous = isAnonymous
                        self.canChangeInfo = canChangeInfo
                        self.canPostMessages = canPostMessages
                        self.canEditMessages = canEditMessages
                        self.canDeleteMessages = canDeleteMessages
                        self.canInviteUsers = canInviteUsers
                        self.canRestrictMembers = canRestrictMembers
                        self.canPinMessages = canPinMessages
                        self.canPromoteMembers = canPromoteMembers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case isAnonymous = "is_anonymous"
                        case canChangeInfo = "can_change_info"
                        case canPostMessages = "can_post_messages"
                        case canEditMessages = "can_edit_messages"
                        case canDeleteMessages = "can_delete_messages"
                        case canInviteUsers = "can_invite_users"
                        case canRestrictMembers = "can_restrict_members"
                        case canPinMessages = "can_pin_messages"
                        case canPromoteMembers = "can_promote_members"
                    }
                }
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostPromoteChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostPromoteChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostPromoteChatMember.Input.Headers = .init(),
                body: Operations.PostPromoteChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostPromoteChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostPromoteChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPromoteChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPromoteChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//promoteChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostPromoteChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostPromoteChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/promoteChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPromoteChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPromoteChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//promoteChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostPromoteChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostPromoteChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatAdministratorCustomTitle`.
    /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post`.
    public enum PostSetChatAdministratorCustomTitle {
        public static let id: Swift.String = "post/setChatAdministratorCustomTitle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatAdministratorCustomTitle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatAdministratorCustomTitle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatAdministratorCustomTitle.Input.Headers
            /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetChatAdministratorCustomTitle.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// New custom title for the administrator; 0-16 characters, emoji are not allowed
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/urlEncodedForm/custom_title`.
                    public var customTitle: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - customTitle: New custom title for the administrator; 0-16 characters, emoji are not allowed
                    public init(
                        chatId: Operations.PostSetChatAdministratorCustomTitle.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int,
                        customTitle: Swift.String
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.customTitle = customTitle
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case customTitle = "custom_title"
                    }
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetChatAdministratorCustomTitle.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatAdministratorCustomTitle.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatAdministratorCustomTitle.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/multipartForm/custom_title`.
                    public struct CustomTitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CustomTitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case customTitle(OpenAPIRuntime.MultipartPart<Operations.PostSetChatAdministratorCustomTitle.Input.Body.MultipartFormPayload.CustomTitlePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatAdministratorCustomTitle.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetChatAdministratorCustomTitle.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// New custom title for the administrator; 0-16 characters, emoji are not allowed
                    ///
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/json/custom_title`.
                    public var customTitle: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - userId: Unique identifier of the target user
                    ///   - customTitle: New custom title for the administrator; 0-16 characters, emoji are not allowed
                    public init(
                        chatId: Operations.PostSetChatAdministratorCustomTitle.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int,
                        customTitle: Swift.String
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                        self.customTitle = customTitle
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                        case customTitle = "custom_title"
                    }
                }
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetChatAdministratorCustomTitle.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetChatAdministratorCustomTitle.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatAdministratorCustomTitle.Input.Headers = .init(),
                body: Operations.PostSetChatAdministratorCustomTitle.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatAdministratorCustomTitle.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatAdministratorCustomTitle.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatAdministratorCustomTitle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatAdministratorCustomTitle.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatAdministratorCustomTitle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatAdministratorCustomTitle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatAdministratorCustomTitle/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatAdministratorCustomTitle.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatAdministratorCustomTitle.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatAdministratorCustomTitle/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatAdministratorCustomTitle.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatAdministratorCustomTitle.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPermissions`.
    /// - Remark: Generated from `#/paths//setChatPermissions/post`.
    public enum PostSetChatPermissions {
        public static let id: Swift.String = "post/setChatPermissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatPermissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatPermissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatPermissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatPermissions.Input.Headers
            /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetChatPermissions.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/urlEncodedForm/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - permissions:
                    public init(
                        chatId: Operations.PostSetChatPermissions.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        permissions: Components.Schemas.ChatPermissions
                    ) {
                        self.chatId = chatId
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetChatPermissions.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatPermissions.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/multipartForm/permissions`.
                    public struct PermissionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ChatPermissions
                        /// Creates a new `PermissionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ChatPermissions) {
                            self.body = body
                        }
                    }
                    case permissions(OpenAPIRuntime.MultipartPart<Operations.PostSetChatPermissions.Input.Body.MultipartFormPayload.PermissionsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatPermissions.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetChatPermissions.Input.Body.JsonPayload.ChatIdPayload
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.ChatPermissions
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - permissions:
                    public init(
                        chatId: Operations.PostSetChatPermissions.Input.Body.JsonPayload.ChatIdPayload,
                        permissions: Components.Schemas.ChatPermissions
                    ) {
                        self.chatId = chatId
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetChatPermissions.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetChatPermissions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatPermissions.Input.Headers = .init(),
                body: Operations.PostSetChatPermissions.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatPermissions.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatPermissions.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatPermissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatPermissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPermissions/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatPermissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatPermissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPermissions/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatPermissions.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatPermissions.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPermissions/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatPermissions.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatPermissions.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
    ///
    /// - Remark: HTTP `POST /exportChatInviteLink`.
    /// - Remark: Generated from `#/paths//exportChatInviteLink/post`.
    public enum PostExportChatInviteLink {
        public static let id: Swift.String = "post/exportChatInviteLink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostExportChatInviteLink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostExportChatInviteLink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostExportChatInviteLink.Input.Headers
            /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostExportChatInviteLink.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostExportChatInviteLink.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostExportChatInviteLink.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostExportChatInviteLink.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostExportChatInviteLink.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostExportChatInviteLink.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostExportChatInviteLink.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/requestBody/content/application\/json`.
                case json(Operations.PostExportChatInviteLink.Input.Body.JsonPayload)
            }
            public var body: Operations.PostExportChatInviteLink.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostExportChatInviteLink.Input.Headers = .init(),
                body: Operations.PostExportChatInviteLink.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/json/result`.
                        public var result: Swift.String
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.String
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/200/content/application\/json`.
                    case json(Operations.PostExportChatInviteLink.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostExportChatInviteLink.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostExportChatInviteLink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostExportChatInviteLink.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//exportChatInviteLink/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostExportChatInviteLink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostExportChatInviteLink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exportChatInviteLink/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostExportChatInviteLink.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostExportChatInviteLink.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//exportChatInviteLink/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostExportChatInviteLink.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostExportChatInviteLink.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatPhoto`.
    /// - Remark: Generated from `#/paths//setChatPhoto/post`.
    public enum PostSetChatPhoto {
        public static let id: Swift.String = "post/setChatPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatPhoto.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/multipartForm/photo`.
                    public struct PhotoPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `PhotoPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case photo(OpenAPIRuntime.MultipartPart<Operations.PostSetChatPhoto.Input.Body.MultipartFormPayload.PhotoPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatPhoto.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSetChatPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatPhoto.Input.Headers = .init(),
                body: Operations.PostSetChatPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatPhoto.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatPhoto.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatPhoto`.
    /// - Remark: Generated from `#/paths//deleteChatPhoto/post`.
    public enum PostDeleteChatPhoto {
        public static let id: Swift.String = "post/deleteChatPhoto"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatPhoto.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatPhoto.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteChatPhoto.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostDeleteChatPhoto.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostDeleteChatPhoto.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteChatPhoto.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteChatPhoto.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteChatPhoto.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostDeleteChatPhoto.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostDeleteChatPhoto.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteChatPhoto.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteChatPhoto.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteChatPhoto.Input.Headers = .init(),
                body: Operations.PostDeleteChatPhoto.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteChatPhoto.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteChatPhoto.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatPhoto.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatPhoto.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatPhoto/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteChatPhoto.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteChatPhoto.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatPhoto/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatPhoto.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatPhoto.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatPhoto/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteChatPhoto.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteChatPhoto.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatTitle`.
    /// - Remark: Generated from `#/paths//setChatTitle/post`.
    public enum PostSetChatTitle {
        public static let id: Swift.String = "post/setChatTitle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatTitle/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatTitle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatTitle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatTitle.Input.Headers
            /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetChatTitle.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// New chat title, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - title: New chat title, 1-255 characters
                    public init(
                        chatId: Operations.PostSetChatTitle.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        title: Swift.String
                    ) {
                        self.chatId = chatId
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetChatTitle.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatTitle.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostSetChatTitle.Input.Body.MultipartFormPayload.TitlePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatTitle.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetChatTitle.Input.Body.JsonPayload.ChatIdPayload
                    /// New chat title, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - title: New chat title, 1-255 characters
                    public init(
                        chatId: Operations.PostSetChatTitle.Input.Body.JsonPayload.ChatIdPayload,
                        title: Swift.String
                    ) {
                        self.chatId = chatId
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case title
                    }
                }
                /// - Remark: Generated from `#/paths/setChatTitle/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetChatTitle.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetChatTitle.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatTitle.Input.Headers = .init(),
                body: Operations.PostSetChatTitle.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatTitle.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatTitle.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatTitle.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatTitle.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatTitle/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatTitle.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatTitle.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatTitle/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatTitle.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatTitle.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatTitle/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatTitle.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatTitle.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatDescription`.
    /// - Remark: Generated from `#/paths//setChatDescription/post`.
    public enum PostSetChatDescription {
        public static let id: Swift.String = "post/setChatDescription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatDescription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatDescription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatDescription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatDescription.Input.Headers
            /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetChatDescription.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// New chat description, 0-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - description: New chat description, 0-255 characters
                    public init(
                        chatId: Operations.PostSetChatDescription.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        description: Swift.String? = nil
                    ) {
                        self.chatId = chatId
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetChatDescription.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatDescription.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/multipartForm/description`.
                    public struct DescriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DescriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.PostSetChatDescription.Input.Body.MultipartFormPayload.DescriptionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatDescription.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetChatDescription.Input.Body.JsonPayload.ChatIdPayload
                    /// New chat description, 0-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - description: New chat description, 0-255 characters
                    public init(
                        chatId: Operations.PostSetChatDescription.Input.Body.JsonPayload.ChatIdPayload,
                        description: Swift.String? = nil
                    ) {
                        self.chatId = chatId
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/setChatDescription/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetChatDescription.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetChatDescription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatDescription.Input.Headers = .init(),
                body: Operations.PostSetChatDescription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatDescription.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatDescription.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatDescription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatDescription.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatDescription/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatDescription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatDescription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatDescription/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatDescription.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatDescription.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatDescription/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatDescription.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatDescription.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /pinChatMessage`.
    /// - Remark: Generated from `#/paths//pinChatMessage/post`.
    public enum PostPinChatMessage {
        public static let id: Swift.String = "post/pinChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pinChatMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPinChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostPinChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostPinChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostPinChatMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Identifier of a message to pin
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of a message to pin
                    ///   - disableNotification: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    public init(
                        chatId: Operations.PostPinChatMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        disableNotification: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.disableNotification = disableNotification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case disableNotification = "disable_notification"
                    }
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostPinChatMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostPinChatMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostPinChatMessage.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostPinChatMessage.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostPinChatMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostPinChatMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Identifier of a message to pin
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    ///
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of a message to pin
                    ///   - disableNotification: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
                    public init(
                        chatId: Operations.PostPinChatMessage.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        disableNotification: Swift.Bool? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.disableNotification = disableNotification
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case disableNotification = "disable_notification"
                    }
                }
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostPinChatMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostPinChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostPinChatMessage.Input.Headers = .init(),
                body: Operations.PostPinChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostPinChatMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostPinChatMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPinChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPinChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//pinChatMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostPinChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostPinChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pinChatMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostPinChatMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostPinChatMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//pinChatMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostPinChatMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostPinChatMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinChatMessage`.
    /// - Remark: Generated from `#/paths//unpinChatMessage/post`.
    public enum PostUnpinChatMessage {
        public static let id: Swift.String = "post/unpinChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unpinChatMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnpinChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnpinChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUnpinChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostUnpinChatMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    public init(
                        chatId: Operations.PostUnpinChatMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostUnpinChatMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostUnpinChatMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostUnpinChatMessage.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostUnpinChatMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostUnpinChatMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    ///
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
                    public init(
                        chatId: Operations.PostUnpinChatMessage.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostUnpinChatMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostUnpinChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUnpinChatMessage.Input.Headers = .init(),
                body: Operations.PostUnpinChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostUnpinChatMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUnpinChatMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnpinChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnpinChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinChatMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostUnpinChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostUnpinChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinChatMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnpinChatMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnpinChatMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinChatMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostUnpinChatMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostUnpinChatMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /unpinAllChatMessages`.
    /// - Remark: Generated from `#/paths//unpinAllChatMessages/post`.
    public enum PostUnpinAllChatMessages {
        public static let id: Swift.String = "post/unpinAllChatMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnpinAllChatMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUnpinAllChatMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUnpinAllChatMessages.Input.Headers
            /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostUnpinAllChatMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostUnpinAllChatMessages.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostUnpinAllChatMessages.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostUnpinAllChatMessages.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostUnpinAllChatMessages.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostUnpinAllChatMessages.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostUnpinAllChatMessages.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/requestBody/content/application\/json`.
                case json(Operations.PostUnpinAllChatMessages.Input.Body.JsonPayload)
            }
            public var body: Operations.PostUnpinAllChatMessages.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUnpinAllChatMessages.Input.Headers = .init(),
                body: Operations.PostUnpinAllChatMessages.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/200/content/application\/json`.
                    case json(Operations.PostUnpinAllChatMessages.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUnpinAllChatMessages.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnpinAllChatMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnpinAllChatMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinAllChatMessages/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostUnpinAllChatMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostUnpinAllChatMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unpinAllChatMessages/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUnpinAllChatMessages.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUnpinAllChatMessages.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//unpinAllChatMessages/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostUnpinAllChatMessages.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostUnpinAllChatMessages.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /leaveChat`.
    /// - Remark: Generated from `#/paths//leaveChat/post`.
    public enum PostLeaveChat {
        public static let id: Swift.String = "post/leaveChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/leaveChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLeaveChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLeaveChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostLeaveChat.Input.Headers
            /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostLeaveChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostLeaveChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostLeaveChat.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostLeaveChat.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostLeaveChat.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostLeaveChat.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostLeaveChat.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/leaveChat/POST/requestBody/content/application\/json`.
                case json(Operations.PostLeaveChat.Input.Body.JsonPayload)
            }
            public var body: Operations.PostLeaveChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostLeaveChat.Input.Headers = .init(),
                body: Operations.PostLeaveChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/200/content/application\/json`.
                    case json(Operations.PostLeaveChat.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLeaveChat.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLeaveChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostLeaveChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//leaveChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostLeaveChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostLeaveChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/leaveChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/leaveChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLeaveChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostLeaveChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//leaveChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostLeaveChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostLeaveChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
    ///
    /// - Remark: HTTP `POST /getChat`.
    /// - Remark: Generated from `#/paths//getChat/post`.
    public enum PostGetChat {
        public static let id: Swift.String = "post/getChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChat.Input.Headers
            /// - Remark: Generated from `#/paths/getChat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChat.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChat.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChat.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChat.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChat/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetChat.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChat.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChat/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChat.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChat.Input.Headers = .init(),
                body: Operations.PostGetChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Chat
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Chat
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChat.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChat.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChat/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChat/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChat/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChat.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChat.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChat/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChat.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChat.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
    ///
    /// - Remark: HTTP `POST /getChatAdministrators`.
    /// - Remark: Generated from `#/paths//getChatAdministrators/post`.
    public enum PostGetChatAdministrators {
        public static let id: Swift.String = "post/getChatAdministrators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatAdministrators/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatAdministrators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatAdministrators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChatAdministrators.Input.Headers
            /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetChatAdministrators.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChatAdministrators.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChatAdministrators.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChatAdministrators.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChatAdministrators.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetChatAdministrators.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChatAdministrators.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChatAdministrators.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChatAdministrators.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChatAdministrators.Input.Headers = .init(),
                body: Operations.PostGetChatAdministrators.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.ChatMember]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.ChatMember]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChatAdministrators.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChatAdministrators.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatAdministrators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatAdministrators.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatAdministrators/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChatAdministrators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChatAdministrators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatAdministrators/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatAdministrators.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatAdministrators.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatAdministrators/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChatAdministrators.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChatAdministrators.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get the number of members in a chat. Returns *Int* on success.
    ///
    /// - Remark: HTTP `POST /getChatMembersCount`.
    /// - Remark: Generated from `#/paths//getChatMembersCount/post`.
    public enum PostGetChatMembersCount {
        public static let id: Swift.String = "post/getChatMembersCount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMembersCount/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMembersCount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMembersCount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChatMembersCount.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetChatMembersCount.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChatMembersCount.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChatMembersCount.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMembersCount.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChatMembersCount.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetChatMembersCount.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    public init(chatId: Operations.PostGetChatMembersCount.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChatMembersCount.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChatMembersCount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChatMembersCount.Input.Headers = .init(),
                body: Operations.PostGetChatMembersCount.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/json/result`.
                        public var result: Swift.Int
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Int
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChatMembersCount.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChatMembersCount.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMembersCount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMembersCount.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembersCount/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChatMembersCount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChatMembersCount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMembersCount/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMembersCount.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMembersCount.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMembersCount/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChatMembersCount.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChatMembersCount.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
    ///
    /// - Remark: HTTP `POST /getChatMember`.
    /// - Remark: Generated from `#/paths//getChatMember/post`.
    public enum PostGetChatMember {
        public static let id: Swift.String = "post/getChatMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getChatMember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetChatMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetChatMember.Input.Headers
            /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostGetChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    public init(
                        chatId: Operations.PostGetChatMember.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        userId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetChatMember.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMember.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostGetChatMember.Input.Body.MultipartFormPayload.UserIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetChatMember.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostGetChatMember.Input.Body.JsonPayload.ChatIdPayload
                    /// Unique identifier of the target user
                    ///
                    /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
                    ///   - userId: Unique identifier of the target user
                    public init(
                        chatId: Operations.PostGetChatMember.Input.Body.JsonPayload.ChatIdPayload,
                        userId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.userId = userId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case userId = "user_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getChatMember/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetChatMember.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetChatMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetChatMember.Input.Headers = .init(),
                body: Operations.PostGetChatMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.ChatMember
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.ChatMember
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetChatMember.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetChatMember.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMember/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetChatMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetChatMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getChatMember/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getChatMember/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetChatMember.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetChatMember.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getChatMember/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetChatMember.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetChatMember.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setChatStickerSet`.
    /// - Remark: Generated from `#/paths//setChatStickerSet/post`.
    public enum PostSetChatStickerSet {
        public static let id: Swift.String = "post/setChatStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setChatStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetChatStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetChatStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostSetChatStickerSet.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Name of the sticker set to be set as the group sticker set
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/urlEncodedForm/sticker_set_name`.
                    public var stickerSetName: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - stickerSetName: Name of the sticker set to be set as the group sticker set
                    public init(
                        chatId: Operations.PostSetChatStickerSet.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        stickerSetName: Swift.String
                    ) {
                        self.chatId = chatId
                        self.stickerSetName = stickerSetName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case stickerSetName = "sticker_set_name"
                    }
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetChatStickerSet.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetChatStickerSet.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/multipartForm/sticker_set_name`.
                    public struct StickerSetNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `StickerSetNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case stickerSetName(OpenAPIRuntime.MultipartPart<Operations.PostSetChatStickerSet.Input.Body.MultipartFormPayload.StickerSetNamePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetChatStickerSet.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostSetChatStickerSet.Input.Body.JsonPayload.ChatIdPayload
                    /// Name of the sticker set to be set as the group sticker set
                    ///
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/json/sticker_set_name`.
                    public var stickerSetName: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///   - stickerSetName: Name of the sticker set to be set as the group sticker set
                    public init(
                        chatId: Operations.PostSetChatStickerSet.Input.Body.JsonPayload.ChatIdPayload,
                        stickerSetName: Swift.String
                    ) {
                        self.chatId = chatId
                        self.stickerSetName = stickerSetName
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case stickerSetName = "sticker_set_name"
                    }
                }
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetChatStickerSet.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetChatStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetChatStickerSet.Input.Headers = .init(),
                body: Operations.PostSetChatStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetChatStickerSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetChatStickerSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetChatStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetChatStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setChatStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetChatStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetChatStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setChatStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetChatStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetChatStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteChatStickerSet`.
    /// - Remark: Generated from `#/paths//deleteChatStickerSet/post`.
    public enum PostDeleteChatStickerSet {
        public static let id: Swift.String = "post/deleteChatStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteChatStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteChatStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostDeleteChatStickerSet.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    public init(chatId: Operations.PostDeleteChatStickerSet.Input.Body.UrlEncodedFormPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteChatStickerSet.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteChatStickerSet.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteChatStickerSet.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostDeleteChatStickerSet.Input.Body.JsonPayload.ChatIdPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
                    public init(chatId: Operations.PostDeleteChatStickerSet.Input.Body.JsonPayload.ChatIdPayload) {
                        self.chatId = chatId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteChatStickerSet.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteChatStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteChatStickerSet.Input.Headers = .init(),
                body: Operations.PostDeleteChatStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteChatStickerSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteChatStickerSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteChatStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteChatStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteChatStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteChatStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteChatStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteChatStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteChatStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteChatStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
    ///
    /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
    ///
    /// - Remark: HTTP `POST /answerCallbackQuery`.
    /// - Remark: Generated from `#/paths//answerCallbackQuery/post`.
    public enum PostAnswerCallbackQuery {
        public static let id: Swift.String = "post/answerCallbackQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerCallbackQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerCallbackQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAnswerCallbackQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/callback_query_id`.
                    public var callbackQueryId: Swift.String
                    /// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String?
                    /// If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/show_alert`.
                    public var showAlert: Swift.Bool?
                    /// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///
                    /// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/url`.
                    public var url: Swift.String?
                    /// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/urlEncodedForm/cache_time`.
                    public var cacheTime: Swift.Int?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - callbackQueryId: Unique identifier for the query to be answered
                    ///   - text: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///   - showAlert: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///   - url: URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///   - cacheTime: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    public init(
                        callbackQueryId: Swift.String,
                        text: Swift.String? = nil,
                        showAlert: Swift.Bool? = nil,
                        url: Swift.String? = nil,
                        cacheTime: Swift.Int? = nil
                    ) {
                        self.callbackQueryId = callbackQueryId
                        self.text = text
                        self.showAlert = showAlert
                        self.url = url
                        self.cacheTime = cacheTime
                    }
                    public enum CodingKeys: String, CodingKey {
                        case callbackQueryId = "callback_query_id"
                        case text
                        case showAlert = "show_alert"
                        case url
                        case cacheTime = "cache_time"
                    }
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAnswerCallbackQuery.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/callback_query_id`.
                    public struct CallbackQueryIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CallbackQueryIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case callbackQueryId(OpenAPIRuntime.MultipartPart<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload.CallbackQueryIdPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/text`.
                    public struct TextPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TextPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload.TextPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/show_alert`.
                    public struct ShowAlertPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ShowAlertPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case showAlert(OpenAPIRuntime.MultipartPart<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload.ShowAlertPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/url`.
                    public struct UrlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UrlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case url(OpenAPIRuntime.MultipartPart<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload.UrlPayload>)
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/multipartForm/cache_time`.
                    public struct CacheTimePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CacheTimePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case cacheTime(OpenAPIRuntime.MultipartPart<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload.CacheTimePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAnswerCallbackQuery.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/callback_query_id`.
                    public var callbackQueryId: Swift.String
                    /// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/text`.
                    public var text: Swift.String?
                    /// If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/show_alert`.
                    public var showAlert: Swift.Bool?
                    /// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///
                    /// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/url`.
                    public var url: Swift.String?
                    /// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    ///
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/json/cache_time`.
                    public var cacheTime: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - callbackQueryId: Unique identifier for the query to be answered
                    ///   - text: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
                    ///   - showAlert: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
                    ///   - url: URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  
                    ///   - cacheTime: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
                    public init(
                        callbackQueryId: Swift.String,
                        text: Swift.String? = nil,
                        showAlert: Swift.Bool? = nil,
                        url: Swift.String? = nil,
                        cacheTime: Swift.Int? = nil
                    ) {
                        self.callbackQueryId = callbackQueryId
                        self.text = text
                        self.showAlert = showAlert
                        self.url = url
                        self.cacheTime = cacheTime
                    }
                    public enum CodingKeys: String, CodingKey {
                        case callbackQueryId = "callback_query_id"
                        case text
                        case showAlert = "show_alert"
                        case url
                        case cacheTime = "cache_time"
                    }
                }
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/requestBody/content/application\/json`.
                case json(Operations.PostAnswerCallbackQuery.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAnswerCallbackQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAnswerCallbackQuery.Input.Headers = .init(),
                body: Operations.PostAnswerCallbackQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAnswerCallbackQuery.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAnswerCallbackQuery.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerCallbackQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerCallbackQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerCallbackQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAnswerCallbackQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAnswerCallbackQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerCallbackQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerCallbackQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerCallbackQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerCallbackQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAnswerCallbackQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAnswerCallbackQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to change the list of the bot's commands. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setMyCommands`.
    /// - Remark: Generated from `#/paths//setMyCommands/post`.
    public enum PostSetMyCommands {
        public static let id: Swift.String = "post/setMyCommands"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setMyCommands/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetMyCommands.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetMyCommands.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetMyCommands.Input.Headers
            /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    ///
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/urlEncodedForm/commands`.
                    public var commands: [Components.Schemas.BotCommand]
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - commands: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    public init(commands: [Components.Schemas.BotCommand]) {
                        self.commands = commands
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commands
                    }
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetMyCommands.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/multipartForm/commands`.
                    public struct CommandsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.BotCommand
                        /// Creates a new `CommandsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.BotCommand) {
                            self.body = body
                        }
                    }
                    case commands(OpenAPIRuntime.MultipartPart<Operations.PostSetMyCommands.Input.Body.MultipartFormPayload.CommandsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetMyCommands.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    ///
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/json/commands`.
                    public var commands: [Components.Schemas.BotCommand]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commands: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
                    public init(commands: [Components.Schemas.BotCommand]) {
                        self.commands = commands
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commands
                    }
                }
                /// - Remark: Generated from `#/paths/setMyCommands/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetMyCommands.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetMyCommands.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetMyCommands.Input.Headers = .init(),
                body: Operations.PostSetMyCommands.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetMyCommands.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetMyCommands.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetMyCommands.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetMyCommands.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setMyCommands/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetMyCommands.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetMyCommands.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setMyCommands/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetMyCommands.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetMyCommands.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setMyCommands/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetMyCommands.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetMyCommands.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
    ///
    /// - Remark: HTTP `POST /getMyCommands`.
    /// - Remark: Generated from `#/paths//getMyCommands/post`.
    public enum PostGetMyCommands {
        public static let id: Swift.String = "post/getMyCommands"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getMyCommands/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMyCommands.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetMyCommands.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetMyCommands.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostGetMyCommands.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.BotCommand]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.BotCommand]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetMyCommands.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetMyCommands.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMyCommands.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMyCommands.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMyCommands/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetMyCommands.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetMyCommands.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getMyCommands/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetMyCommands.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetMyCommands.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getMyCommands/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetMyCommands.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetMyCommands.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageText`.
    /// - Remark: Generated from `#/paths//editMessageText/post`.
    public enum PostEditMessageText {
        public static let id: Swift.String = "post/editMessageText"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageText/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageText.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageText.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageText.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostEditMessageText.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// New text of the message, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/disable_web_page_preview`.
                    public var disableWebPagePreview: Swift.Bool?
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - text: New text of the message, 1-4096 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disableWebPagePreview: Disables link previews for links in this message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageText.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        text: Swift.String,
                        parseMode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disableWebPagePreview: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.text = text
                        self.parseMode = parseMode
                        self.entities = entities
                        self.disableWebPagePreview = disableWebPagePreview
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case text
                        case parseMode = "parse_mode"
                        case entities
                        case disableWebPagePreview = "disable_web_page_preview"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEditMessageText.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/text`.
                    public struct TextPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TextPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case text(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.TextPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/entities`.
                    public struct EntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `EntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case entities(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.EntitiesPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/disable_web_page_preview`.
                    public struct DisableWebPagePreviewPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableWebPagePreviewPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableWebPagePreview(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.DisableWebPagePreviewPayload>)
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageText.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageText.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostEditMessageText.Input.Body.JsonPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// New text of the message, 1-4096 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/text`.
                    public var text: Swift.String
                    /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/entities`.
                    public var entities: [Components.Schemas.MessageEntity]?
                    /// Disables link previews for links in this message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/disable_web_page_preview`.
                    public var disableWebPagePreview: Swift.Bool?
                    /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - text: New text of the message, 1-4096 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - entities: List of special entities that appear in message text, which can be specified instead of *parse\_mode*
                    ///   - disableWebPagePreview: Disables link previews for links in this message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageText.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        text: Swift.String,
                        parseMode: Swift.String? = nil,
                        entities: [Components.Schemas.MessageEntity]? = nil,
                        disableWebPagePreview: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.text = text
                        self.parseMode = parseMode
                        self.entities = entities
                        self.disableWebPagePreview = disableWebPagePreview
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case text
                        case parseMode = "parse_mode"
                        case entities
                        case disableWebPagePreview = "disable_web_page_preview"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageText/POST/requestBody/content/application\/json`.
                case json(Operations.PostEditMessageText.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEditMessageText.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageText.Input.Headers = .init(),
                body: Operations.PostEditMessageText.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/json/result`.
                        public var result: Operations.PostEditMessageText.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostEditMessageText.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageText.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageText.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageText.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageText.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageText/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageText.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageText.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageText/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageText/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageText.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageText.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageText/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageText.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageText.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageCaption`.
    /// - Remark: Generated from `#/paths//editMessageCaption/post`.
    public enum PostEditMessageCaption {
        public static let id: Swift.String = "post/editMessageCaption"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageCaption/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageCaption.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageCaption.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageCaption.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostEditMessageCaption.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// New caption of the message, 0-1024 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/caption_entities`.
                    public var captionEntities: [Components.Schemas.MessageEntity]?
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - caption: New caption of the message, 0-1024 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - captionEntities: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageCaption.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        caption: Swift.String? = nil,
                        parseMode: Swift.String? = nil,
                        captionEntities: [Components.Schemas.MessageEntity]? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.caption = caption
                        self.parseMode = parseMode
                        self.captionEntities = captionEntities
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case caption
                        case parseMode = "parse_mode"
                        case captionEntities = "caption_entities"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEditMessageCaption.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/caption`.
                    public struct CaptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CaptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case caption(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.CaptionPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/parse_mode`.
                    public struct ParseModePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ParseModePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case parseMode(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.ParseModePayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/caption_entities`.
                    public struct CaptionEntitiesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MessageEntity
                        /// Creates a new `CaptionEntitiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MessageEntity) {
                            self.body = body
                        }
                    }
                    case captionEntities(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.CaptionEntitiesPayload>)
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageCaption.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostEditMessageCaption.Input.Body.JsonPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// New caption of the message, 0-1024 characters after entities parsing
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/caption`.
                    public var caption: Swift.String?
                    /// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/parse_mode`.
                    public var parseMode: Swift.String?
                    /// List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/caption_entities`.
                    public var captionEntities: [Components.Schemas.MessageEntity]?
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - caption: New caption of the message, 0-1024 characters after entities parsing
                    ///   - parseMode: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
                    ///   - captionEntities: List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageCaption.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        caption: Swift.String? = nil,
                        parseMode: Swift.String? = nil,
                        captionEntities: [Components.Schemas.MessageEntity]? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.caption = caption
                        self.parseMode = parseMode
                        self.captionEntities = captionEntities
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case caption
                        case parseMode = "parse_mode"
                        case captionEntities = "caption_entities"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/requestBody/content/application\/json`.
                case json(Operations.PostEditMessageCaption.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEditMessageCaption.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageCaption.Input.Headers = .init(),
                body: Operations.PostEditMessageCaption.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/json/result`.
                        public var result: Operations.PostEditMessageCaption.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostEditMessageCaption.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageCaption.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageCaption.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageCaption.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageCaption.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageCaption/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageCaption.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageCaption.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageCaption/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageCaption.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageCaption.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageCaption/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageCaption.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageCaption.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageMedia`.
    /// - Remark: Generated from `#/paths//editMessageMedia/post`.
    public enum PostEditMessageMedia {
        public static let id: Swift.String = "post/editMessageMedia"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageMedia/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageMedia.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageMedia.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageMedia.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/media`.
                    public struct MediaPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputMedia
                        /// Creates a new `MediaPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputMedia) {
                            self.body = body
                        }
                    }
                    case media(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload.MediaPayload>)
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageMedia.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostEditMessageMedia.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageMedia.Input.Headers = .init(),
                body: Operations.PostEditMessageMedia.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/json/result`.
                        public var result: Operations.PostEditMessageMedia.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostEditMessageMedia.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageMedia.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageMedia.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageMedia.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageMedia.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageMedia/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageMedia.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageMedia.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageMedia/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageMedia.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageMedia.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageMedia/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageMedia.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageMedia.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
    ///
    /// - Remark: HTTP `POST /editMessageReplyMarkup`.
    /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post`.
    public enum PostEditMessageReplyMarkup {
        public static let id: Swift.String = "post/editMessageReplyMarkup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageReplyMarkup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostEditMessageReplyMarkup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostEditMessageReplyMarkup.Input.Headers
            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostEditMessageReplyMarkup.Input.Body.UrlEncodedFormPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageReplyMarkup.Input.Body.UrlEncodedFormPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostEditMessageReplyMarkup.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageReplyMarkup.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageReplyMarkup.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageReplyMarkup.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostEditMessageReplyMarkup.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostEditMessageReplyMarkup.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostEditMessageReplyMarkup.Input.Body.JsonPayload.ChatIdPayload?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the message to edit
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostEditMessageReplyMarkup.Input.Body.JsonPayload.ChatIdPayload? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/requestBody/content/application\/json`.
                case json(Operations.PostEditMessageReplyMarkup.Input.Body.JsonPayload)
            }
            public var body: Operations.PostEditMessageReplyMarkup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostEditMessageReplyMarkup.Input.Headers = .init(),
                body: Operations.PostEditMessageReplyMarkup.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/json/result`.
                        public var result: Operations.PostEditMessageReplyMarkup.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostEditMessageReplyMarkup.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/200/content/application\/json`.
                    case json(Operations.PostEditMessageReplyMarkup.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostEditMessageReplyMarkup.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageReplyMarkup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageReplyMarkup.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostEditMessageReplyMarkup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostEditMessageReplyMarkup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/editMessageReplyMarkup/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostEditMessageReplyMarkup.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostEditMessageReplyMarkup.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//editMessageReplyMarkup/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostEditMessageReplyMarkup.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostEditMessageReplyMarkup.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
    ///
    /// - Remark: HTTP `POST /stopPoll`.
    /// - Remark: Generated from `#/paths//stopPoll/post`.
    public enum PostStopPoll {
        public static let id: Swift.String = "post/stopPoll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stopPoll/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostStopPoll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostStopPoll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostStopPoll.Input.Headers
            /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostStopPoll.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Identifier of the original message with the poll
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the original message with the poll
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostStopPoll.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostStopPoll.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostStopPoll.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostStopPoll.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostStopPoll.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostStopPoll.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostStopPoll.Input.Body.JsonPayload.ChatIdPayload
                    /// Identifier of the original message with the poll
                    ///
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the original message with the poll
                    ///   - replyMarkup:
                    public init(
                        chatId: Operations.PostStopPoll.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/stopPoll/POST/requestBody/content/application\/json`.
                case json(Operations.PostStopPoll.Input.Body.JsonPayload)
            }
            public var body: Operations.PostStopPoll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostStopPoll.Input.Headers = .init(),
                body: Operations.PostStopPoll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Poll
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Poll
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/200/content/application\/json`.
                    case json(Operations.PostStopPoll.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostStopPoll.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostStopPoll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostStopPoll.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopPoll/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostStopPoll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostStopPoll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stopPoll/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stopPoll/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostStopPoll.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostStopPoll.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//stopPoll/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostStopPoll.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostStopPoll.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a message, including service messages, with the following limitations:  
    /// \- A message can only be deleted if it was sent less than 48 hours ago.  
    /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  
    /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.  
    /// \- Bots can delete incoming messages in private chats.  
    /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.  
    /// \- If the bot is an administrator of a group, it can delete any message there.  
    /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.  
    /// Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteMessage`.
    /// - Remark: Generated from `#/paths//deleteMessage/post`.
    public enum PostDeleteMessage {
        public static let id: Swift.String = "post/deleteMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteMessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteMessage.Input.Headers
            /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Operations.PostDeleteMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload
                    /// Identifier of the message to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the message to delete
                    public init(
                        chatId: Operations.PostDeleteMessage.Input.Body.UrlEncodedFormPayload.ChatIdPayload,
                        messageId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteMessage.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessage.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostDeleteMessage.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteMessage.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id`.
                    public struct ChatIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1,
                                self.value2
                            ])
                        }
                    }
                    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/chat_id`.
                    public var chatId: Operations.PostDeleteMessage.Input.Body.JsonPayload.ChatIdPayload
                    /// Identifier of the message to delete
                    ///
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
                    ///   - messageId: Identifier of the message to delete
                    public init(
                        chatId: Operations.PostDeleteMessage.Input.Body.JsonPayload.ChatIdPayload,
                        messageId: Swift.Int
                    ) {
                        self.chatId = chatId
                        self.messageId = messageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case messageId = "message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/deleteMessage/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteMessage.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteMessage.Input.Headers = .init(),
                body: Operations.PostDeleteMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteMessage.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteMessage.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessage/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteMessage/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteMessage.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteMessage.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteMessage/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteMessage.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteMessage.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendSticker`.
    /// - Remark: Generated from `#/paths//sendSticker/post`.
    public enum PostSendSticker {
        public static let id: Swift.String = "post/sendSticker"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendSticker/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendSticker.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendSticker.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendSticker.Input.Headers
            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker`.
                    public struct StickerPayload: Sendable, Hashable {
                        /// Sticker to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendSticker.Input.Body.MultipartFormPayload.StickerPayload.BodyPayload
                        /// Creates a new `StickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendSticker.Input.Body.MultipartFormPayload.StickerPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.StickerPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
                        ///
                        /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value1`.
                            public var value1: Components.Schemas.InlineKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value2`.
                            public var value2: Components.Schemas.ReplyKeyboardMarkup?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value3`.
                            public var value3: Components.Schemas.ReplyKeyboardRemove?
                            /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/reply_markup/content/body/value4`.
                            public var value4: Components.Schemas.ForceReply?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            ///   - value3:
                            ///   - value4:
                            public init(
                                value1: Components.Schemas.InlineKeyboardMarkup? = nil,
                                value2: Components.Schemas.ReplyKeyboardMarkup? = nil,
                                value3: Components.Schemas.ReplyKeyboardRemove? = nil,
                                value4: Components.Schemas.ForceReply? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                                self.value3 = value3
                                self.value4 = value4
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value3 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value4 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2,
                                        self.value3,
                                        self.value4
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try self.value1?.encode(to: encoder)
                                try self.value2?.encode(to: encoder)
                                try self.value3?.encode(to: encoder)
                                try self.value4?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSendSticker.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSendSticker.Input.Body.MultipartFormPayload.ReplyMarkupPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/multipartForm/send_at`.
                    public struct SendAtPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendAtPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendAt(OpenAPIRuntime.MultipartPart<Operations.PostSendSticker.Input.Body.MultipartFormPayload.SendAtPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendSticker/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendSticker.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSendSticker.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendSticker.Input.Headers = .init(),
                body: Operations.PostSendSticker.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendSticker.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendSticker.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendSticker.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendSticker.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendSticker/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendSticker.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendSticker.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendSticker/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendSticker/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendSticker.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendSticker.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendSticker/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendSticker.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendSticker.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
    ///
    /// - Remark: HTTP `POST /getStickerSet`.
    /// - Remark: Generated from `#/paths//getStickerSet/post`.
    public enum PostGetStickerSet {
        public static let id: Swift.String = "post/getStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Name of the sticker set
                    ///
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/urlEncodedForm/name`.
                    public var name: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the sticker set
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetStickerSet.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/multipartForm/name`.
                    public struct NamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.PostGetStickerSet.Input.Body.MultipartFormPayload.NamePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetStickerSet.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Name of the sticker set
                    ///
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the sticker set
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/getStickerSet/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetStickerSet.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetStickerSet.Input.Headers = .init(),
                body: Operations.PostGetStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.StickerSet
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.StickerSet
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetStickerSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetStickerSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
    ///
    /// - Remark: HTTP `POST /uploadStickerFile`.
    /// - Remark: Generated from `#/paths//uploadStickerFile/post`.
    public enum PostUploadStickerFile {
        public static let id: Swift.String = "post/uploadStickerFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploadStickerFile/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUploadStickerFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUploadStickerFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUploadStickerFile.Input.Headers
            /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostUploadStickerFile.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/multipartForm/png_sticker`.
                    public struct PngStickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `PngStickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case pngSticker(OpenAPIRuntime.MultipartPart<Operations.PostUploadStickerFile.Input.Body.MultipartFormPayload.PngStickerPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostUploadStickerFile.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostUploadStickerFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUploadStickerFile.Input.Headers = .init(),
                body: Operations.PostUploadStickerFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.File
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.File
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/200/content/application\/json`.
                    case json(Operations.PostUploadStickerFile.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUploadStickerFile.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUploadStickerFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUploadStickerFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//uploadStickerFile/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostUploadStickerFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostUploadStickerFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploadStickerFile/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUploadStickerFile.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostUploadStickerFile.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//uploadStickerFile/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostUploadStickerFile.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostUploadStickerFile.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /createNewStickerSet`.
    /// - Remark: Generated from `#/paths//createNewStickerSet/post`.
    public enum PostCreateNewStickerSet {
        public static let id: Swift.String = "post/createNewStickerSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCreateNewStickerSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostCreateNewStickerSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostCreateNewStickerSet.Input.Headers
            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/name`.
                    public struct NamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.NamePayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.TitlePayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker`.
                    public struct PngStickerPayload: Sendable, Hashable {
                        /// **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/png_sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.PngStickerPayload.BodyPayload
                        /// Creates a new `PngStickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.PngStickerPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case pngSticker(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.PngStickerPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/tgs_sticker`.
                    public struct TgsStickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `TgsStickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case tgsSticker(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.TgsStickerPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/emojis`.
                    public struct EmojisPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `EmojisPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emojis(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.EmojisPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/contains_masks`.
                    public struct ContainsMasksPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ContainsMasksPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case containsMasks(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.ContainsMasksPayload>)
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/multipartForm/mask_position`.
                    public struct MaskPositionPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MaskPosition
                        /// Creates a new `MaskPositionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MaskPosition) {
                            self.body = body
                        }
                    }
                    case maskPosition(OpenAPIRuntime.MultipartPart<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload.MaskPositionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostCreateNewStickerSet.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostCreateNewStickerSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostCreateNewStickerSet.Input.Headers = .init(),
                body: Operations.PostCreateNewStickerSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostCreateNewStickerSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostCreateNewStickerSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCreateNewStickerSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCreateNewStickerSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createNewStickerSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostCreateNewStickerSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostCreateNewStickerSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/createNewStickerSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostCreateNewStickerSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostCreateNewStickerSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//createNewStickerSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostCreateNewStickerSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostCreateNewStickerSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /addStickerToSet`.
    /// - Remark: Generated from `#/paths//addStickerToSet/post`.
    public enum PostAddStickerToSet {
        public static let id: Swift.String = "post/addStickerToSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/addStickerToSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddStickerToSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAddStickerToSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAddStickerToSet.Input.Headers
            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/name`.
                    public struct NamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.NamePayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker`.
                    public struct PngStickerPayload: Sendable, Hashable {
                        /// **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
                        ///
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/png_sticker/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.PngStickerPayload.BodyPayload
                        /// Creates a new `PngStickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.PngStickerPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case pngSticker(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.PngStickerPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/tgs_sticker`.
                    public struct TgsStickerPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InputFile
                        /// Creates a new `TgsStickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InputFile) {
                            self.body = body
                        }
                    }
                    case tgsSticker(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.TgsStickerPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/emojis`.
                    public struct EmojisPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `EmojisPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case emojis(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.EmojisPayload>)
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/multipartForm/mask_position`.
                    public struct MaskPositionPayload: Sendable, Hashable {
                        public var body: Components.Schemas.MaskPosition
                        /// Creates a new `MaskPositionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.MaskPosition) {
                            self.body = body
                        }
                    }
                    case maskPosition(OpenAPIRuntime.MultipartPart<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload.MaskPositionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAddStickerToSet.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostAddStickerToSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAddStickerToSet.Input.Headers = .init(),
                body: Operations.PostAddStickerToSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAddStickerToSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAddStickerToSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddStickerToSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddStickerToSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addStickerToSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAddStickerToSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAddStickerToSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/addStickerToSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAddStickerToSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAddStickerToSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//addStickerToSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAddStickerToSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAddStickerToSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerPositionInSet`.
    /// - Remark: Generated from `#/paths//setStickerPositionInSet/post`.
    public enum PostSetStickerPositionInSet {
        public static let id: Swift.String = "post/setStickerPositionInSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetStickerPositionInSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetStickerPositionInSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetStickerPositionInSet.Input.Headers
            /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm/sticker`.
                    public var sticker: Swift.String
                    /// New sticker position in the set, zero-based
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/urlEncodedForm/position`.
                    public var position: Swift.Int
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    ///   - position: New sticker position in the set, zero-based
                    public init(
                        sticker: Swift.String,
                        position: Swift.Int
                    ) {
                        self.sticker = sticker
                        self.position = position
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetStickerPositionInSet.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm/sticker`.
                    public struct StickerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `StickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.PostSetStickerPositionInSet.Input.Body.MultipartFormPayload.StickerPayload>)
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/multipartForm/position`.
                    public struct PositionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PositionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case position(OpenAPIRuntime.MultipartPart<Operations.PostSetStickerPositionInSet.Input.Body.MultipartFormPayload.PositionPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetStickerPositionInSet.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json/sticker`.
                    public var sticker: Swift.String
                    /// New sticker position in the set, zero-based
                    ///
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/json/position`.
                    public var position: Swift.Int
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    ///   - position: New sticker position in the set, zero-based
                    public init(
                        sticker: Swift.String,
                        position: Swift.Int
                    ) {
                        self.sticker = sticker
                        self.position = position
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                        case position
                    }
                }
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetStickerPositionInSet.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetStickerPositionInSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetStickerPositionInSet.Input.Headers = .init(),
                body: Operations.PostSetStickerPositionInSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetStickerPositionInSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetStickerPositionInSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetStickerPositionInSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetStickerPositionInSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerPositionInSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetStickerPositionInSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetStickerPositionInSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerPositionInSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetStickerPositionInSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetStickerPositionInSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerPositionInSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetStickerPositionInSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetStickerPositionInSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /deleteStickerFromSet`.
    /// - Remark: Generated from `#/paths//deleteStickerFromSet/post`.
    public enum PostDeleteStickerFromSet {
        public static let id: Swift.String = "post/deleteStickerFromSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteStickerFromSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostDeleteStickerFromSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostDeleteStickerFromSet.Input.Headers
            /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/urlEncodedForm/sticker`.
                    public var sticker: Swift.String
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    public init(sticker: Swift.String) {
                        self.sticker = sticker
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                    }
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostDeleteStickerFromSet.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/multipartForm/sticker`.
                    public struct StickerPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `StickerPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sticker(OpenAPIRuntime.MultipartPart<Operations.PostDeleteStickerFromSet.Input.Body.MultipartFormPayload.StickerPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostDeleteStickerFromSet.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// File identifier of the sticker
                    ///
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/json/sticker`.
                    public var sticker: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sticker: File identifier of the sticker
                    public init(sticker: Swift.String) {
                        self.sticker = sticker
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sticker
                    }
                }
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/requestBody/content/application\/json`.
                case json(Operations.PostDeleteStickerFromSet.Input.Body.JsonPayload)
            }
            public var body: Operations.PostDeleteStickerFromSet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostDeleteStickerFromSet.Input.Headers = .init(),
                body: Operations.PostDeleteStickerFromSet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/200/content/application\/json`.
                    case json(Operations.PostDeleteStickerFromSet.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostDeleteStickerFromSet.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteStickerFromSet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteStickerFromSet.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteStickerFromSet/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostDeleteStickerFromSet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostDeleteStickerFromSet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/deleteStickerFromSet/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostDeleteStickerFromSet.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostDeleteStickerFromSet.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//deleteStickerFromSet/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostDeleteStickerFromSet.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostDeleteStickerFromSet.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
    ///
    /// - Remark: HTTP `POST /setStickerSetThumb`.
    /// - Remark: Generated from `#/paths//setStickerSetThumb/post`.
    public enum PostSetStickerSetThumb {
        public static let id: Swift.String = "post/setStickerSetThumb"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetStickerSetThumb.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetStickerSetThumb.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetStickerSetThumb.Input.Headers
            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/name`.
                    public struct NamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case name(OpenAPIRuntime.MultipartPart<Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload.NamePayload>)
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb`.
                    public struct ThumbPayload: Sendable, Hashable {
                        /// A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.
                        ///
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body`.
                        public struct BodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body/value1`.
                            public var value1: Components.Schemas.InputFile?
                            /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/multipartForm/thumb/content/body/value2`.
                            public var value2: Swift.String?
                            /// Creates a new `BodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.InputFile? = nil,
                                value2: Swift.String? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        public var body: Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload
                        /// Creates a new `ThumbPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload.ThumbPayload.BodyPayload) {
                            self.body = body
                        }
                    }
                    case thumb(OpenAPIRuntime.MultipartPart<Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload.ThumbPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetStickerSetThumb.Input.Body.MultipartFormPayload>)
            }
            public var body: Operations.PostSetStickerSetThumb.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetStickerSetThumb.Input.Headers = .init(),
                body: Operations.PostSetStickerSetThumb.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetStickerSetThumb.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetStickerSetThumb.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetStickerSetThumb.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetStickerSetThumb.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerSetThumb/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetStickerSetThumb.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetStickerSetThumb.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setStickerSetThumb/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetStickerSetThumb.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetStickerSetThumb.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setStickerSetThumb/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetStickerSetThumb.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetStickerSetThumb.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send answers to an inline query. On success, *True* is returned.  
    /// No more than **50** results per query are allowed.
    ///
    /// - Remark: HTTP `POST /answerInlineQuery`.
    /// - Remark: Generated from `#/paths//answerInlineQuery/post`.
    public enum PostAnswerInlineQuery {
        public static let id: Swift.String = "post/answerInlineQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerInlineQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerInlineQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerInlineQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAnswerInlineQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the answered query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/inline_query_id`.
                    public var inlineQueryId: Swift.String
                    /// A JSON-serialized array of results for the inline query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/results`.
                    public var results: [Components.Schemas.InlineQueryResult]
                    /// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/cache_time`.
                    public var cacheTime: Swift.Int?
                    /// Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/is_personal`.
                    public var isPersonal: Swift.Bool?
                    /// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/next_offset`.
                    public var nextOffset: Swift.String?
                    /// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/switch_pm_text`.
                    public var switchPmText: Swift.String?
                    /// [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    ///
                    /// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/urlEncodedForm/switch_pm_parameter`.
                    public var switchPmParameter: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - inlineQueryId: Unique identifier for the answered query
                    ///   - results: A JSON-serialized array of results for the inline query
                    ///   - cacheTime: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///   - isPersonal: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///   - nextOffset: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///   - switchPmText: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///   - switchPmParameter: [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    public init(
                        inlineQueryId: Swift.String,
                        results: [Components.Schemas.InlineQueryResult],
                        cacheTime: Swift.Int? = nil,
                        isPersonal: Swift.Bool? = nil,
                        nextOffset: Swift.String? = nil,
                        switchPmText: Swift.String? = nil,
                        switchPmParameter: Swift.String? = nil
                    ) {
                        self.inlineQueryId = inlineQueryId
                        self.results = results
                        self.cacheTime = cacheTime
                        self.isPersonal = isPersonal
                        self.nextOffset = nextOffset
                        self.switchPmText = switchPmText
                        self.switchPmParameter = switchPmParameter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inlineQueryId = "inline_query_id"
                        case results
                        case cacheTime = "cache_time"
                        case isPersonal = "is_personal"
                        case nextOffset = "next_offset"
                        case switchPmText = "switch_pm_text"
                        case switchPmParameter = "switch_pm_parameter"
                    }
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAnswerInlineQuery.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/inline_query_id`.
                    public struct InlineQueryIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineQueryIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineQueryId(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.InlineQueryIdPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/results`.
                    public struct ResultsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineQueryResult
                        /// Creates a new `ResultsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineQueryResult) {
                            self.body = body
                        }
                    }
                    case results(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.ResultsPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/cache_time`.
                    public struct CacheTimePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CacheTimePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case cacheTime(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.CacheTimePayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/is_personal`.
                    public struct IsPersonalPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IsPersonalPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case isPersonal(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.IsPersonalPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/next_offset`.
                    public struct NextOffsetPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NextOffsetPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case nextOffset(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.NextOffsetPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/switch_pm_text`.
                    public struct SwitchPmTextPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SwitchPmTextPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case switchPmText(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.SwitchPmTextPayload>)
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/multipartForm/switch_pm_parameter`.
                    public struct SwitchPmParameterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SwitchPmParameterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case switchPmParameter(OpenAPIRuntime.MultipartPart<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload.SwitchPmParameterPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAnswerInlineQuery.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the answered query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/inline_query_id`.
                    public var inlineQueryId: Swift.String
                    /// A JSON-serialized array of results for the inline query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/results`.
                    public var results: [Components.Schemas.InlineQueryResult]
                    /// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/cache_time`.
                    public var cacheTime: Swift.Int?
                    /// Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/is_personal`.
                    public var isPersonal: Swift.Bool?
                    /// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/next_offset`.
                    public var nextOffset: Swift.String?
                    /// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/switch_pm_text`.
                    public var switchPmText: Swift.String?
                    /// [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    ///
                    /// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
                    ///
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/json/switch_pm_parameter`.
                    public var switchPmParameter: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inlineQueryId: Unique identifier for the answered query
                    ///   - results: A JSON-serialized array of results for the inline query
                    ///   - cacheTime: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
                    ///   - isPersonal: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
                    ///   - nextOffset: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
                    ///   - switchPmText: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
                    ///   - switchPmParameter: [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  
                    public init(
                        inlineQueryId: Swift.String,
                        results: [Components.Schemas.InlineQueryResult],
                        cacheTime: Swift.Int? = nil,
                        isPersonal: Swift.Bool? = nil,
                        nextOffset: Swift.String? = nil,
                        switchPmText: Swift.String? = nil,
                        switchPmParameter: Swift.String? = nil
                    ) {
                        self.inlineQueryId = inlineQueryId
                        self.results = results
                        self.cacheTime = cacheTime
                        self.isPersonal = isPersonal
                        self.nextOffset = nextOffset
                        self.switchPmText = switchPmText
                        self.switchPmParameter = switchPmParameter
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inlineQueryId = "inline_query_id"
                        case results
                        case cacheTime = "cache_time"
                        case isPersonal = "is_personal"
                        case nextOffset = "next_offset"
                        case switchPmText = "switch_pm_text"
                        case switchPmParameter = "switch_pm_parameter"
                    }
                }
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/requestBody/content/application\/json`.
                case json(Operations.PostAnswerInlineQuery.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAnswerInlineQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAnswerInlineQuery.Input.Headers = .init(),
                body: Operations.PostAnswerInlineQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAnswerInlineQuery.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAnswerInlineQuery.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerInlineQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerInlineQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerInlineQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAnswerInlineQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAnswerInlineQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerInlineQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerInlineQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerInlineQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerInlineQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAnswerInlineQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAnswerInlineQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendInvoice`.
    /// - Remark: Generated from `#/paths//sendInvoice/post`.
    public enum PostSendInvoice {
        public static let id: Swift.String = "post/sendInvoice"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendInvoice/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendInvoice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendInvoice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendInvoice.Input.Headers
            /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target private chat
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Swift.Int
                    /// Product name, 1-32 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/title`.
                    public var title: Swift.String
                    /// Product description, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/description`.
                    public var description: Swift.String
                    /// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/payload`.
                    public var payload: Swift.String
                    /// Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/provider_token`.
                    public var providerToken: Swift.String
                    /// Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/start_parameter`.
                    public var startParameter: Swift.String
                    /// Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/currency`.
                    public var currency: Swift.String
                    /// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/prices`.
                    public var prices: [Components.Schemas.LabeledPrice]
                    /// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/provider_data`.
                    public var providerData: Swift.String?
                    /// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_url`.
                    public var photoUrl: Swift.String?
                    /// Photo size
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_size`.
                    public var photoSize: Swift.Int?
                    /// Photo width
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_width`.
                    public var photoWidth: Swift.Int?
                    /// Photo height
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/photo_height`.
                    public var photoHeight: Swift.Int?
                    /// Pass *True*, if you require the user's full name to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_name`.
                    public var needName: Swift.Bool?
                    /// Pass *True*, if you require the user's phone number to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_phone_number`.
                    public var needPhoneNumber: Swift.Bool?
                    /// Pass *True*, if you require the user's email address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_email`.
                    public var needEmail: Swift.Bool?
                    /// Pass *True*, if you require the user's shipping address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/need_shipping_address`.
                    public var needShippingAddress: Swift.Bool?
                    /// Pass *True*, if user's phone number should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/send_phone_number_to_provider`.
                    public var sendPhoneNumberToProvider: Swift.Bool?
                    /// Pass *True*, if user's email address should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/send_email_to_provider`.
                    public var sendEmailToProvider: Swift.Bool?
                    /// Pass *True*, if the final price depends on the shipping method
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/is_flexible`.
                    public var isFlexible: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target private chat
                    ///   - title: Product name, 1-32 characters
                    ///   - description: Product description, 1-255 characters
                    ///   - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///   - providerToken: Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///   - startParameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///   - currency: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///   - prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///   - providerData: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///   - photoUrl: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///   - photoSize: Photo size
                    ///   - photoWidth: Photo width
                    ///   - photoHeight: Photo height
                    ///   - needName: Pass *True*, if you require the user's full name to complete the order
                    ///   - needPhoneNumber: Pass *True*, if you require the user's phone number to complete the order
                    ///   - needEmail: Pass *True*, if you require the user's email address to complete the order
                    ///   - needShippingAddress: Pass *True*, if you require the user's shipping address to complete the order
                    ///   - sendPhoneNumberToProvider: Pass *True*, if user's phone number should be sent to provider
                    ///   - sendEmailToProvider: Pass *True*, if user's email address should be sent to provider
                    ///   - isFlexible: Pass *True*, if the final price depends on the shipping method
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup:
                    public init(
                        chatId: Swift.Int,
                        title: Swift.String,
                        description: Swift.String,
                        payload: Swift.String,
                        providerToken: Swift.String,
                        startParameter: Swift.String,
                        currency: Swift.String,
                        prices: [Components.Schemas.LabeledPrice],
                        providerData: Swift.String? = nil,
                        photoUrl: Swift.String? = nil,
                        photoSize: Swift.Int? = nil,
                        photoWidth: Swift.Int? = nil,
                        photoHeight: Swift.Int? = nil,
                        needName: Swift.Bool? = nil,
                        needPhoneNumber: Swift.Bool? = nil,
                        needEmail: Swift.Bool? = nil,
                        needShippingAddress: Swift.Bool? = nil,
                        sendPhoneNumberToProvider: Swift.Bool? = nil,
                        sendEmailToProvider: Swift.Bool? = nil,
                        isFlexible: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.title = title
                        self.description = description
                        self.payload = payload
                        self.providerToken = providerToken
                        self.startParameter = startParameter
                        self.currency = currency
                        self.prices = prices
                        self.providerData = providerData
                        self.photoUrl = photoUrl
                        self.photoSize = photoSize
                        self.photoWidth = photoWidth
                        self.photoHeight = photoHeight
                        self.needName = needName
                        self.needPhoneNumber = needPhoneNumber
                        self.needEmail = needEmail
                        self.needShippingAddress = needShippingAddress
                        self.sendPhoneNumberToProvider = sendPhoneNumberToProvider
                        self.sendEmailToProvider = sendEmailToProvider
                        self.isFlexible = isFlexible
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case title
                        case description
                        case payload
                        case providerToken = "provider_token"
                        case startParameter = "start_parameter"
                        case currency
                        case prices
                        case providerData = "provider_data"
                        case photoUrl = "photo_url"
                        case photoSize = "photo_size"
                        case photoWidth = "photo_width"
                        case photoHeight = "photo_height"
                        case needName = "need_name"
                        case needPhoneNumber = "need_phone_number"
                        case needEmail = "need_email"
                        case needShippingAddress = "need_shipping_address"
                        case sendPhoneNumberToProvider = "send_phone_number_to_provider"
                        case sendEmailToProvider = "send_email_to_provider"
                        case isFlexible = "is_flexible"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendInvoice.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/title`.
                    public struct TitlePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `TitlePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case title(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.TitlePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/description`.
                    public struct DescriptionPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DescriptionPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case description(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.DescriptionPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/payload`.
                    public struct PayloadPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case payload(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PayloadPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/provider_token`.
                    public struct ProviderTokenPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProviderTokenPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case providerToken(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.ProviderTokenPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/start_parameter`.
                    public struct StartParameterPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `StartParameterPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case startParameter(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.StartParameterPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/currency`.
                    public struct CurrencyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `CurrencyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case currency(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.CurrencyPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/prices`.
                    public struct PricesPayload: Sendable, Hashable {
                        public var body: Components.Schemas.LabeledPrice
                        /// Creates a new `PricesPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.LabeledPrice) {
                            self.body = body
                        }
                    }
                    case prices(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PricesPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/provider_data`.
                    public struct ProviderDataPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ProviderDataPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case providerData(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.ProviderDataPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_url`.
                    public struct PhotoUrlPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhotoUrlPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photoUrl(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PhotoUrlPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_size`.
                    public struct PhotoSizePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhotoSizePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photoSize(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PhotoSizePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_width`.
                    public struct PhotoWidthPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhotoWidthPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photoWidth(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PhotoWidthPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/photo_height`.
                    public struct PhotoHeightPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PhotoHeightPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case photoHeight(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.PhotoHeightPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_name`.
                    public struct NeedNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NeedNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case needName(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.NeedNamePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_phone_number`.
                    public struct NeedPhoneNumberPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NeedPhoneNumberPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case needPhoneNumber(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.NeedPhoneNumberPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_email`.
                    public struct NeedEmailPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NeedEmailPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case needEmail(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.NeedEmailPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/need_shipping_address`.
                    public struct NeedShippingAddressPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `NeedShippingAddressPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case needShippingAddress(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.NeedShippingAddressPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/send_phone_number_to_provider`.
                    public struct SendPhoneNumberToProviderPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendPhoneNumberToProviderPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendPhoneNumberToProvider(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.SendPhoneNumberToProviderPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/send_email_to_provider`.
                    public struct SendEmailToProviderPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `SendEmailToProviderPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case sendEmailToProvider(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.SendEmailToProviderPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/is_flexible`.
                    public struct IsFlexiblePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `IsFlexiblePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case isFlexible(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.IsFlexiblePayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendInvoice.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendInvoice.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target private chat
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/chat_id`.
                    public var chatId: Swift.Int
                    /// Product name, 1-32 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// Product description, 1-255 characters
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/description`.
                    public var description: Swift.String
                    /// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/payload`.
                    public var payload: Swift.String
                    /// Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/provider_token`.
                    public var providerToken: Swift.String
                    /// Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/start_parameter`.
                    public var startParameter: Swift.String
                    /// Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/currency`.
                    public var currency: Swift.String
                    /// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/prices`.
                    public var prices: [Components.Schemas.LabeledPrice]
                    /// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/provider_data`.
                    public var providerData: Swift.String?
                    /// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_url`.
                    public var photoUrl: Swift.String?
                    /// Photo size
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_size`.
                    public var photoSize: Swift.Int?
                    /// Photo width
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_width`.
                    public var photoWidth: Swift.Int?
                    /// Photo height
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/photo_height`.
                    public var photoHeight: Swift.Int?
                    /// Pass *True*, if you require the user's full name to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_name`.
                    public var needName: Swift.Bool?
                    /// Pass *True*, if you require the user's phone number to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_phone_number`.
                    public var needPhoneNumber: Swift.Bool?
                    /// Pass *True*, if you require the user's email address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_email`.
                    public var needEmail: Swift.Bool?
                    /// Pass *True*, if you require the user's shipping address to complete the order
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/need_shipping_address`.
                    public var needShippingAddress: Swift.Bool?
                    /// Pass *True*, if user's phone number should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/send_phone_number_to_provider`.
                    public var sendPhoneNumberToProvider: Swift.Bool?
                    /// Pass *True*, if user's email address should be sent to provider
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/send_email_to_provider`.
                    public var sendEmailToProvider: Swift.Bool?
                    /// Pass *True*, if the final price depends on the shipping method
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/is_flexible`.
                    public var isFlexible: Swift.Bool?
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target private chat
                    ///   - title: Product name, 1-32 characters
                    ///   - description: Product description, 1-255 characters
                    ///   - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
                    ///   - providerToken: Payments provider token, obtained via [Botfather](https://t.me/botfather)
                    ///   - startParameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
                    ///   - currency: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
                    ///   - prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
                    ///   - providerData: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
                    ///   - photoUrl: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
                    ///   - photoSize: Photo size
                    ///   - photoWidth: Photo width
                    ///   - photoHeight: Photo height
                    ///   - needName: Pass *True*, if you require the user's full name to complete the order
                    ///   - needPhoneNumber: Pass *True*, if you require the user's phone number to complete the order
                    ///   - needEmail: Pass *True*, if you require the user's email address to complete the order
                    ///   - needShippingAddress: Pass *True*, if you require the user's shipping address to complete the order
                    ///   - sendPhoneNumberToProvider: Pass *True*, if user's phone number should be sent to provider
                    ///   - sendEmailToProvider: Pass *True*, if user's email address should be sent to provider
                    ///   - isFlexible: Pass *True*, if the final price depends on the shipping method
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup:
                    public init(
                        chatId: Swift.Int,
                        title: Swift.String,
                        description: Swift.String,
                        payload: Swift.String,
                        providerToken: Swift.String,
                        startParameter: Swift.String,
                        currency: Swift.String,
                        prices: [Components.Schemas.LabeledPrice],
                        providerData: Swift.String? = nil,
                        photoUrl: Swift.String? = nil,
                        photoSize: Swift.Int? = nil,
                        photoWidth: Swift.Int? = nil,
                        photoHeight: Swift.Int? = nil,
                        needName: Swift.Bool? = nil,
                        needPhoneNumber: Swift.Bool? = nil,
                        needEmail: Swift.Bool? = nil,
                        needShippingAddress: Swift.Bool? = nil,
                        sendPhoneNumberToProvider: Swift.Bool? = nil,
                        sendEmailToProvider: Swift.Bool? = nil,
                        isFlexible: Swift.Bool? = nil,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.title = title
                        self.description = description
                        self.payload = payload
                        self.providerToken = providerToken
                        self.startParameter = startParameter
                        self.currency = currency
                        self.prices = prices
                        self.providerData = providerData
                        self.photoUrl = photoUrl
                        self.photoSize = photoSize
                        self.photoWidth = photoWidth
                        self.photoHeight = photoHeight
                        self.needName = needName
                        self.needPhoneNumber = needPhoneNumber
                        self.needEmail = needEmail
                        self.needShippingAddress = needShippingAddress
                        self.sendPhoneNumberToProvider = sendPhoneNumberToProvider
                        self.sendEmailToProvider = sendEmailToProvider
                        self.isFlexible = isFlexible
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case title
                        case description
                        case payload
                        case providerToken = "provider_token"
                        case startParameter = "start_parameter"
                        case currency
                        case prices
                        case providerData = "provider_data"
                        case photoUrl = "photo_url"
                        case photoSize = "photo_size"
                        case photoWidth = "photo_width"
                        case photoHeight = "photo_height"
                        case needName = "need_name"
                        case needPhoneNumber = "need_phone_number"
                        case needEmail = "need_email"
                        case needShippingAddress = "need_shipping_address"
                        case sendPhoneNumberToProvider = "send_phone_number_to_provider"
                        case sendEmailToProvider = "send_email_to_provider"
                        case isFlexible = "is_flexible"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/sendInvoice/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendInvoice.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendInvoice.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendInvoice.Input.Headers = .init(),
                body: Operations.PostSendInvoice.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendInvoice.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendInvoice.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendInvoice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendInvoice.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendInvoice/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendInvoice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendInvoice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendInvoice/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendInvoice.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendInvoice.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendInvoice/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendInvoice.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendInvoice.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    ///
    /// - Remark: HTTP `POST /answerShippingQuery`.
    /// - Remark: Generated from `#/paths//answerShippingQuery/post`.
    public enum PostAnswerShippingQuery {
        public static let id: Swift.String = "post/answerShippingQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerShippingQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerShippingQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerShippingQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAnswerShippingQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/shipping_query_id`.
                    public var shippingQueryId: Swift.String
                    /// Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/shipping_options`.
                    public var shippingOptions: [Components.Schemas.ShippingOption]?
                    /// Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/urlEncodedForm/error_message`.
                    public var errorMessage: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - shippingQueryId: Unique identifier for the query to be answered
                    ///   - ok: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///   - shippingOptions: Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///   - errorMessage: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    public init(
                        shippingQueryId: Swift.String,
                        ok: Swift.Bool,
                        shippingOptions: [Components.Schemas.ShippingOption]? = nil,
                        errorMessage: Swift.String? = nil
                    ) {
                        self.shippingQueryId = shippingQueryId
                        self.ok = ok
                        self.shippingOptions = shippingOptions
                        self.errorMessage = errorMessage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case shippingQueryId = "shipping_query_id"
                        case ok
                        case shippingOptions = "shipping_options"
                        case errorMessage = "error_message"
                    }
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAnswerShippingQuery.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/shipping_query_id`.
                    public struct ShippingQueryIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ShippingQueryIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case shippingQueryId(OpenAPIRuntime.MultipartPart<Operations.PostAnswerShippingQuery.Input.Body.MultipartFormPayload.ShippingQueryIdPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/ok`.
                    public struct OkPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OkPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ok(OpenAPIRuntime.MultipartPart<Operations.PostAnswerShippingQuery.Input.Body.MultipartFormPayload.OkPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/shipping_options`.
                    public struct ShippingOptionsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.ShippingOption
                        /// Creates a new `ShippingOptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.ShippingOption) {
                            self.body = body
                        }
                    }
                    case shippingOptions(OpenAPIRuntime.MultipartPart<Operations.PostAnswerShippingQuery.Input.Body.MultipartFormPayload.ShippingOptionsPayload>)
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/multipartForm/error_message`.
                    public struct ErrorMessagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ErrorMessagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case errorMessage(OpenAPIRuntime.MultipartPart<Operations.PostAnswerShippingQuery.Input.Body.MultipartFormPayload.ErrorMessagePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAnswerShippingQuery.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/shipping_query_id`.
                    public var shippingQueryId: Swift.String
                    /// Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/shipping_options`.
                    public var shippingOptions: [Components.Schemas.ShippingOption]?
                    /// Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/json/error_message`.
                    public var errorMessage: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - shippingQueryId: Unique identifier for the query to be answered
                    ///   - ok: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
                    ///   - shippingOptions: Required if *ok* is True. A JSON-serialized array of available shipping options.
                    ///   - errorMessage: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
                    public init(
                        shippingQueryId: Swift.String,
                        ok: Swift.Bool,
                        shippingOptions: [Components.Schemas.ShippingOption]? = nil,
                        errorMessage: Swift.String? = nil
                    ) {
                        self.shippingQueryId = shippingQueryId
                        self.ok = ok
                        self.shippingOptions = shippingOptions
                        self.errorMessage = errorMessage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case shippingQueryId = "shipping_query_id"
                        case ok
                        case shippingOptions = "shipping_options"
                        case errorMessage = "error_message"
                    }
                }
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/requestBody/content/application\/json`.
                case json(Operations.PostAnswerShippingQuery.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAnswerShippingQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAnswerShippingQuery.Input.Headers = .init(),
                body: Operations.PostAnswerShippingQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAnswerShippingQuery.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAnswerShippingQuery.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerShippingQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerShippingQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerShippingQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAnswerShippingQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAnswerShippingQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerShippingQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerShippingQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerShippingQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerShippingQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAnswerShippingQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAnswerShippingQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
    ///
    /// - Remark: HTTP `POST /answerPreCheckoutQuery`.
    /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post`.
    public enum PostAnswerPreCheckoutQuery {
        public static let id: Swift.String = "post/answerPreCheckoutQuery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerPreCheckoutQuery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAnswerPreCheckoutQuery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAnswerPreCheckoutQuery.Input.Headers
            /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/pre_checkout_query_id`.
                    public var preCheckoutQueryId: Swift.String
                    /// Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/urlEncodedForm/error_message`.
                    public var errorMessage: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - preCheckoutQueryId: Unique identifier for the query to be answered
                    ///   - ok: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///   - errorMessage: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    public init(
                        preCheckoutQueryId: Swift.String,
                        ok: Swift.Bool,
                        errorMessage: Swift.String? = nil
                    ) {
                        self.preCheckoutQueryId = preCheckoutQueryId
                        self.ok = ok
                        self.errorMessage = errorMessage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case preCheckoutQueryId = "pre_checkout_query_id"
                        case ok
                        case errorMessage = "error_message"
                    }
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostAnswerPreCheckoutQuery.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/pre_checkout_query_id`.
                    public struct PreCheckoutQueryIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `PreCheckoutQueryIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case preCheckoutQueryId(OpenAPIRuntime.MultipartPart<Operations.PostAnswerPreCheckoutQuery.Input.Body.MultipartFormPayload.PreCheckoutQueryIdPayload>)
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/ok`.
                    public struct OkPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `OkPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case ok(OpenAPIRuntime.MultipartPart<Operations.PostAnswerPreCheckoutQuery.Input.Body.MultipartFormPayload.OkPayload>)
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/multipartForm/error_message`.
                    public struct ErrorMessagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ErrorMessagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case errorMessage(OpenAPIRuntime.MultipartPart<Operations.PostAnswerPreCheckoutQuery.Input.Body.MultipartFormPayload.ErrorMessagePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostAnswerPreCheckoutQuery.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the query to be answered
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/pre_checkout_query_id`.
                    public var preCheckoutQueryId: Swift.String
                    /// Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/ok`.
                    public var ok: Swift.Bool
                    /// Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    ///
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/json/error_message`.
                    public var errorMessage: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - preCheckoutQueryId: Unique identifier for the query to be answered
                    ///   - ok: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
                    ///   - errorMessage: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
                    public init(
                        preCheckoutQueryId: Swift.String,
                        ok: Swift.Bool,
                        errorMessage: Swift.String? = nil
                    ) {
                        self.preCheckoutQueryId = preCheckoutQueryId
                        self.ok = ok
                        self.errorMessage = errorMessage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case preCheckoutQueryId = "pre_checkout_query_id"
                        case ok
                        case errorMessage = "error_message"
                    }
                }
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/requestBody/content/application\/json`.
                case json(Operations.PostAnswerPreCheckoutQuery.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAnswerPreCheckoutQuery.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAnswerPreCheckoutQuery.Input.Headers = .init(),
                body: Operations.PostAnswerPreCheckoutQuery.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAnswerPreCheckoutQuery.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAnswerPreCheckoutQuery.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerPreCheckoutQuery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerPreCheckoutQuery.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAnswerPreCheckoutQuery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAnswerPreCheckoutQuery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/answerPreCheckoutQuery/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAnswerPreCheckoutQuery.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAnswerPreCheckoutQuery.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//answerPreCheckoutQuery/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostAnswerPreCheckoutQuery.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostAnswerPreCheckoutQuery.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
    ///
    /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    ///
    /// - Remark: HTTP `POST /setPassportDataErrors`.
    /// - Remark: Generated from `#/paths//setPassportDataErrors/post`.
    public enum PostSetPassportDataErrors {
        public static let id: Swift.String = "post/setPassportDataErrors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetPassportDataErrors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetPassportDataErrors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetPassportDataErrors.Input.Headers
            /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// A JSON-serialized array describing the errors
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/urlEncodedForm/errors`.
                    public var errors: [Components.Schemas.PassportElementError]
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: User identifier
                    ///   - errors: A JSON-serialized array describing the errors
                    public init(
                        userId: Swift.Int,
                        errors: [Components.Schemas.PassportElementError]
                    ) {
                        self.userId = userId
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case errors
                    }
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetPassportDataErrors.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostSetPassportDataErrors.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/multipartForm/errors`.
                    public struct ErrorsPayload: Sendable, Hashable {
                        public var body: Components.Schemas.PassportElementError
                        /// Creates a new `ErrorsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.PassportElementError) {
                            self.body = body
                        }
                    }
                    case errors(OpenAPIRuntime.MultipartPart<Operations.PostSetPassportDataErrors.Input.Body.MultipartFormPayload.ErrorsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetPassportDataErrors.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// A JSON-serialized array describing the errors
                    ///
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/json/errors`.
                    public var errors: [Components.Schemas.PassportElementError]
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: User identifier
                    ///   - errors: A JSON-serialized array describing the errors
                    public init(
                        userId: Swift.Int,
                        errors: [Components.Schemas.PassportElementError]
                    ) {
                        self.userId = userId
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case errors
                    }
                }
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetPassportDataErrors.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetPassportDataErrors.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetPassportDataErrors.Input.Headers = .init(),
                body: Operations.PostSetPassportDataErrors.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/json/result`.
                        public var result: Swift.Bool
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Swift.Bool
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetPassportDataErrors.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetPassportDataErrors.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetPassportDataErrors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetPassportDataErrors.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPassportDataErrors/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetPassportDataErrors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetPassportDataErrors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setPassportDataErrors/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetPassportDataErrors.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetPassportDataErrors.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setPassportDataErrors/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetPassportDataErrors.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetPassportDataErrors.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
    ///
    /// - Remark: HTTP `POST /sendGame`.
    /// - Remark: Generated from `#/paths//sendGame/post`.
    public enum PostSendGame {
        public static let id: Swift.String = "post/sendGame"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sendGame/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendGame.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSendGame.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSendGame.Input.Headers
            /// - Remark: Generated from `#/paths/sendGame/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Swift.Int
                    /// Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/game_short_name`.
                    public var gameShortName: Swift.String
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/urlEncodedForm/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat
                    ///   - gameShortName: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup:
                    public init(
                        chatId: Swift.Int,
                        gameShortName: Swift.String,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.gameShortName = gameShortName
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case gameShortName = "game_short_name"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSendGame.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/game_short_name`.
                    public struct GameShortNamePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `GameShortNamePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case gameShortName(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.GameShortNamePayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/disable_notification`.
                    public struct DisableNotificationPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableNotificationPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableNotification(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.DisableNotificationPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/reply_to_message_id`.
                    public struct ReplyToMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ReplyToMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case replyToMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.ReplyToMessageIdPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/allow_sending_without_reply`.
                    public struct AllowSendingWithoutReplyPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `AllowSendingWithoutReplyPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case allowSendingWithoutReply(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.AllowSendingWithoutReplyPayload>)
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/multipartForm/reply_markup`.
                    public struct ReplyMarkupPayload: Sendable, Hashable {
                        public var body: Components.Schemas.InlineKeyboardMarkup
                        /// Creates a new `ReplyMarkupPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Schemas.InlineKeyboardMarkup) {
                            self.body = body
                        }
                    }
                    case replyMarkup(OpenAPIRuntime.MultipartPart<Operations.PostSendGame.Input.Body.MultipartFormPayload.ReplyMarkupPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSendGame.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/chat_id`.
                    public var chatId: Swift.Int
                    /// Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/game_short_name`.
                    public var gameShortName: Swift.String
                    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/disable_notification`.
                    public var disableNotification: Swift.Bool?
                    /// If the message is a reply, ID of the original message
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/reply_to_message_id`.
                    public var replyToMessageId: Swift.Int?
                    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/allow_sending_without_reply`.
                    public var allowSendingWithoutReply: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/json/reply_markup`.
                    public var replyMarkup: Components.Schemas.InlineKeyboardMarkup?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - chatId: Unique identifier for the target chat
                    ///   - gameShortName: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
                    ///   - disableNotification: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
                    ///   - replyToMessageId: If the message is a reply, ID of the original message
                    ///   - allowSendingWithoutReply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
                    ///   - replyMarkup:
                    public init(
                        chatId: Swift.Int,
                        gameShortName: Swift.String,
                        disableNotification: Swift.Bool? = nil,
                        replyToMessageId: Swift.Int? = nil,
                        allowSendingWithoutReply: Swift.Bool? = nil,
                        replyMarkup: Components.Schemas.InlineKeyboardMarkup? = nil
                    ) {
                        self.chatId = chatId
                        self.gameShortName = gameShortName
                        self.disableNotification = disableNotification
                        self.replyToMessageId = replyToMessageId
                        self.allowSendingWithoutReply = allowSendingWithoutReply
                        self.replyMarkup = replyMarkup
                    }
                    public enum CodingKeys: String, CodingKey {
                        case chatId = "chat_id"
                        case gameShortName = "game_short_name"
                        case disableNotification = "disable_notification"
                        case replyToMessageId = "reply_to_message_id"
                        case allowSendingWithoutReply = "allow_sending_without_reply"
                        case replyMarkup = "reply_markup"
                    }
                }
                /// - Remark: Generated from `#/paths/sendGame/POST/requestBody/content/application\/json`.
                case json(Operations.PostSendGame.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSendGame.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSendGame.Input.Headers = .init(),
                body: Operations.PostSendGame.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/json/result`.
                        public var result: Components.Schemas.Message
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Components.Schemas.Message
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSendGame.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSendGame.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendGame.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendGame.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendGame/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSendGame.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSendGame.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sendGame/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sendGame/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSendGame.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSendGame.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//sendGame/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSendGame.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSendGame.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
    ///
    /// - Remark: HTTP `POST /setGameScore`.
    /// - Remark: Generated from `#/paths//setGameScore/post`.
    public enum PostSetGameScore {
        public static let id: Swift.String = "post/setGameScore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/setGameScore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetGameScore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSetGameScore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSetGameScore.Input.Headers
            /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// New score, must be non-negative
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/score`.
                    public var score: Swift.Int
                    /// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/force`.
                    public var force: Swift.Bool?
                    /// Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/disable_edit_message`.
                    public var disableEditMessage: Swift.Bool?
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: User identifier
                    ///   - score: New score, must be non-negative
                    ///   - force: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///   - disableEditMessage: Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        userId: Swift.Int,
                        score: Swift.Int,
                        force: Swift.Bool? = nil,
                        disableEditMessage: Swift.Bool? = nil,
                        chatId: Swift.Int? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil
                    ) {
                        self.userId = userId
                        self.score = score
                        self.force = force
                        self.disableEditMessage = disableEditMessage
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case score
                        case force
                        case disableEditMessage = "disable_edit_message"
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostSetGameScore.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/score`.
                    public struct ScorePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ScorePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case score(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.ScorePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/force`.
                    public struct ForcePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ForcePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case force(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.ForcePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/disable_edit_message`.
                    public struct DisableEditMessagePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `DisableEditMessagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case disableEditMessage(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.DisableEditMessagePayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostSetGameScore.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostSetGameScore.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// User identifier
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// New score, must be non-negative
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/score`.
                    public var score: Swift.Int
                    /// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/force`.
                    public var force: Swift.Bool?
                    /// Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/disable_edit_message`.
                    public var disableEditMessage: Swift.Bool?
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/chat_id`.
                    public var chatId: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: User identifier
                    ///   - score: New score, must be non-negative
                    ///   - force: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
                    ///   - disableEditMessage: Pass True, if the game message should not be automatically edited to include the current scoreboard
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        userId: Swift.Int,
                        score: Swift.Int,
                        force: Swift.Bool? = nil,
                        disableEditMessage: Swift.Bool? = nil,
                        chatId: Swift.Int? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil
                    ) {
                        self.userId = userId
                        self.score = score
                        self.force = force
                        self.disableEditMessage = disableEditMessage
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case score
                        case force
                        case disableEditMessage = "disable_edit_message"
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/setGameScore/POST/requestBody/content/application\/json`.
                case json(Operations.PostSetGameScore.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSetGameScore.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSetGameScore.Input.Headers = .init(),
                body: Operations.PostSetGameScore.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result`.
                        public struct ResultPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result/value1`.
                            public var value1: Components.Schemas.Message?
                            /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result/value2`.
                            public var value2: Swift.Bool?
                            /// Creates a new `ResultPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Message? = nil,
                                value2: Swift.Bool? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self.value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self.value2 = try decoder.decodeFromSingleValueContainer()
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        self.value1,
                                        self.value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                    self.value2
                                ])
                                try self.value1?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/json/result`.
                        public var result: Operations.PostSetGameScore.Output.Ok.Body.JsonPayload.ResultPayload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: Operations.PostSetGameScore.Output.Ok.Body.JsonPayload.ResultPayload
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSetGameScore.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSetGameScore.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetGameScore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetGameScore.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setGameScore/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSetGameScore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSetGameScore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/setGameScore/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/setGameScore/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSetGameScore.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSetGameScore.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//setGameScore/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostSetGameScore.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostSetGameScore.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
    ///
    /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
    ///
    /// - Remark: HTTP `POST /getGameHighScores`.
    /// - Remark: Generated from `#/paths//getGameHighScores/post`.
    public enum PostGetGameHighScores {
        public static let id: Swift.String = "post/getGameHighScores"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getGameHighScores/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetGameHighScores.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostGetGameHighScores.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostGetGameHighScores.Input.Headers
            /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Target user id
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/user_id`.
                    public var userId: Swift.Int
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/chat_id`.
                    public var chatId: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/urlEncodedForm/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Target user id
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        userId: Swift.Int,
                        chatId: Swift.Int? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil
                    ) {
                        self.userId = userId
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostGetGameHighScores.Input.Body.UrlEncodedFormPayload)
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm`.
                @frozen public enum MultipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/user_id`.
                    public struct UserIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `UserIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case userId(OpenAPIRuntime.MultipartPart<Operations.PostGetGameHighScores.Input.Body.MultipartFormPayload.UserIdPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/chat_id`.
                    public struct ChatIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `ChatIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case chatId(OpenAPIRuntime.MultipartPart<Operations.PostGetGameHighScores.Input.Body.MultipartFormPayload.ChatIdPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/message_id`.
                    public struct MessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `MessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case messageId(OpenAPIRuntime.MultipartPart<Operations.PostGetGameHighScores.Input.Body.MultipartFormPayload.MessageIdPayload>)
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/multipartForm/inline_message_id`.
                    public struct InlineMessageIdPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `InlineMessageIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case inlineMessageId(OpenAPIRuntime.MultipartPart<Operations.PostGetGameHighScores.Input.Body.MultipartFormPayload.InlineMessageIdPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.PostGetGameHighScores.Input.Body.MultipartFormPayload>)
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Target user id
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/user_id`.
                    public var userId: Swift.Int
                    /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/chat_id`.
                    public var chatId: Swift.Int?
                    /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/message_id`.
                    public var messageId: Swift.Int?
                    /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    ///
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/json/inline_message_id`.
                    public var inlineMessageId: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - userId: Target user id
                    ///   - chatId: Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
                    ///   - messageId: Required if *inline\_message\_id* is not specified. Identifier of the sent message
                    ///   - inlineMessageId: Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
                    public init(
                        userId: Swift.Int,
                        chatId: Swift.Int? = nil,
                        messageId: Swift.Int? = nil,
                        inlineMessageId: Swift.String? = nil
                    ) {
                        self.userId = userId
                        self.chatId = chatId
                        self.messageId = messageId
                        self.inlineMessageId = inlineMessageId
                    }
                    public enum CodingKeys: String, CodingKey {
                        case userId = "user_id"
                        case chatId = "chat_id"
                        case messageId = "message_id"
                        case inlineMessageId = "inline_message_id"
                    }
                }
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/requestBody/content/application\/json`.
                case json(Operations.PostGetGameHighScores.Input.Body.JsonPayload)
            }
            public var body: Operations.PostGetGameHighScores.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostGetGameHighScores.Input.Headers = .init(),
                body: Operations.PostGetGameHighScores.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json/ok`.
                        public var ok: Swift.Bool
                        /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/json/result`.
                        public var result: [Components.Schemas.GameHighScore]
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ok:
                        ///   - result:
                        public init(
                            ok: Swift.Bool,
                            result: [Components.Schemas.GameHighScore]
                        ) {
                            self.ok = ok
                            self.result = result
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ok
                            case result
                        }
                    }
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/200/content/application\/json`.
                    case json(Operations.PostGetGameHighScores.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostGetGameHighScores.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetGameHighScores.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetGameHighScores.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getGameHighScores/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostGetGameHighScores.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostGetGameHighScores.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGameHighScores/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostGetGameHighScores.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostGetGameHighScores.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//getGameHighScores/post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostGetGameHighScores.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostGetGameHighScores.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
